<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"><title>cell-widget</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/cg/c/cell-widget.htm">10.0 version</a></td></tr></table><h2 id="2">cell-widget</h2>

<p id="3"><b>Arguments: </b><i>
grid-row grid-column row-number column-number
</i></p>

<p id="4">
Returns a number of values that indicate which of the several built-in
cell widgets should appear in particular <a href="../../../classes/cg/grid-widget.htm"><code>grid-widget</code></a> cells, and what attributes those
widgets should have.  The default method does nothing, so an
application must add its own <a href="../c/cell-widget.htm"><b>cell-widget</b></a> methods in order to use the built-in
cell widgets with this approach.
</p>
<p id="5">
An alternative approach is to use the various <a href="../../../classes/cg/widget-column-mixin.htm"><code>widget-column-mixin</code></a> subclasses along with the
<a href="../../../classes/cg/widget-row-mixin.htm"><code>widget-row-mixin</code></a> class.
That approach is more object-oriented, but also limits the built-in
cell widgets to particular columns for each type of widget.
</p>
<p id="6">
The IDE's <a href="../../../ide-menus-and-dialogs/navigator-dialog.htm">Navigator
Dialog</a> contains a complete example of the cell-widget
approach, called <b>Grid-widget: using built-in cell widgets in
ARBITRARY cells</b>.
</p>
<p id="7">
The first value returned from a <a href="../c/cell-widget.htm"><b>cell-widget</b></a> method should be a keyword that
indicates which type of widget to use in the cell that is indicated by
the arguments to <a href="../c/cell-widget.htm"><b>cell-widget</b></a>.
 The possible values are
<code>:button</code>, <code>:static-text</code>,
<code>:editable-text</code>, <code>:check-box</code>,
<code>:combo-box</code>, <code>:lamp</code>, and
<code>:pixmap</code>. For more information on how each of
these widgets works, please refer to the associated
widget-column-mixin class shown below (even though these classes are
not used at all when writing cell-widget methods):
</p>
<ul>
<li id="8">
<code>:button</code> -- <a href="../../../classes/cg/static-text-and-button-column-mixin.htm"><code>static-text-and-button-column-mixin</code></a>
</li>
<li id="9">
<code>:check-box</code> -- <a href="../../../classes/cg/check-box-column-mixin.htm"><code>check-box-column-mixin</code></a>
</li>
<li id="10">
<code>:combo-box</code> -- <a href="../../../classes/cg/combo-box-column-mixin.htm"><code>combo-box-column-mixin</code></a>
</li>
<li id="11">
<code>:editable-text</code> -- <a href="../../../classes/cg/editable-text-column-mixin.htm"><code>editable-text-column-mixin</code></a>
</li>
<li id="12">
<code>:static-text</code> -- <a href="../../../classes/cg/static-text-column-mixin.htm"><code>static-text-column-mixin</code></a>
</li>

<li id="13">
<code>:lamp</code> -- <a href="../../../classes/cg/lamp-column-mixin.htm"><code>lamp-column-mixin</code></a>
</li>
<li id="14">
<code>:pixmap</code> -- <a href="../../../classes/cg/pixmap-column-mixin.htm"><code>pixmap-column-mixin</code></a>
</li>

</ul>
<p id="15">
The rest of the multiple values that a <a href="../c/cell-widget.htm"><b>cell-widget</b></a> method should return supply various
attributes of the cell's widget.  These values depend on which type of
widget is being used.  Most of these values correspond to properties
of the various <a href="../../../classes/cg/widget-column-mixin.htm"><code>widget-column-mixin</code></a> subclasses, though the
<a href="../c/cell-widget.htm"><b>cell-widget</b></a> approach does not
use those mixin classes.  Since the <a href="../c/cell-widget.htm"><b>cell-widget</b></a> approach has no <a href="../../../classes/cg/grid-column.htm"><code>grid-column</code></a> object on which to hang these
property values, we must return them as multiple values from <a href="../c/cell-widget.htm"><b>cell-widget</b></a> methods instead.
</p>
<p id="16">
Here are the multiple values that a <a href="../c/cell-widget.htm"><b>cell-widget</b></a> method should return for each type
of widget. This list includes links to the corresponding <a href="../../../classes/cg/widget-column-mixin.htm"><code>widget-column-mixin</code></a> properties that
they emulate, where applicable, for more information.
</p>
<ul>
<li id="17">
For a <a href="../../../classes/cg/static-text.htm"><code>static-text</code></a> widget,
return these values:
<ol>
<li id="18">
the symbol <code>:static-text</code>
</li>
<li id="19">
the string to display in the cell, or else <code>nil</code> to defer to the <a href="../r/read-cell-value.htm"><b>read-cell-value</b></a> method for the cell.
</li>
</ol>
</li>
<li id="20">
For a button widget, return these values: 
<ol>
<li id="21">
the symbol <code>:button</code>
</li>
<li id="22">
the name of the function to run when the user presses the button (see
<a href="../b/button-function.htm"><b>button-function</b></a>)
</li>
<li id="23">
a boolean value indicating whether the button should fill the cell
(see <a href="../b/button-fills-cell.htm"><b>button-fills-cell</b></a>)
</li>
<li id="24">
a string or pixmap to draw in the cell, or else <code>nil</code> to defer to the <a href="../r/read-cell-value.htm"><b>read-cell-value</b></a> method for the cell
</li>
<li id="25">
a background color for the button (see
make-rgb) or else (more typically) nil to default to the
cell-background-color method for the cell

</li>
<li id="26">

a boolean value
indicating whether the pixmap (if the fourth returned value is a
pixmap) should stretch to fill the button, rather than being drawn at
its canonical size

</li>
</ol>
</li>
<li id="27">
For a <a href="../../../classes/cg/check-box.htm"><code>check-box</code></a> widget,
return these values:
<ol>
<li id="28">
the symbol <code>:check-box</code>
</li>
<li id="29">


a string to display beside the check-box gadget (this value must be a
string and not <code>nil</code>); the null string will
center the gadget horizontally

</li>
<li id="30">
a boolean value indicating whether the user must click on the
check-box gadget itself, rather than anywhere in the cell, to toggle
the value (see <a href="../c/click-must-be-on-gadget.htm"><b>click-must-be-on-gadget</b></a>).
</li>
</ol>
</li>
<li id="31">
For an <a href="../../../classes/cg/editable-text.htm"><code>editable-text</code></a>
widget, return these values:
<ol>
<li id="32">
the symbol <code>:editable-text</code>
</li>
<li id="33">
a keyword indicating how type-in is initiated (see <a href="../e/edit-start-trigger.htm"><b>edit-start-trigger</b></a>)
</li>
<li id="34">
a keyword indicating how type-in is terminated (see <a href="../e/edit-end-trigger.htm"><b>edit-end-trigger</b></a>).
</li>
</ol>
</li>
<li id="35">
For a <a href="../../../classes/cg/combo-box.htm"><code>combo-box</code></a> widget,
return these values:
<ol>
<li id="36">
the symbol <code>:combo-box</code>
</li>
<li id="37">
a list of choices to display in the drop-down list (this is like the
list that a <a href="../r/range-reader.htm"><b>range-reader</b></a>
function would return, but it must be a non-null list of choices)
</li>
<li id="38">
a boolean value indicating whether the user may type in a new value,
rather than selecting from the list of choices
</li>
<li id="39">
a boolean value indicating whether to use a "real" <a href="../../../classes/cg/combo-box.htm"><code>combo-box</code></a> for the list of choices
rather than a <a href="../../../classes/cg/pop-up-menu.htm"><code>pop-up-menu</code></a> (see
<a href="../u/use-real-combo-box.htm"><b>use-real-combo-box</b></a>, though
that option has been deprecated and so <code>nil</code>
should always be returned here)
</li>
<li id="40">
a boolean value indicating whether the user must click on the
drop-down arrow gadget itself, rather than anywhere in the cell, to
show the list of choices (see <a href="../c/click-must-be-on-gadget.htm"><b>click-must-be-on-gadget</b></a>)
</li>
<li id="41">
a keyword indicating how type-in (if allowed) is initiated (see
<a href="../e/edit-start-trigger.htm"><b>edit-start-trigger</b></a>)
</li>
<li id="42">
a keyword indicating how type-in (if allowed) is terminated (see
<a href="../e/edit-end-trigger.htm"><b>edit-end-trigger</b></a>).
</li>
</ol>
</li>

<li id="43">
For a <a href="../../../classes/cg/lamp.htm"><code>lamp</code></a> widget,
return these values:
<ol>
<li id="44">
the symbol <code>:lamp</code>
</li>
<li id="45">

a real lamp widget, created as usual with <a href="../../../../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>. Typically this widget will not
also be used as a standalone lamp widget on a dialog, though it could
be, and it may also be displayed by multiple grid cells, even in
multiple <a href="../../../classes/cg/grid-widget.htm"><code>grid-widget</code></a>s.

</li>
</ol>
</li>

<li id="46">

For a <a href="../../../classes/cg/pixmap.htm"><code>pixmap</code></a>,
return these values:
<ol>
<li id="47">
the symbol <code>:pixmap</code>
</li>
<li id="48">

an association list that maps application values to pixmap names, as
with the <a href="../p/pixmap-alist.htm"><b>pixmap-alist</b></a> property
of a <a href="../../../classes/cg/grid-column.htm"><code>grid-column</code></a>

</li>
<li id="49">

a boolean value indicating whether the pixmap should be stretched to
fill the grid cell; see the <a href="../s/stretching.htm"><b>stretching</b></a> property

</li>
<li id="50">

a boolean value indicating whether the user is allowed to
interactively cycle through the cell's set of pixmaps; see <a href="../u/user-modifiable.htm"><b>user-modifiable</b></a>

</li>
<li id="51">

the name of a function to use for testing whether two application
values are equivalent, as with the <a href="../p/pixmap-value-test.htm"><b>pixmap-value-test</b></a> property; this value may be
omitted to default it to <a href="../w/widget-value-equal.htm"><b>widget-value-equal</b></a>

</li>
</ol>

</li>

</ul>
<p id="52">
These returned values cover only the properties that are unique to the
built-in cell widgets. Other attributes of the cell will still be
determined by general <a href="../../../classes/cg/grid-widget.htm"><code>grid-widget</code></a> generic functions such as <a href="../r/read-cell-value.htm"><b>read-cell-value</b></a>, <a href="../w/write-cell-value.htm"><b>write-cell-value</b></a>, <a href="../c/cell-font.htm"><b>cell-font</b></a>, <a href="../c/cell-background-color.htm"><b>cell-background-color</b></a>, <a href="../c/cell-horizontal-justification.htm"><b>cell-horizontal-justification</b></a>, and so on.  See
the <a href="../../../classes/cg/grid-widget.htm"><code>grid-widget</code></a> class for a
complete overview.
</p>
<p id="53">
<a href="../c/cell-widget.htm"><b>cell-widget</b></a> methods may be
called frequently, so to avoid generating a lot of garbage it is
advisable to return static values rather than values that are newly
consed on each call.
</p>

<p id="54">
There is an example using <a href="../c/cell-widget.htm"><b>cell-widget</b></a> on the Examples tab of the <a href="../../../ide-menus-and-dialogs/navigator-dialog.htm">Navigator Dialog</a>.
</p>
<p id="55">
See the <a href="../../../classes/cg/grid-widget.htm"><code>grid-widget</code></a> class
for an overview of writing grid-widget code.
</p>

<hr><p id="56"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/cg/c/cell-widget.htm">10.0 version</a></td></tr></table></body></html>