<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>def-foreign-type</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ff</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/ff/def-foreign-type.htm">10.0 version</a></td></tr></table><h2 id="2">def-foreign-type</h2>

<p id="3"><b>Arguments: </b><i>
name definition
</i></p>

<p id="4">
Defines <i>name</i> to be a user-defined foreign class
with the given <i>definition</i>.
<i>name</i> must either be a symbol or a list beginning
with a symbol and followed by attributes (see
below). <i>definition</i> is not evaluated and must be a
foreign type description as described in <a href="../../ftype.htm#foreign-type-syntax-1">The Syntax for Foreign Types</a> in
<a href="../../ftype.htm">ftype.htm</a>.
</p>
<p id="5">
Like <a href="../../../ansicl/dictentr/defclass.htm"><b>defclass</b></a>,
<a href="def-foreign-type.htm"><b>def-foreign-type</b></a> returns the
class metaobject. The class metaobject can also be retrieved in the
usual way by <a href="../../../ansicl/dictentr/find-cla.htm"><b>find-class</b></a>.
</p>
<p id="6">
The <a href="def-foreign-type.htm"><b>def-foreign-type</b></a> macro
immediately defines the given class in the current Lisp. It also
expands into a form that causes that type definition to be made when
the resulting form is evaluated.
</p>

<p id="7">
Note that when a new foreign type is defined in terms of one or more
named previously defined foreign types, the new definition is
expressed in terms of the current primitive definition of the named
types. If the named types are subsequently re-defined, the new type
definition will not change. Thus:
</p>

<pre id="8">
   (def-foreign-type one (:struct (nil :int)))
   (def-foreign-type two one)
   (def-foreign-type one (:struct (nil (:array :int 4))))
</pre>

<p id="9">
The foreign type <code>two</code> is not affected by the
redefinition of the foreign type <code>one</code>.
</p>


<p id="10">
Only one attribute can be specified. It is:
</p>

<table border="2" cellpadding="6" width="95%">
  <tr>
    <td width="86"><b>Attribute</b></td>
    <td width="80"><b>Type</b></td>
    <td width="268"><b>What</b></td>
  </tr>
  <tr>
    <td width="86"><b>:pack</b></td>
    <td width="80">integer</td>
    <td width="268">worst case alignment needed by data objects.</td>
  </tr>
</table>

<p id="11">
For example:
</p>

<pre id="12">
(def-foreign-type (foostruct (:pack 1)) (:struct (x :char) (y :int)))
</pre>

<p id="13">
Would pack the integer right next to the character, without the normal
3 bytes of padding. 
</p>
<p id="14">
When no <code>:pack</code> attribute is specified, the general
rule is that a structure field that is N bytes long will always be
aligned so that its offset from the beginning of the structure is a
multiple of N bytes.  Extra unused bytes will be added to the
structure just before the field if needed to conform to that rule.  If
a <code>:pack</code> attribute of K is specified, then the
forced alignment will never be to a multiple of more than K bytes.
(Only powers of 2 make sense for the <code>:pack</code>
attribute.)  Consider the following example:
</p>

<pre id="15">

(def-foreign-type barstruct
  (:struct (one :long)(two :char)(three :long)))
</pre>

<p id="16">
A <code>:long</code> is four bytes long, while
a <code>:char</code> is one byte long.  This would cause three
bytes of padding to be inserted before field three, so that field
three is aligned at a multiple of four bytes from the beginning of the
structure.  Now consider this variation:
</p>

<pre id="17">
(def-foreign-type (barstruct (:pack 2))
  (:struct (one :long)(two :char)(three :long)))
</pre>

<p id="18">
This would limit the alignment of any field to a multiple of 2 bytes
at the most, and so only one unused byte would be inserted before
field three to align it to a multiple of two bytes from the beginning
of the structure.
</p>
<p id="19">
Note that the native word size of the machine can affect how structure
fields are packed, if a version of Allegro that exploits the native
word size of the machine is used.  Consider this example:
</p>

<pre id="20">
(def-foreign-type pointerstruct
  (:struct (one :nat)(two :long)(three :nat)))
</pre>

<p id="21">
The <code>:nat</code> type indicates the "natural" word length
of the machine.  When running a 32-bit lisp on a 64-bit machine,
however, a <code>:nat</code> will still be 32 bits. Therefore,
when running a 32-bit lisp on any machine, all three fields of that
structure will be four bytes long, and no padding bytes will be
inserted.  But when running a 64-bit lisp on a 64-bit machine, the
<code>:nat</code> fields will be eight bytes long while the
:long field will still be four.  This will cause four padding bytes to
be inserted before field three to align it to a multiple of eight
bytes, unlike in a 32-bit lisp.  Using a <code>:pack</code>
attribute of 4, on the other hand, would pack the fields in a 64-bit
lisp just as it would in a 32-bit lisp.
</p>

<p id="22">
See <a href="../../ftype.htm">ftype.htm</a> for
information on foreign types in Allegro CL and
<a href="../../foreign-functions.htm">foreign-functions.htm</a> for general information on
foreign functions in Allegro CL. See in particular the list of types
in <a href="../../ftype.htm#foreign-type-syntax-1">The Syntax
for Foreign Types</a> in that documents.
</p>

<hr><p id="23"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had moderate revisions compared to the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/ff/def-foreign-type.htm">10.0 version</a></td></tr></table></body></html>