<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>Release Notes for Allegro CL 10.1</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#FFFF00"><b>RelNotes</b></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Significantly revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/release-notes.htm">10.0 version</a></td></tr></table><h1 id="2">Release Notes for Allegro CL 10.1</h1><p id="3">This document contains the following sections:</p><a href="#relnotes-intro-1">1.0 Introduction</a><br><a href="#post101-info-1">2.0 Information on changes and new stuff since the 10.1 release</a><br><a href="#fasl-incompat-1">3.0 Fasl files are not-compatible between versions and operating systems</a><br>&nbsp;&nbsp;&nbsp;<a href="#version-fasl-incompat-2">3.1 All pre-10.1 Lisp compiled files must be recompiled (old fasl files will not load)</a><br>&nbsp;&nbsp;&nbsp;<a href="#os-fasl-incompat-2">3.2 Fasl files may be incompatible in different Lisps on same hardware</a><br><a href="#install-1">4.0 Release Notes for installation</a><br><a href="#platform-specific-1">5.0 Release notes for specific platforms</a><br>&nbsp;&nbsp;&nbsp;<a href="#openssl-version-2">5.1 Required versions of OpenSSL needed for the :ssl module</a><br>&nbsp;&nbsp;&nbsp;<a href="#arm-2">5.2 The ARM-64 (aka ARMv8 and Aarch64) platform</a><br>&nbsp;&nbsp;&nbsp;<a href="#macosx-2">5.3 macOS notes</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#maverick-x11-2">5.3.1 Updating macOS may break X11</a><br>&nbsp;&nbsp;&nbsp;<a href="#heap-start-2">5.4 Heap start locations</a><br><a href="#acl-1">6.0 Release Notes for the base Lisp</a><br>&nbsp;&nbsp;&nbsp;<a href="#acl-new">6.1 New features in the base Lisp</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#acl-added-in-100">6.1.1 Features added to Allegro CL 10.0 after the initial release of Allegro CL 10.0</a><br>&nbsp;&nbsp;&nbsp;<a href="#acl-non-back-2">6.2 Non-backward-compatible changes in the base Lisp</a><br>&nbsp;&nbsp;&nbsp;<a href="#acl-other-2">6.3 Other changes to and notes about the base Lisp</a><br>&nbsp;&nbsp;&nbsp;<a href="#acl-smp-2">6.4 Multiprocessing and SMP release notes</a><br>&nbsp;&nbsp;&nbsp;<a href="#acl-platform-specific-2">6.5 Base Lisp platform-specific information</a><br><a href="#clim-1">7.0 Release Notes for CLIM</a><br><a href="#cg-1">8.0 Release Notes for Common Graphics and the IDE</a><br>&nbsp;&nbsp;&nbsp;<a href="#cg-significant-new-2">8.1 Significant changes in Common Graphics</a><br>&nbsp;&nbsp;&nbsp;<a href="#cg-non-back-2">8.2 Non-backward-compatible changes in Common Graphics</a><br>&nbsp;&nbsp;&nbsp;<a href="#cg-other-2">8.3 Other changes in Common Graphics</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#cg-bug-fixes-3">8.3.1 Miscellaneous bug fixes in Common Graphics</a><br>&nbsp;&nbsp;&nbsp;<a href="#ide-release-notes-2">8.4 IDE release notes</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#ide-bug-fixes-3">8.4.1 Miscellaneous bug fixes in the IDE</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#opening-earlier-projects-3">8.4.2 Opening projects from releases prior to 10.1</a><br>&nbsp;&nbsp;&nbsp;<a href="#mac-ide-2">8.5 Common Graphics and the IDE on the Mac</a><br>&nbsp;&nbsp;&nbsp;<a href="#cg-win-gtk-2">8.6 Functionality to handle differences between Windows and GTK</a><br>&nbsp;&nbsp;&nbsp;<a href="#win-pack-2">8.7 Release notes for the winapi module</a><br><a href="#aserve-1">9.0 Release notes for AllegroServe</a><br><a href="#eli-misc-1">10.0 Release notes for The Emacs/Lisp interface</a><br><a href="#clx-1">11.0 Availability of CLX for Allegro CL</a><br><a href="#orblink-1">12.0 Release notes for Orblink</a><br><a href="#app-conformance-proj">Appendix A. ANSI Conformance in Allegro CL</a><br><hr><hr><h2 id="4"><a name="relnotes-intro-1">1.0 Introduction</a></h2>
  

<p id="5">
This document provides the release notes for
release 10.1
of Allegro Common Lisp and related products. Many sections are divided
into non-backward-compatible changes (that produce different behavior
in release 10.1 compared to 
release
10.0) 
and changes
unrelated to backward-compatibility. Note that a bug fix is <i>not</i>
considered a backward-incompatible change even if it does result in
changed behavior because the previous behavior was erroneous.
</p>




<p id="6">
You may wish to look at the 10.0 Release Notes, included in
this distribution as the file
<a href="version-100-release-notes.htm">version-100-release-notes.htm</a>.
</p>

<p id="7">
This document describes the changes, major and minor,
from 10.0
to 10.1. Please look particularly at these
sections:
</p>

<ul>

<li id="8">
<a href="#acl-new">Section 6.1 New features in the base Lisp</a>: this section describes new
features.
</li>
<li id="9">
<a href="#acl-non-back-2">Section 6.2 Non-backward-compatible changes in the base Lisp</a>: this very important
section describes changes to Allegro CL which are <b>not</b> backward
compatible. You may have to modify your source code in light of these
changes.
</li>
<li id="10">

<a href="#cg-non-back-2">Section 8.2 Non-backward-compatible changes in Common Graphics</a>: [Common Graphics is not
available on all platforms] this section describes changes to Common
Graphics which are <b>not</b> backward compatible. You may have to
modify your source code in light of these changes.

</li>






<li id="11">
<a href="#post101-info-1">Section 2.0 Information on changes and new stuff since the 10.1 release</a>: this section describes
material added after the initial Allegro CL 10.1 release, along with
other post-10.1 changes. 
</li>


</ul>

<p id="12">
If you notice changed or unexpected behavior with an operator,
variable, class, or facility, search for its name in this document to
see whether there is an entry concerning it.
</p>

<hr><hr><h2 id="13"><a name="post101-info-1">2.0 Information on changes and new stuff since the 10.1 release</a></h2>

<p id="14">
The following changes have been implemented by patches and/or updates
since the initial release of Allegro CL 10.1. See <a href="operators/system/update-allegro.htm"><b>sys:update-allegro</b></a> for
information on getting patches and updates.
</p>
<p id="15">
This section is included in the versions 10.0 and 9.0 updated release
notes because some updates are retrofitted to those earlier
releases. Each change says whether it applies to releases prior to
version 10.1.
</p>

<ol>
<li id="16">
<b>New Support for Websockets</b>. A new module which implements the
websocket protocol specified in
<a href="https://tools.ietf.org/html/rfc6455">RFC 6455</a> has been
made available as a patch to 10.1 and 10.0. It is described in the section
<a href="miscellaneous.htm#web-sock-1">Websocket
API</a> in <a href="miscellaneous.htm">miscellaneous.htm</a>. <b>This
applies to Allegro CL 10.0 and 10.1</b>.
</li>
<li id="17">
<b>Installing 32-bit Allegro CL on Fedora Linux 25 and later requires
extra installation steps</b>. See
<a href="installation.htm#fedora32-fix-2">Getting 32-bit
Allegro CL to run on 64-bit Fedora 25 and later</a>
in <a href="installation.htm">installation.htm</a> for more information. <b>This
applies to Allegro CL 9.0, 10.0, and 10.1</b>.
</li>
<li id="18">
<b>New macro mp:do-periodically.</b> The new macro <a href="operators/mp/do-periodically.htm"><b>mp:do-periodically</b></a> alternates executing a body
of code with sleeping a specified amount of time, all within a
non-returning loop (you can break out of the loop by calling
<a href="../ansicl/dictentr/return.htm"><b>return</b></a>). While coding
such a loop is easy, a hand-coded one may cons excessively
while <a href="operators/mp/do-periodically.htm"><b>mp:do-periodically</b></a> is
tailored to cons hardly at all. See the description
of <a href="operators/mp/do-periodically.htm"><b>mp:do-periodically</b></a> for more
information. <b>This change applies to releases 9.0, 10.0 and 10.1.</b>
</li>
<li id="19">
<b>New :utf-8s strict external format.</b> When this external format
is in effect, non-UTF8 characters will be filtered out, replaced by a
designated error character. Optionally, a warning or error may be
signaled when an improper character or character sequence or
associated improper octets are
encountered. See <a href="iacl.htm#strict-efs-3">Strict
external formats which do not allow improper characters</a>
in <a href="iacl.htm">iacl.htm</a> for more information. New functionality
associated with the <code>:utf-8s</code> external format is
described there. <b>This change applies to releases 10.0 and 10.1
but <i>not</i> to release 9.0.</b>
</li>
</ol>

<hr><hr><h2 id="20"><a name="fasl-incompat-1">3.0 Fasl files are not-compatible between versions and operating systems</a></h2>













<hr><h2 id="21"><a name="version-fasl-incompat-2">3.1 All pre-10.1 Lisp compiled files must be recompiled (old fasl files will not load)</a></h2>

<p id="22">
<i>fasl</i> files (compiled Lisp files) created by
releases of Allegro CL prior to 10.1 will not load
into Allegro CL 10.1. All such files must be
recreated by compiling the associated Lisp source files. An error will
be signaled if Lisp attempts to load an older, incompatible
<i>fasl</i> file.
</p>





<hr><h2 id="23"><a name="os-fasl-incompat-2">3.2 Fasl files may be incompatible in different Lisps on same hardware</a></h2>

<h3 id="24">
Fasl files created on Windows x86 cannot be loaded into Linux or
FreeBSD x86 Lisps
</h3>

<p id="25">
The Windows and UNIX operating systems are too different. However,
FASL files (for the same Lisp version) can generally be shared between
different UNIX operating systems on the same hardware. The general
principles are as follows. Note that incompatibility may creep in for
reasons outside our control. If fasl files are incompatible, recompile
on the target machine.
</p>
<h3 id="26">
Fasl files will usually be compatible between platforms when:
</h3>
<ul>
<li id="27">
the architecture (hardware) is the same
</li>
<li id="28">
the calling convention is the same (that is, the method of calling
functions and the registers they use for arguments are the same)
</li>
<li id="29">
the method for generating signals can be made compatible (this cannot
be done for Windows and UNIX, so they are incompatible for this
reason)
</li>
</ul>
<p id="30">
It is up to the user to ensure that there are no os-specific
dependencies, or that features (i.e. #+/#- ) did not cause
essential code to be excluded or extraneous code introduced
that would cause a problem on the crossed architecture.
</p>



<hr><hr><h2 id="31"><a name="install-1">4.0 Release Notes for installation</a></h2>

<ol>
<li id="32">




<b>Version 10.1 uses the 10.0 installation
procedure</b>:
Installation is described in
<a href="installation.htm">installation.htm</a>. 


</li>
<li id="33">
<b>The distribution includes 8 bit and 16 bit character images</b>
(this information is repeated from earlier Release Notes). Allegro CL
has images that support 8 bit characters only, or 16 bit
characters only. It is our expectation that most users will use the 16
bit images. Executables supplied with the distribution either have or
do not have `8' in the name. Those with 8 in the name (mlisp8 and
alisp8, e.g.) support 8 bit characters. Those without a number in the
name support 16 bit characters. Image (dxl) files also come in 8 and
16 varieties. Again, 8 in the name means 8 bit character
support. Character support for images and executables must
match. Trying to start an executable with the wrong type of image
fails.
</li>

<li id="34">
<b>No prebuilt Allegro Composer images in the distribution</b> 
(this information is repeated from earlier Release Notes). To
create an Allegro Composer image, start Allegro CL and load
<em>buildcomposer.cl</em>. That will produce <em>composer</em> and
<em>composer.dxl</em>, or <em>composer8</em> and
<em>composer8.dxl</em>. Allegro Composer is available on Unix only.
</li>

<li id="35">
<b>No prebuilt Allegro CLIM images in the distribution</b> (this
information is repeated from earlier Release Notes). To create a CLIM
image, start Allegro CL and load <em>buildclim.cl</em>. That will
produce <em>clim</em> and <em>clim.dxl</em>, or <em>clim8</em> and
<em>clim8.dxl</em>.
</li>

</ol>


<hr><hr><h2 id="36"><a name="platform-specific-1">5.0 Release notes for specific platforms</a></h2>


<p id="37">
See <a href="installation.htm#install-sizes-2">Installation sizes and supported Operating
System versions</a> in <a href="installation.htm">installation.htm</a> for a list
of supported platforms and minimal Operating System versions.  Allegro
CL is tested with new OS versions as they are released (but not
pre-release or beta versions). In general, Allegro CL can be assumed
to work on newer versions, including those released after Allegro CL
10.1 itself was released.
</p>

<hr><h2 id="38"><a name="openssl-version-2">5.1 Required versions of OpenSSL needed for the :ssl module</a></h2>

<p id="39">
The :ssl module, when loaded, finds the newest installed version of
OpenSSL libraries on your machine and loads
them. See <a href="socket.htm#ssl-1">Secure Socket Layer
(SSL)</a> in <a href="socket.htm">socket.htm</a> for information on
how OpenSSL libraries are found and loaded.
</p>
<p id="40">
If you load foreign libraries which themselves use OpenSSL, either in
a development image or in a delivery (application) image, those
libraries must be compatible with the version of OpenSSL used by the
:ssl module. If they are not, the :ssl module cannot be used.
</p>
<p id="41">
The current supported version of OpenSSL is 1.0.1. We understand there
are plans to end support for version 1.0.1 on December 31, 2016. By
that time, support for version 1.0.2 will be available.
</p>




<hr><h2 id="42"><a name="arm-2">5.2 The ARM-64 (aka ARMv8 and Aarch64) platform</a></h2>

<p id="43">
Allegro CL is now available on the ARM-64 platform under some linux
implementations. The ARM-64 is also called the ARM64, the ARMv8, and
the Aarch64
</p>
<p id="44">
The ARM-64 processor
(see the Wikipedia
description <a href="https://en.wikipedia.org/wiki/ARM_architecture">here</a>
and the designer
website <a href="http://www.arm.com/products/processors">here</a>) is
a RISC processor particularly suited to smaller devices.
</p>
<p id="45">
Only 64-bit Allegro CL runs on the ARM-64, with SMP and non-SMP
versions (there is no 32-bit Lisp on the ARM-64). Common Graphics and
the IDE (see <a href="cgide.htm">cgide.htm</a>) are supported in the
non-SMP ARM-64 version.
</p>
<p id="46">
Installation on the ARM-64 is similar to installation on other Linux
platforms. See <a href="installation.htm">installation.htm</a>. See
the <a href="installation.htm#install-sizes-2">Installation sizes and supported Operating
System versions</a> in that document for information on minimal
operating system versions needed by Allegro CL.
</p>




<hr><h2 id="47"><a name="macosx-2">5.3 macOS notes</a></h2>


<p id="48">
Allegro CL 10.1 is only supported on macOS version 10.11 or later.
It is not supported on versions 10.10 or
earlier.
</p>
<p id="49">
Common Graphics and the IDE are now supported on macOS but are not
supported on the SMP version on the Mac.
See <a href="#mac-ide-2">Section 8.5 Common Graphics and the IDE on the Mac</a> for more
information. Both the IDE and CLIM require certain tools (X11, GTK,
Open Motif) which may have to be installed
separately. See <a href="installation.htm#macosx-install-1">Installation on macOS</a>
in <a href="installation.htm">installation.htm</a> for details.
</p>


<p id="50">
The Runtime Analyzer (see <a href="runtime-analyzer.htm">runtime-analyzer.htm</a>)
does not work properly on the 64-bit macOS port (there is no
problem on the 32-bit port).
</p>



<h4 id="51">Building shared libraries on macOS</h4>
<p id="52">
<a href="foreign-functions.htm#ff-on-macosx-1">Building
shared libraries on macOS</a> in
<a href="foreign-functions.htm">foreign-functions.htm</a> describes how to create a
shared library suitable for loading into Allegro CL. We have
determined that the <code>-flat_namespace</code> to the
<b>ld</b> used to create the shared library is necessary, as shown in
the linked section.
</p>



<hr><h2 id="53"><a name="maverick-x11-2">5.3.1 Updating macOS may break X11</a></h2>

<p id="54">
We have had reports that updating macOS may cause X11 to be stop
working properly. The symptom is blank rectangles in Common Graphics
applications (including Gruff). X11 is necessary for the IDE, CLIM,
and Allegro Composer. To fix the problem, install the latest version
of <a href="http://xquartz.macosforge.org/landing/">XQuartz</a>
(available
from <a href="http://xquartz.macosforge.org/landing/">http://xquartz.macosforge.org/landing/</a>) <b>after</b>
updating the macOS.
</p>










<hr><h2 id="55"><a name="heap-start-2">5.4 Heap start locations</a></h2>


<p id="56">
When building large new images, it is often useful to specify Lisp
heap and ACLmalloc heap start locations. See the discussion of the
<i>lisp-heap-start</i> and
<i>aclmalloc-heap-start</i> keyword arguments in <a href="building-images.htm#arguments-without-inherited-defaults-1">Arguments to
build-lisp-image 2: defaults not inherited from the running
image</a> in <a href="building-images.htm">building-images.htm</a>. Here are
the initial locations (called `bases') in Allegro CL 10.1 as delivered.
Values are Hexadecimal integers.
</p>
<table BORDER="1" CELLSPACING="1" CELLPADDING="2" WIDTH="90%">
  <tr>
    <td WIDTH="30%" VALIGN="TOP"><strong>Operating System</strong></td>
    <td WIDTH="35%" VALIGN="TOP"><strong>Lisp base</strong></td>
    <td WIDTH="35%" VALIGN="TOP"><strong>C base</strong></td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">ARM 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x6000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">ARM 64-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x6000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">FreeBSD 32-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x40000000</td>
    <td WIDTH="35%" VALIGN="TOP">#xa0000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">FreeBSD 64-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x10000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Linux (x86) 32-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x20000000</td>
    <td WIDTH="35%" VALIGN="TOP">#xa0000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Linux (x86) 32-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x20000000</td>
    <td WIDTH="35%" VALIGN="TOP">#xa0000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Linux (AMD64) 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x10000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Linux (AMD64) 64-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x10000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">macOS 32-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x20000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x74000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">macOS 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">macOS 64-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Windows 32-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x20000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x54000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Windows 32-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x20000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x54000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Windows 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x200000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x8000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Windows 64-bit SMP</td>
    <td WIDTH="35%" VALIGN="TOP">#x200000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x8000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Solaris 32-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x4000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x54000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Solaris 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
  <tr>
    <td WIDTH="30%" VALIGN="TOP">Solaris (AMD64) 64-bit</td>
    <td WIDTH="35%" VALIGN="TOP">#x1000000000</td>
    <td WIDTH="35%" VALIGN="TOP">#x80000000000</td>
  </tr>
</table>












<hr><hr><h2 id="57"><a name="acl-1">6.0 Release Notes for the base Lisp</a></h2>

<p id="58">
This main section contains three subsections (which have additional
subsections): one on new features
(<a href="#acl-new">Section 6.1 New features in the base Lisp</a>), one on changes which are not
backwards compatible and so may require code changes,
(<a href="#acl-non-back-2">Section 6.2 Non-backward-compatible changes in the base Lisp</a>), and one on
miscellaneous changes (<a href="#acl-other-2">Section 6.3 Other changes to and notes about the base Lisp</a>).
</p>


<hr><h2 id="59"><a name="acl-new">6.1 New features in the base Lisp</a></h2>

<p id="60">
Version 10.1 is a maintenance release of Allegro CL. It contains bug
fixes and optimizations and other improvements but does not have major
new capabilities.
</p>

<h3 id="61">
Major changes
</h3>
<p id="62">
There is now support for the ARM
processor. See <a href="#arm-2">Section 5.2 The ARM-64 (aka ARMv8 and Aarch64) platform</a> for more
information.
</p>

<h3 id="63">
Other new features
</h3>

<ol>
<li id="64">
<b>Improved support for UTF-16 characters</b>. A number of functions
associated with UTF-16 characters have been
added. See <a href="iacl.htm#api-1">Appendix 1: Operators,
Symbols, Variables Documentation</a>
in <a href="iacl.htm">iacl.htm</a> for links to the new functionality.
</li>
<li id="65">
<b>Support for the GB18030 external-format</b>. See the list of
external formats and the table notes in the
section <a href="iacl.htm#basic-ef-types-3">Basic
External-Format Types</a> in <a href="iacl.htm">iacl.htm</a> for
more information.
</li>
</ol>


<hr><h2 id="66"><a name="acl-added-in-100">6.1.1 Features added to Allegro CL 10.0 after the initial release of Allegro CL 10.0</a></h2>

<p id="67">
The following items were included by patches in Allegro CL 10.0 (and
some in earlier releases of Allegro CL) after the release of 10.0 and
therefore were not in the original 10.0 documentation. All are part of
10.1 and the 10.1 documentation. Some changes to 10.1 may also be
backported to 10.0 and/or 9.0, and thus added to the release notes for
those products, but those changes are documented in other sections of
this document.
</p>


<ol>
<li id="68">
<b>sys:lispval-storage-type has new :stack-allocated
type</b>. Objects which reside on the stack are identified
as <code>:stack-allocated</code> by
<a href="operators/system/lispval-storage-type.htm"><b>sys:lispval-storage-type</b></a>.
Note that on a non-os-threads Lisp the value may be seen
as <code>:stack-allocated</code> even if it is outside of the
stack it resides and should have been
called <code>:static</code>.
</li>
<li id="69">
<b>OpenSSL libraries must be installed in order to use OpenSSL in
socket communication</b>. Except on Windows, prior to a patch released
in June, 2016, Allegro CL included the necessary OpenSSL libraries
with its SSL module. This meant that users did not have to obtain
those libraries themselves but it also meant that users could not use
the latest OpenSSL version until the Allegro CL module was
updated. (Note that not all Allegro CL versions support SSL.) With the
patch released in June, 2016, this has changed. OpenSSL libraries
must be installed on all platforms. These will be linked to when the
Allegro CL SSL module is loaded. An error will be signaled if the
needed OpenSSL library files cannot be
found. See <a href="socket.htm#ssl-1">Secure Socket Layer
(SSL)</a> in <a href="socket.htm">socket.htm</a> for more infrmation
on the new scheme. Note that some operating systems include OpenSSL
libraries with their standard OS updates. On those platforms (which
include the Mac and some versions of Linux), Allegro CL users will
likely have to take no action: the OpenSSL libraries will be found in
the standard location for the platform. Also, as said above, there is
no change in Windows, where users have always downloaded the OpenSSL
library files, other than the change to the API described
in <a href="socket.htm#ssl-1">Secure Socket Layer
(SSL)</a> in <a href="socket.htm">socket.htm</a>.
</li>
<li id="70">
<b>Some compiler switches obsolete</b>. The compiler
switches <a href="variables/compiler/peephole-optimize-switch.htm"><code>comp:peephole-optimize-switch</code></a>,
and <a href="variables/compiler/save-arglist-switch.htm"><code>comp:save-arglist-switch</code></a>
are no longer used. The variables still exist and can be set (so
existing code will not beak) but the values are ignored. Peephole
optimizations are now always done during compilation and arguments are
always saved. It was determined that any possible savings were too
small to be worth doing. This change was made in the initial 9.0
release but was not properly documented.
</li>
<li id="71">
<b>New types keyword argument to dbi:run-prepared-sql</b>. This new
argument to <a href="operators/dbi/run-prepared-sql.htm"><b>dbi:run-prepared-sql</b></a> allows specifying
the return type.
</li>
<li id="72">
<b>New EC2 implementation</b>: an updated interface to the Amazon
Elastic Compute Cloud (EC2) has been released in a patch dated
November 4, 2014. The API version support is moved to version 2014-09-01.
See <a href="ec2.htm">ec2.htm</a> for further information.
</li>
<li id="73">
<b>A new for-as-in-sequence subclause for the loop
macro</b>. The <a href="../ansicl/dictentr/loop.htm"><b>loop</b></a>
macro now supports a <code>for-as-in-sequence</code> subclause
which iterates over a list or a simple, general vector. Existing
(standard) subclauses include <code>for-as-in-list</code> and
<code>for-as-across</code> (for vector) and this new subclause
combines them, as so allows the sequence operated on to be a list or a
simple vector at runtime. See <a href="implementation.htm#cl-loop-2">cl:loop and the for-as-in-sequence subclause for looping over sequences</a>
in <a href="implementation.htm">implementation.htm</a>. This new subclause was added
in a patch in May, 2014.
</li>
<li id="74">
<b>New universal date parser</b>. New functions
<a href="operators/excl/string-to-universal-time.htm"><b>string-to-universal-time</b></a> and
<a href="operators/excl/universal-time-to-string.htm"><b>universal-time-to-string</b></a>
convert strings denoting times in various standard formats to
universal times and universal times to strings in various
formats. Converting durations to strings is also supported. This is
not part of the date-time module described
in <a href="date-time.htm">date-time.htm</a> but since the functionality is
related, the <a href="date-time.htm#ut-parser-1">General
date to universal time parsers</a> section in that document
describes the new facility. These functions were added in a patch
released in May, 2014.
</li>
<li id="75">
<b>jLinker update</b>: a patch released in April, 2014 made a number
of changes to the jLinker module. There are now several calling
models, including a new calling style where Lisp functions are
generated by analyzing Java jar files or classes.  The names of the
Lisp functions are systematically derived from the Java names and
mimic the overloading style used in Java; in most cases, the Lisp name
is easily deduced from the Java name so that perusing a translation
table is rarely needed.  The correct Java method to call is determined
at run time by comparing the Lisp argument types to Java
signatures. See <a href="jlinker.htm#calling-style-2">Calling Style from Lisp to Java</a>
in <a href="jlinker.htm">jlinker.htm</a>.
</li>
<li id="76">
<b>Major update to SSL socket module</b>. (This change is not related
to the Heartbleed problem described in the next item.) The interface
to SSL sockets has been upgraded. SSL contexts, re-usable objects
which contain configuration values for SSL server and client streams,
are now supported. Contexts are created with 
<a href="operators/socket/make-ssl-server-context.htm"><b>make-ssl-server-context</b></a> and
<a href="operators/socket/make-ssl-client-context.htm"><b>make-ssl-client-context</b></a>. <a href="operators/socket/make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a> and
<a href="operators/socket/make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a>
now have <i>context</i> keyword arguments which take an
SSL context as a value. Also, the default value for
the <i>method</i> argument to <a href="operators/socket/make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a> and
<a href="operators/socket/make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a>
is <code>:tlsv1+</code>. These modifications were added in a patch
released in April, 2014.
</li>
<li id="77">
<b>Fix for OpenSSL Heartbleed bug available</b>. The OpenSSL
Heartbleed bug
(see <a href="https://www.openssl.org/news/secadv_20140407.txt">https://www.openssl.org/news/secadv_20140407.txt</a>)
requires new library files and application rebuilds. See
the <a href="http://franz.com/support/tech_corner/heartbleed040914.lhtml">Tech
Corner Article</a> at
<a href="http://franz.com/support/tech_corner/heartbleed040914.lhtml">http://franz.com/support/tech_corner/heartbleed040914.lhtml</a> for
instructions. Users are <b>strongly</b> recommended to apply this fix.
</li>
<li id="78">
<b>The list value of *global-gc-behavior* should not be used in an SMP
Lisp.</b> The variable <a href="variables/excl/s_global-gc-behavior_s.htm"><code>*global-gc-behavior*</code></a> controls when and how
often global garbage collections happen. On possible value for this
variable is a list of a positive integer (specifying a number of
seconds), and a real greater than or equal to 1.0 (and optionally a
boolean specifying verbosity). This value is designed to trigger
global gc's after a specified amount of idle time. But idle time is
ill-defined in an SMP Lisp. The list value for <a href="variables/excl/s_global-gc-behavior_s.htm"><code>*global-gc-behavior*</code></a> uses <a href="operators/system/funcall-after-idle-timeout.htm"><b>sys:funcall-after-idle-timeout</b></a>, which, as
the next item notes, should not be used in SMP Lisps.
</li>
<li id="79">
<b>sys:funcall-after-idle-timeout should not be used in an SMP
Lisp.</b> In an SMP Lisp, idle time is ill-defined. The function 
<a href="operators/system/funcall-after-idle-timeout.htm"><b>sys:funcall-after-idle-timeout</b></a>, which calls
a function after a specified idle time, should not be used.
</li>
<li id="80">
<b>Documentation for load-compiled corrected</b>. The function
<a href="operators/excl/load-compiled.htm"><b>load-compiled</b></a>, when first
implemented, compiled a file but did not write a fasl file. That was
changed some time ago so <a href="operators/excl/load-compiled.htm"><b>load-compiled</b></a> is a roughly equivalent to
the <a href="tpl-commands/cload.htm"><b>:cload</b></a> top-level command
(compiling and loading file). The documentation has been corrected.
</li>
<li id="81">
<b>Enhancement to net.post-office:send-letter</b>. The first argument
to <a href="operators/post-office/send-letter.htm"><b>net.post-office:send-letter</b></a>, the
server specification, can now specify an alternate transport
mechanism, instead of the usual SMTP network
protocol. See <a href="operators/post-office/send-letter.htm"><b>net.post-office:send-letter</b></a> for
details. The patch implementing this cahange was released in early
November, 2013.
</li>
<li id="82">
<b>Some MySQL changes.</b> A
new <b><i>client-flags</i></b> keyword argument
to <a href="operators/mysql/connect.htm"><b>connect</b></a> was added to
8.2 in a patch but was not documented in either the 8.2 or 9.0
documentation until now. A patch released in early August, 2013,
modified the behavior of the <b><i>host</i></b> keyword
argument to <a href="operators/mysql/connect.htm"><b>connect</b></a>,
which can now be a list. <a href="operators/mysql/insert-db.htm"><b>insert-db</b></a> now has
an <i>on-dup-keys</i> keyword argument improves handling
when the insert tries to insert a row with the same values in key
columns as an existing row. Also, some support for stored procedures
has been added. See
<a href="mysql.htm#mysql-stored-proc-1">MySQL and stored procedures</a> in <a href="mysql.htm">mysql.htm</a>.
</li>
<li id="83">
<b>A patch released in late Jult, 2013 implements a major jLinker
upgrade.</b> A major patch release of jlinker (version 7.1) adds
several new features.  The patch consists of Lisp code in a new fasl
file and Java code in a new jar file. New features include connection
pooling, better socket handling, and improved error hierarchy. A
number of functions have been modified, but all modifications are
backward compatible. See <a href="jlinker.htm">jlinker.htm</a> for a complete
discussion of the patch. The patch is for version 9.0 only. It does
not apply to earlier releases.
</li>
<li id="84">
<b>New regexp patch fixes some replace-re behavior and enhances
match-re.</b> A bug in <a href="operators/excl/replace-re.htm"><b>replace-re</b></a> caused handling of BOS and EOS
markers incorrectly. So <code>(replace-re "abc abc bc" "^abc\\s+"
"_")</code> would return "__bc" rather than "_abc
bc". Also, <code>(replace-re "abc def " "def$" "_" :end
7)</code> would return "abc _ " rather than "abc def ". This has
been fixed and the correct values are now returned. As part of the
change, <a href="operators/excl/match-re.htm"><b>match-re</b></a> has
additional keyword arguments <i>start-unbounded</i> and
<i>end-unbounded</i>. The behavior of <a href="operators/excl/match-re.htm"><b>match-re</b></a> is unchanged if the new arguments are
not specified.
</li>
<li id="85">
<b>Better control over proxies in Aserve.</b> If you allow proxies in
AllegroServe, you may open a security hole. Proxies, which before were
general, can now be restruicted to specific machines using the new
proxy-control object, if
desired. See <a href="aserve/aserve.html#proxy">the Proxy section</a>
of the <a href="aserve/aserve.html">the AllegroServe documentation</a>
for details.
</li>
<li id="86">
<b>The profiler may now be included in runtime images (except those
created by Allegro Express).</b>
</li>
<li id="87">
<b>New jlinker-init keyword argument: :end-function</b>.  The value of
the <i>end-function</i> keyword argument
to <a href="operators/jlinker/jlinker-init.htm"><b>jlinker-init</b></a> should be
a function called when a jlinker connection is terminated.  The
function gets a single argument, the jlinker connection
instance. Added by a pacth released May 1, 2013.
</li>
<li id="88">
<b>All nicknames removed for the excl package</b>. This was done when
9.0 was released but we neglected to document it. The nicknames
were <code>excl</code>, <code>franz</code>,
and <code>stream</code>. In fact, it is illegal for a package
nickname to be the package name (so excl was removed). The other two
names (which were added when the symbols in those packages were merged
into the excl package) were removed so that they would not appear as
qualifiers to excl symbols when <a href="variables/excl/s_print-nickname_s.htm"><code>excl:*print-nickname*</code></a> is true. <b>This is a
backward incompatible change</b>. Users who depend on stream or franz
as nicknames can add them back using <a href="../ansicl/dictentr/rename-p.htm"><b>rename-package</b></a> if desired. This item is
repeated below in <a href="#acl-non-back-2">Section 6.2 Non-backward-compatible changes in the base Lisp</a>.
</li>
<li id="89">
<b>regexp patch fixes some bugs, changes split-re behavior. WARNING:
some changes result in changed behavior (nil might be returned instead
of (""); some forms no longer signal errors).</b>. A patch released in
February, 2013 fixes some regexp bugs and changes the behavior
of <a href="operators/excl/split-re.htm"><b>split-re</b></a> to match PERL
behavior. <a href="operators/excl/split-re.htm"><b>split-re</b></a> now has a
limit keyword argument; it not longer errors when
the <i>regexp</i> argument matches the empty string; and
trailing empty fields are removed. See <a href="regexp.htm">regexp.htm</a>
and also the description of <a href="operators/excl/split-re.htm"><b>split-re</b></a>, where we have examples of the
changes.
</li>
<li id="90">
<b>New ability to dump virtual images on Windows.</b>
See <a href="dumplisp.htm#pseudo-fork-1">Virtual dumplisp:
for very large images and pseudo-forks on Windows</a>
</li>
<li id="91">
We have revised the <a href="regexp.htm">regexp.htm</a> and have removed the
discussion of the older <b>regexp</b> module (which is still
maintained for backward compatibility, and individual functions are
still documented in the operators pages)). All new code should use the
regexp2 module described in <a href="regexp.htm">regexp.htm</a>.
</li>
<li id="92">
<b>text-line does not work on file streams</b>. The
<a href="operators/cg/t/text-line.htm"><b>common-graphics:text-line</b></a> function only
works on <a href="classes/cg/text-edit-pane.htm"><code>text-edit-pane</code></a>s and
<a href="classes/cg/multi-line-editable-text.htm"><code>multi-line-editable-text</code></a> widgets. It
does not work on file streams. The documentation has been updated to
make that clear.
</li>
</ol>






<hr><h2 id="93"><a name="acl-non-back-2">6.2 Non-backward-compatible changes in the base Lisp</a></h2>

<p id="94">
The following changes result in different behavior in Lisp compared to
earlier releases.
</p>

<ol>

<li id="95">
<b>build-lisp-image arguments :c-heap-start and :c-heap-size are no
longer supported.</b> These arguments to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a> and
<a href="operators/excl/generate-application.htm"><b>generate-application</b></a> were
replaced some time ago
with <b><i>aclmalloc-heap-start</i></b> and
<b><i>acl-malloc-heap-size</i></b> but were still
accepted (with a warning) for several releases. They have now been
removed and should not be
used. Use <a href="building-images.htm#aclmalloc-heap-start">:acl-malloc-heap-start</a>
and <a href="building-images.htm#aclmalloc-heap-size">:acl-malloc-heap-size</a> instead.
</li>
<li id="96">
<b>The macro excl:atomic-read-modify-write no longer
supported</b>. The macro was never documented and has now been
removed.
</li>
<li id="97">
<b>sys:resize-areas warns when :old argument is unspecified.</b>
<a href="operators/system/resize-areas.htm"><b>sys:resize-areas</b></a> will
signal a warning when no value is given for
the <b><i>old</i></b> keyword
argument. <b><i>old</i></b> defaults to 0, meaning there
will be as little free space as possible in the old area after the
function returns. That is rarely what is desired. If that is what you
want, specify a value of 0 to avoid the warning.
</li>
<li id="98">
<b>:redhat10 is no longer on *features* on Linux versions.</b>
</li>
</ol>





<hr><h2 id="99"><a name="acl-other-2">6.3 Other changes to and notes about the base Lisp</a></h2>

<p id="100">
Listed are other changes to and notes about Allegro CL.
</p>

<ol>
<li id="101">
<b>vcredist_*.exe executables copied to application directory on Windows</b>.
Allegro CL applications on Windows may need to run
<b>vcredist_x86.exe</b> or <b>vcredist_x64.exe</b> during
installation in order to work properly. The <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> program now copies the
appropriate one of these files to the application's destination
directory. See the <a href="delivery.htm#windows-specific-2">Windows specific information</a> section
in <a href="delivery.htm">delivery.htm</a> for more information.
</li>
<li id="102">
<b>New function nice-signal-name</b>. <a href="operators/excl/nice-signal-name.htm"><b>nice-signal-name</b></a> takes a signal number (an
integer) as its argument and returns a string which is a meaningful
and easy to interpret description of the associated
signal. <code>nil</code> is returned when the signal
number is unknown. The function <a href="os-interface.htm#strsignal-op-bookmarkxx"><b>strsignal</b></a> (which is the name of
the UNIX library function that does the same thing) is a synonym
of <a href="operators/excl/nice-signal-name.htm"><b>nice-signal-name</b></a>. Both
work on all platforms. This function is available with a patch in
Allegro CL 10.0.
</li>
<li id="103">
<b>New variable *script-name*</b>. The
variable <a href="variables/excl/s_script-name_s.htm"><code>*script-name*</code></a> is bound to the name of
the script file being run when Allegro CL is being executed by a UNIX
script file. See <a href="startup.htm#starting-unix-script-3">Starting on UNIX using a shell
script</a> in <a href="startup.htm">startup.htm</a> for more
information on running Lisp using a script on Unix.
</li>
<li id="104">
<b>On Windows, starting Allegro CL causes the PATH environment
variable to include the Allegro CL directory</b>. PATH is modified
because loading DLLs on Windows from the directory in which the
Allegro CL executable otherwise will not
work. See <a href="startup.htm#start-up-description-1">What
Lisp does when it starts up</a> in <a href="startup.htm">startup.htm</a>
for information on the startup sequence.
</li>
<li id="105">
<b>sys:with-command-line-arguments does nothing when the
:command-line-arguments argument is specified nil</b>. When the
<code>:command-line-arguments</code> argument to
<a href="operators/system/with-command-line-arguments.htm"><b>sys:with-command-line-arguments</b></a> is
unspecified, its value is replaced with the actual command-line
arguments used to start Lisp. If, however, its value is
specified <code>nil</code>, it is assumed you want
the <a href="operators/system/with-command-line-arguments.htm"><b>sys:with-command-line-arguments</b></a> form to do
nothing, and that is what now happens.
</li>
<li id="106">
<b>New variable *unicode-version*</b>. The
variable <a href="variables/excl/s_unicode-version_s.htm"><code>*unicode-version*</code></a> is bound to a string
containing the version number for the Unicode Character Database used
to build the Allegro CL character name table and collation rules.
</li>
<li id="107">
<b>script keyword argument to compile-file allows compilation of UNIX
scripts</b>. <a href="../ansicl/dictentr/compile-.htm"><b>compile-file</b></a> (whose implementation in
Allegro CL is described
<a href="compiling.htm#compile-file-1">here</a>) has
an additional <b><i>script</i></b> keyword argument
which, when true (the default) allows the initial lines which start
with <code>#!</code> to be ignored by the compiler, so that Lisp
code after those initial lines can be
compiled. See <a href="compiling.htm#compile-file-1">compile-file</a>
in <a href="compiling.htm">compiling.htm</a> for more information.
</li>
<li id="108">
<b>print-type-counts prints information about open and closed old
areas.</b> <a href="operators/excl/print-type-counts.htm"><b>print-type-counts</b></a> prints information
about Lisp objects in the heap. It has always printed information
about old areas. Now information about just open old areas and just
closed old areas (those that are and are not gc'ed during a global gc)
can be requested.
</li>
<li id="109">
<b>sniff-for-unicode has new return-bom keyword argument</b>. If
specified non-<code>nil</code>, <a href="operators/excl/sniff-for-unicode.htm"><b>sniff-for-unicode</b></a> returns a third value with
information on BOMs (Byte Order Markers) in the argument stream.
</li>
<li id="110">
<b>Unicode external formats handles
BOMs</b>. The <code>:unicode</code> external-format detects BOMS
for UTF-8 UTF-16BE and UTF-16LE. The <code>:unicode-be</code>
external-format is like <code>:unicode</code>, but input is
assumed big-endian if no BOM is
detected. The <code>:unicode-le</code> external-format is like
<code>:unicode</code>, but output is always little-endian with
BOM. See <a href="iacl.htm#unicode-and-fat-3">The unicode
and fat External-Format Types; the unicode BOM</a>
is <a href="iacl.htm">iacl.htm</a> for more information.
</li>
<li id="111">
<b>sys:lispval-storage-type has new :pure type and new function
sys:purep exists as a predicate.</b>. Objects which are stored in pure
space, and are thus read-only and shareable, will have this storage
type returned by
<a href="operators/system/lispval-storage-type.htm"><b>sys:lispval-storage-type</b></a>. See <a href="operators/excl/pll-file.htm"><b>pll-file</b></a> (and links from there) and
also <a href="gc.htm#getting-gc-info-2">Getting
information on memory management using cl:room</a>
in <a href="gc.htm">gc.htm</a> for more information on pure space.  The
new function <a href="operators/system/purep.htm"><b>sys:purep</b></a>
returns true when applied to objects which reside in pure space.
</li>
<li id="112">
<b>New generic function mp:process-sequence returns unique process
id.</b> The default method for the generic function <a href="operators/mp/process-sequence.htm"><b>mp:process-sequence</b></a> returns an integer
identifier unique to the argument process. This identifier can be used
in various places, in particular in many top-level commands that take
processes as arguments. This value is displayed in the output of the
<a href="tpl-commands/processes.htm"><b>:processes</b></a> top-level command.
</li>
<li id="113">
<b>Top-level commands dealing with processes can take a process
sequence number as arguments</b>. The new generic
function <a href="operators/mp/process-sequence.htm"><b>mp:process-sequence</b></a>
returns an integer identifier of a process. This value can be passed
as the process argument to top-level command
like <a href="tpl-commands/processes.htm"><b>:processes</b></a>, 
<a href="tpl-commands/focus.htm"><b>:focus</b></a>, 
<a href="tpl-commands/arrest.htm"><b>:arrest</b></a>, 
<a href="tpl-commands/unarrest.htm"><b>:unarrest</b></a>,
and <a href="tpl-commands/kill.htm"><b>:kill</b></a>. See
<a href="top-level.htm#process-comms-args-2">Argument
processing for :processes, :focus, :arrest, :unarrest and
:kill</a> in <a href="top-level.htm">top-level.htm</a> for more
information. 
</li>
<li id="114">
<b>Top-level commands dealing with processes have their argument
processing regularized</b>. The commands are
<a href="tpl-commands/processes.htm"><b>:processes</b></a>, 
<a href="tpl-commands/focus.htm"><b>:focus</b></a>, 
<a href="tpl-commands/arrest.htm"><b>:arrest</b></a>, 
<a href="tpl-commands/unarrest.htm"><b>:unarrest</b></a>,
and <a href="tpl-commands/kill.htm"><b>:kill</b></a>.
</li>
<li id="115">
<b>New on-error argument to map-over-directory</b>. <a href="operators/excl/map-over-directory.htm"><b>map-over-directory</b></a> now has
an <b><i>on-error</i></b> keyword argument which
specifies what it should do when it encounters an unreadable
directory. When this argument has its default
value, <code>:ignore</code>, the unreadable directory is skipped
without notice. The skipping without notice behavior is what was done
in earlier releases so the default behavior has not changed. When
<i>on-error</i> has any other value, calling programs
will see the errors that occur from accessing unreadable directories.
</li>
<li id="116">
<b>MOP class redefinitions and SMP</b>. An application that updates a
class definition while it is running should be designed to ensure that
none of the objects are accessed, even for generic-function dispatch,
until the redefinition is complete. A new <a href="smp.htm#smp-mop-2">section</a> in <a href="smp.htm">smp.htm</a> makes
this point.
</li>
<li id="117">
<b>New arguments to build-lisp-image: initial-oldspace and
initial-newspace</b>. Two new argument to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a> (actually described
in <a href="building-images.htm">building-images.htm</a>)
are <b>:initial-newspace</b> and <b>:initial-oldspace</b>. They
specify the sizes of newspace and oldspace when an image is first
created at the start of building a final
image. <i>initial-newspace</i> is rarely important and
is included for completeness and rare
cases. But <i>initial-oldspace</i> can be important. If
the final built image has too many oldspaces, global gc's can take
longer and compressing them (with <a href="operators/system/resize-areas.htm"><b>sys:resize-areas</b></a>) can be difficult. If you
notice that the final image has many oldspaces, try a larger value for
<i>initial-oldspace</i> to reduce that number. Like
other size arguments to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a>, these argument value can be
specified with environment variables, ACL_BUILD_INITIAL_NEWSPACE and
ACL_BUILD_INITIAL_OLDSPACE. If these environment variables have
values, they override values specified in the call
to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a>.
</li>
<li id="118">
<b>Sizes in build-lisp-image argument can be specified with strings
ending in #\g or #\G to indicate gigabytes.</b> Various arguments
which specify sizes in calls to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a> (actually described
in <a href="building-images.htm">building-images.htm</a>), such a
<code>:aclmalloc-heap-size</code>
and <code>:lisp-heap-start</code>, etc. #\k and #\m (and their
uppercase analogs) have been accepted for some time to mean kilobytes
and megabytes. See <a href="building-images.htm#table-note-3">Table Note 3: specifying starts and sizes
for heaps and old and new space</a>
in <a href="building-images.htm">building-images.htm</a> for more information.
</li>
<li id="119">
<b>:regexp2 added to modules loaded by develenv.cl and :regexp
removed</b>. <i>develenv.cl</i> is a file with <a href="../ansicl/dictentr/provider.htm"><b>require</b></a> statments for modules which are useful
to include in Allegro CL development and delivery images. See
<a href="runtime.htm#creating-runtime-apps-1">Creating a
runtime application</a> in <a href="runtime.htm">runtime.htm</a>. This
file used to include the <code>:regexp</code> module. That has
now been replaced with the <code>:regexp2</code> module. The
<code>:regexp2</code> module is described
in <a href="regexp.htm">regexp.htm</a>.
</li>
<li id="120">
<b>SIGPIPE signals are not handled</b>. See <a href="operators/excl/add-signal-handler.htm"><b>add-signal-handler</b></a> if you want a signal
handled.
</li>
<li id="121">
<b>Applications are built in application mode</b>. When an Allegro CL
application is built with <a href="operators/excl/generate-application.htm"><b>generate-application</b></a>, <a href="operators/excl/generate-executable.htm"><b>generate-executable</b></a>, or using the project
system in the IDE, the image will be built in <b>application
mode</b>. In this mode, certain variables have different initial
values and signal handling is different (particularly with respect to
messages reporting signals). See <a href="delivery.htm#application-mode-1">Application mode</a>
in <a href="delivery.htm">delivery.htm</a> for more information.
</li>
<li id="122">
<b>New multiprocessing macro with-locked-queue</b>. <a href="operators/mp/with-locked-queue.htm"><b>mp:with-locked-queue</b></a> macro has been added to
facilitate specializing <a href="operators/mp/enqueue.htm"><b>enqueue</b></a> and <a href="operators/mp/dequeue.htm"><b>dequeue</b></a> methods for subclasses
of <a href="classes/mp/queue.htm"><code>mp:queue</code></a>. (This macro
was also added as a patch to version 10.0.)
</li>
<li id="123">
<b>New function gcpath:find-gcpath and new macro
gcpath:collected-newstuff</b>.
<a href="gc.htm#find-gcpath-op-bookmarkxx"><b>gcpath:find-gcpath</b></a> and <a href="gc.htm#collected-newstuff-op-bookmarkxx"><b>gcpath:collected-newstuff</b></a>,
both documented in <a href="gc.htm">Functions for finding gc
paths and new objects</a> in <a href="gc.htm">gc.htm</a>, allow
for finding a path of object references that shows why an object is
not garbage and for determining what non-transient objects are created
by evaluating a form.
</li>
<li id="124">
<b>The special operator named-annotated-function documented</b>. The
special-operator <a href="operators/excl/named-function.htm"><b>named-function</b></a> was incorrectly labeled
a macro in earlier releases. The special operator
<a href="operators/excl/named-annotated-function.htm"><b>named-annotated-function</b></a> was not
documented (although it existed) and now is.
</li>
<li id="125">
<b>Allegro CL 32-bit distributions including Express contain a script
which installs Ubuntu 32-bit libraries.</b>. The 32-bit ACL
distributions, Express included, now contain a
script, <i>ubuntu32.sh</i>, which will install 32-bit Ubuntu libraries
(which are not included with Ubuntu distributions, see
<a href="installation.htm#ubuntu32-fix">Getting 32-bit
Allegro CL to run on 64-bit Ubuntu</a>).
</li>
</ol>



<hr><h2 id="126"><a name="acl-smp-2">6.4 Multiprocessing and SMP release notes</a></h2>

<p id="127">
The following are multiprocessing and SMP-related changes.
</p>

<ol>
<li id="128">
<b>An SMP Lisp will fail if there is a thread which prevents garbage
collections.</b> In an SMP Lisp, code that runs atomically, with
interrupt checks optimized out, could block the gc indefinitely. This
represents a bug in the Lisp program that cannot be debugged in Lisp.
When the garbage collector recognizes such a situation, it will print
some diagnostic information and kill the entire Lisp process. A
message will say which process(es) are blocking gc's.
</li>
<li id="129">
<b>New with-virtual-timeout macro.</b> The new <a href="operators/mp/with-virtual-timeout.htm"><b>mp:with-virtual-timeout</b></a> macro is similar
to <a href="operators/system/with-timeout.htm"><b>sys:with-timeout</b></a> except
only non-gc cpu time is counted toward the timeout, not real time. In
an SMP Lisp, time can be further resticted to a single thread.
</li>
<li id="130">
<b>New macro memtrace-def allows definition of memtrace
wrapper</b>. <a href="operators/mp/memtrace-def.htm"><b>memtrace-def</b></a>
defines the wrapper but does not perform any fwrap operations. This
allows <a href="operators/mp/memtrace.htm"><b>memtrace</b></a> to be used
in runtime code.
</li>
</ol>





<hr><h2 id="131"><a name="acl-platform-specific-2">6.5 Base Lisp platform-specific information</a></h2>

<p id="132">
There are no entries at this time. Information may be placed here in
documentation updates after the initial Allegro CL 10.1 release.
</p>








<hr><hr><h2 id="133"><a name="clim-1">7.0 Release Notes for CLIM</a></h2>

<p id="134">
The CLIM manual has not been updated (other than minor corrections)
for the 10.1 release.  There have been no significant changes to CLIM
functionality compared to 10.0.
</p>



<hr><hr><h2 id="135"><a name="cg-1">8.0 Release Notes for Common Graphics and the IDE</a></h2>




<p id="136">
<b>Common Graphics and the IDE are supported on Windows SMP Lisp but
are not supported in SMP Lisps on the Mac and Linux</b>. They are
supported in the non-SMP Lisps on Windows, Linux, and the Mac.
</p>

<p id="137">
The <a href="#cg-non-back-2">first
subsection</a> describes changes to Common Graphics and
the IDE that are non backward-compatible. Please review this section
and make whatever necessary changes to your code to obtain the desired
behavior.
</p>
<p id="138">
The <a href="#cg-other-2">second subsection</a>
describes other changes to Common Graphics and the IDE. These should
not require code changes (please tell us if any do, because that may
indicate a bug).
</p>
<p id="139">
The section <a href="#ide-release-notes-2">Section 8.4 IDE release notes</a> and its
subsections provide information about the IDE.
</p>

<hr><h2 id="140"><a name="cg-significant-new-2">8.1 Significant changes in Common Graphics</a></h2>


<p id="141">
Most changes to Common Graphics in Allegro CL 10.1 are bug fixes and
incremental improvements. There is also the following change which
assists in identifying the causes of compiler warnings.
</p>

<ol>
<li id="142">
<b>New tools for identifying code that causes compiler warnings.</b>
The dialog that shows compilation warnings has a new button for
showing one of the functions that has warnings in the editor.  And
when source debugging information was compiled in (see the compiler
switch <a href="variables/compiler/save-source-level-debug-info-switch.htm"><code>save-source-level-debug-info-switch</code></a>), you
can select an individual warning and then the form inside the function
that triggered the warning will be selected in the editor.  Also, when
a runtime error is signaled for a call in a function whose source code
location is known, the restarts dialog will include a restart for
showing the calling function in the editor, and it will also select
the form for the erroring call if source debug info is present.
<p id="143">
Here is an example of the pop-up window followed by a picture of the
editor. There are two functions whose compilation signaled warnings,
the first because the argument was unused and the other (the third
definition) because an unbound, undeclared variable (y) is used.
</p>
<p id="144"><img src="pictures/compiler-warn-popup.jpg"></p>

<p id="145"><img src="pictures/comp-warn-plus-ed-ex.jpg"></p>

</li>
</ol>




<hr><h2 id="146"><a name="cg-non-back-2">8.2 Non-backward-compatible changes in Common Graphics</a></h2>

<p id="147">
There are no non-backward compatible changes in release 10.1.
</p>






<hr><h2 id="148"><a name="cg-other-2">8.3 Other changes in Common Graphics</a></h2>




<ol>
<li id="149">
<b>New arguments to add-toolbar and remove-toolbar</b>. Additional
optional arguments to <a href="operators/cg/a/add-toolbar.htm"><b>add-toolbar</b></a> and <a href="operators/cg/r/remove-toolbar.htm"><b>remove-toolbar</b></a> control whether existing
toolbars and child-windows are rezied (for
<a href="operators/cg/a/add-toolbar.htm"><b>add-toolbar</b></a>) and existing child-windows are resized (for
<a href="operators/cg/r/remove-toolbar.htm"><b>remove-toolbar</b></a>). These
arguments have in fact been present for several releases but not
documented until now.
</li>
<li id="150">
<b>New function monitor-info</b>. The function <a href="operators/cg/m/monitor-info.htm"><b>monitor-info</b></a> returns information about
all the monitors that are present. This function returns a list whose
length is the number of monitors. For Common Graphics on GTK, the
list elements are each a single-element list containing a box
specifting the coordinate range of the monitor. On Windows, the list
elements are four element lists with the same first element and
additional information in the remaining elements.
</li>
<li id="151">
<b>The clipboard on Windows can contain items at custom
locations</b>. See <a href="operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a> for a discussion of clipboard
locations passed as the value of
the (required) <i>clipboard-format</i> 
argument. Examples show how such items can be accessed by the Lisp
application that posted them and by other Lisp applications.
</li>
<li id="152">
On the Mac, the Common Graphics "Alt" is now the Mac's Option/Alt key
rather than the Command key as before.  This is more consistent with
other applications, and reduces conflicts with global Mac keyboard
shortcuts that use the Command key.  If you needed to revert to the
old behavior, you could do so by setting the internal global
variable <code>cg.gtk::*use-option-key-for-alt*</code>
to <code>nil</code>, though we hope that that is not
needed.
</li>
<li id="153">
On the Mac, the Command key (sometimes along with the
Option key) can now be used with the arrow keys to scroll by pages and
to move to the start and end.  This applies to the text-editing
control as well as to widgets that are implemented in Common Graphics
(rather than supplied by the underlying windowing system).  This takes
the place of the PageUp/PageDown/Home/End keys found on other
platforms, when not using something like Emacs that provides the
needed keystrokes.
</li>
</ol>

<hr><h2 id="154"><a name="cg-bug-fixes-3">8.3.1 Miscellaneous bug fixes in Common Graphics</a></h2>

<ol>
<li id="155">
Fixed: The function <a href="operators/cg/f/fill-circle.htm"><b>fill-circle</b></a> drew in the wrong place when
<a href="variables/cg/s_antialiasing_s.htm"><code>*antialiasing*</code></a> is true
and the window is scrolled.
</li>
<li id="156">
Fixed: Drawing with a <a href="operators/cg/f/fill-texture.htm"><b>fill-texture</b></a> did not align textures properly
when the window is scrolled.
</li>
<li id="157">
Fixed: Keypresses on non-English keyboards that produced
multi-byte characters were not handled correctly by Common
Graphics. (Patched for 10.0.)
</li>
<li id="158">
Fixed: Common Graphics reversed the behavior of the
commands on the Microsoft Windows right-click pop-up menu on a window
scrollbar to scroll to either the top or the bottom of the window.
(Patched for 10.0.)
</li>
<li id="159">
The file dialog on Windows could crash when no
:default-extension argument is passed. (Patched in 10.0.)
</li>
<li id="160">
Fixed: <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a>'ing
<a href="operators/cg/s/stream-origin.htm"><b>stream-origin</b></a> failed within
<a href="operators/cg/w/with-delayed-redraw.htm"><b>with-delayed-redraw</b></a>.
</li>
<li id="161">
Fixed: in <a href="classes/cg/grid-widget.htm"><code>grid-widget</code></a>s, keystrokes such as Alt-O to invoke
the "OK" default-button still work while editing text in a grid
cell.
</li>
<li id="162">
Fixed: in <a href="classes/cg/grid-widget.htm"><code>grid-widget</code></a>s,
hangs could occur when dragging a grid row or column past the end of
its section to cause the section to auto-scroll, especially for a
larger grid that's drawing lots of stuff.
</li>
<li id="163">
Fixed: in <a href="classes/cg/grid-widget.htm"><code>grid-widget</code></a>s,
when the <a href="operators/cg/e/edit-start-trigger.htm"><b>edit-start-trigger</b></a> of a grid cell is
<code>:get-focus</code>, the text editing will begin whenever
the cell gets the keyboard focus, including when selecting the dialog
that the grid-widget is on or alt-tabbing back to the application.
Previously it required tabbing to the cell or pressing the Enter key.
</li>
<li id="164">
Fixed: on Linux and Mac, configuring a second monitor to
the left of the primary monitor led to improper placement of IDE
windows as well as modal dialogs in applications.
</li>
<li id="165">
Fixed: programmatically moving a top-level window on the
Mac to a different monitor left the window invisible in the Mac's
default mode where it uses a separate "space" for each monitor.  You
will probably still need to turn off that Mission Control option if
you want to turn off the IDE's option to use a single parent window
and then place different IDE windows on different monitors, because
the separate IDE windows are still on a single owner window.  Leaving
the IDE on a secondary monitor and unplugging that monitor and
plugging it back in could still leave the IDE invisible as well unless
you turn off that Mission Control option.
</li>
<li id="166">
Fixed: In generated Common Graphics applications on Mac and Linux,
using the macro <a href="operators/cg/i/in-cg-process.htm"><b>in-cg-process</b></a> could lead to severe
failure due to accidentally causing multiple lisp processes to handle
events from the single GTK event queue.
</li>
<li id="167">
Fixed: on Windows, if <a href="variables/cg/s_antialiasing_s.htm"><code>*antialiasing*</code></a> is true then the
functions <a href="operators/cg/d/draw-to.htm"><b>draw-to</b></a> and
<a href="operators/cg/d/draw-to-x-y.htm"><b>draw-to-x-y</b></a> did not
update the current drawing position.
</li>
<li id="168">
Fixed: on Linux and Mac, the functions
<a href="operators/cg/a/ask-user-for-existing-pathname.htm"><b>ask-user-for-existing-pathname</b></a> and
<a href="operators/cg/a/ask-user-for-new-pathname.htm"><b>ask-user-for-new-pathname</b></a> broke if the
:initial-directory argument is the root directory.
</li>
<li id="169">
Fixed: on Windows, <a href="operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a> can now write and read
back text from multiple "locations" on the system clipboard.
</li>
<li id="170">
Fixed: sometimes a <a href="operators/cg/f/fill-texture.htm"><b>fill-texture</b></a> could simply stop being
drawn when using it to fill areas.
</li>
</ol>






<hr><h2 id="171"><a name="ide-release-notes-2">8.4 IDE release notes</a></h2>

<h4 id="172">
The IDE is supported on the Windows SMP Lisp. It is not supported in
the Mac or Linux SMP versions of Allegro CL 10.1. It is supported in
the non-SMP version of those platforms.
</h4>
<p id="173">
The non-SMP version runs on one hardware processor at a time, and
corresponds to earlier versions of Allegro CL.
</p>


<ol>
<li id="174">
<b>New option show-quick-symbol-info-on-space.</b> The option
<a href="operators/ide/show-quick-symbol-info-on-space.htm"><b>ide:show-quick-symbol-info-on-space</b></a>, if enabled
(as it is by default) will display information about a symbol in the
status bar when a space is typed after a symbol name in the listener
or in an editor buffer. This option may interfere with some input
methods that use multiple keystrokes for typing some characters, if
one of the keys in such a sequence is the spacebar. If this happens,
you can turn this option off, as described on the documentation page,
to avoid the problem.
</li>
<li id="175">
<b>New option find-in-files-search-subprojects-later.</b> The option
<a href="operators/ide/find-in-files-search-subprojects-later.htm"><b>ide:find-in-files-search-subprojects-later</b></a>
specifies the initial value of the <b>Search Subprojects Later</b>
checkbox on the <a href="ide-menus-and-dialogs/find-in-files-dialog.htm">Find In Files</a> dialog. The value
is remembered in the options file so it will be the same in the next
invocation of the IDE.
</li>
<li id="176">
<b>New option use-ide-debugger-on-all-processes</b>: the
<a href="operators/ide/use-ide-debugger-on-all-processes.htm"><b>ide:use-ide-debugger-on-all-processes</b></a>
configuration option controls controls whether the IDE's debugger will
be used for all non-IDE processes when they signal errors, rather than
using the base Lisp's debugger.
</li>
<li id="177">
<b>The trace dialog now shows elapsed time for each traced call.</b>
See the <a href="ide-menus-and-dialogs/trace-dialog.htm">Trace
Dialog</a>.
</li>
<li id="178">
<b>Moving the mouse over a local variable in the stepper's definition
pane shows the current variable value</b>. See
the <a href="ide-menus-and-dialogs/stepper-dialog.htm">Stepper
Dialog</a>.
</li>
</ol>

<hr><h2 id="179"><a name="ide-bug-fixes-3">8.4.1 Miscellaneous bug fixes in the IDE</a></h2>

<ol>
<li id="180">
Fixed: On the Windows platform, invoking the user's
preferred third-party web browser for IDE help failed if Internet
Explorer has been explicitly disabled. This includes showing Franz
news when the Express version starts up.
</li>
<li id="181">
Fixed: The Processes dialog could fail to show some
processes in an SMP lisp, due to unpardonably sorting the global
<a href="variables/system/s_all-processes_s.htm"><code>sys:*all-processes*</code></a>
list.  (Patched for 10.0).
</li>
<li id="182">
Fixed: In the runtime analyzer results dialog, keyboard
shortcuts that were intended only for the main outline tab could break
when used on other tabs.  The shortcuts also prevented typing some
characters to move to list items that begin with those characters.
</li>
<li id="183">
Fixed: When using the incremental-search option in the
IDE's editor, and the <a href="operators/ide/warn-on-no-action-taken.htm"><b>warn-on-no-action-taken</b></a> option is also on,
then a warning dialog awkwardly appeared while typing the search string
when there is no match for a further typed character. The font in the
small window for the search string is now a fixed-width font as well.
</li>
<li id="184">
Fixed: On Linux and Mac, the IDE's source code editor
sometimes did not read in the correct package, and so compilation of
individual definitions failed.
</li>
</ol>



<hr><h2 id="185"><a name="opening-earlier-projects-3">8.4.2 Opening projects from releases prior to 10.1</a></h2>

<p id="186">
Allegro CL 10.0 projects should open without problem in Allegro CL
10.1. 
</p>







<hr><h2 id="187"><a name="mac-ide-2">8.5 Common Graphics and the IDE on the Mac</a></h2>


<p id="188">
Common Graphics and the IDE and available on the Mac but only on the
non-SMP Lisp. You must run X11 (it is in the <b>/Applications</b>
directory and comes with recent versions of macOS and is usually
installed by default on 10.1, but see <a href="installation.htm#macosx-install-1">Installation on macOS</a>
in <a href="installation.htm">installation.htm</a> for full details). Usage is
like that on Linux. See <a href="cgide.htm">cgide.htm</a> for details.
</p>
<p id="189">
These are known problems using CG and the IDE on the Mac:
</p>
<ol>
<li id="190">
<b>Parenthesis-matching marks are drawn on pop-up windows.</b> They
cannot be drawn directly on a lisp-edit-pane, so instead a pop-up
window (which otherwise looks like it is drawn directly on the pane)
is displayed. See <a href="variables/cg/s_show-parenthesis-matches-as-pop-up-window_s.htm"><code>*show-parenthesis-matches-as-pop-up-window*</code></a>,
which must be set to true, as it is initially on macOS, and
also <a href="variables/cg/s_parenthesis-match-pop-up-milliseconds_s.htm"><code>*parenthesis-match-pop-up-milliseconds*</code></a>.
</li>
</ol>





<hr><h2 id="191"><a name="cg-win-gtk-2">8.6 Functionality to handle differences between Windows and GTK</a></h2>

<h3 id="192">
For complete information on the differences between Windows and GTK,
please see
<a href="cggtk-relnotes.html">cggtk-relnotes.html</a>.
</h3>

<p id="193">
This section is repeated from the 10.0 release notes.
</p>
<p id="194">
Common Graphics and the IDE run on Windows and Linux with
GTK. Certain differences between the two operating systems and
windowing systems mean that some things do not work the same in
Windows as in GTK and vice versa. The functionality listed here
tries to handle the differences. Some of the
variables/operators/etc. are only available on one of the two platforms.
</p>

<h3 id="195">
Known bug with menu-items and buttons
</h3>

<p id="196">
<b>GTK Only</b>: all-black menu-items and half-black buttons.  There
is still a mystery on the GTK platform where all button widgets can
turn half black along a diagonal line, and all menu-items on some
platforms will be totally black.  This seems to happen only when
opening a project from the <a href="ide-menus-and-dialogs/startup-dialog.htm">Startup Action</a> dialog, though, so a
workaround is to not reopen a project from that dialog and instead to
use the <a href="ide-menus-and-dialogs/recent-menu.htm">Recent menu</a>
or <a href="ide-menus-and-dialogs/file-menu.htm#open-project">File | Open Project</a> just afterward.  We
have tracked the problem down to the use of transparent-pane windows
such as the frame-child of a form window, but beyond that it is a
total mystery.
</p>

<h4 id="197">
Event handler processes
</h4>

<p id="198">
Because Linux currently does not use native threads and Windows does,
on Windows, all windows handle events in their own thread associated
with the window while on Linux/GTK, there is one event-handling
thread. <a href="operators/cg/d/default-application-window-subkey.htm"><b>default-application-window-subkey</b></a>, <a href="variables/cg/s_use-single-cg-event-handling-process_s.htm"><code>*use-single-cg-event-handling-process*</code></a>, and
<a href="variables/cg/s_single-cg-event-handling-process_s.htm"><code>*single-cg-event-handling-process*</code></a> allow
distinguishing behavior when necessary. <a href="operators/cg/c/cg-process-wait.htm"><b>cg-process-wait</b></a> should be used on GTK instead of
<a href="operators/mp/process-wait.htm"><b>process-wait</b></a> in event
handlers. See also <a href="operators/cg/p/process-pending-events-if-event-handler.htm"><b>process-pending-events-if-event-handler</b></a>.
</p>



<h4 id="199">
Miscellaneous
</h4>

<p id="200">
The <a href="operators/cg/w/with-message-window.htm"><b>with-message-window</b></a> window
is now a <a href="operators/cg/f/frameless-topmost-p.htm"><b>frameless-topmost-p</b></a>
window on the GTK platforms to avoid problems that it had otherwise.
This means that deselecting the owner window will close the message
window, and so it may be a good idea to display the message in an
additional place such as a status bar.
</p>




<hr><h2 id="201"><a name="win-pack-2">8.7 Release notes for the winapi module</a></h2>

<p id="202">
The winapi module contains certain functions, in the windows package,
that perform OS-related tasks. See <a href="cgide.htm#nocg-winapp-1">The Windows API and a Windows API program with
windows but without CG</a> in <a href="cgide.htm">cgide.htm</a> for
more information. 
</p>

<ol>
<li id="203">
no entries
</li>
</ol>






<hr><hr><h2 id="204"><a name="aserve-1">9.0 Release notes for AllegroServe</a></h2>











<hr><hr><h2 id="205"><a name="eli-misc-1">10.0 Release notes for The Emacs/Lisp interface</a></h2>









<hr><hr><h2 id="206"><a name="clx-1">11.0 Availability of CLX for Allegro CL</a></h2>

<p id="207">
CLX (Common Lisp X) provides an interface between Common Lisp and the
X window system. All versions of Allegro CL include a compiled
version of CLX with the distribution. The <i>fasl</i>
file is <i>code/clx.fasl</i>, loaded by evaluating
<code>(require :clx)</code>. The Allegro CL products CLIM and
Allegro Composer use CLX. Users wanting low-level access to an X
server in Lisp may also want to use CLX.  CLX is not supported by
Franz Inc.
</p>
<p id="208">
The sources to CLX are supplied with the regular Allegro CL
distributions in the <i>contrib/clx/</i> directory. Note
that during installation, you are asked whether you wish to install
the <i>contrib/</i> directory and the default is not to
install it. The <i>contrib/</i> directory is not
included in the Trial distribution, but Trial users can download the
CLX sources from the Franz Inc. website as described next.
</p>
<p id="209">
The sources to CLX are also available on the Franz Inc. web site (<a href="http://franz.com/">franz.com</a>), at the location <a href="ftp://ftp.franz.com/pub/clx/">ftp://ftp.franz.com/pub/clx/</a>.
</p>

<hr><hr><h2 id="210"><a name="orblink-1">12.0 Release notes for Orblink</a></h2>

<p id="211">
No significant changes.
</p>



<hr><hr><h2 id="212"><a name="app-conformance-proj">Appendix A: ANSI Conformance in Allegro CL</a></h2>

<p id="213">
We discuss ANSI conformance in <a href="implementation.htm#compliance-1">Conformance with the ANSI specification</a>
in <a href="implementation.htm">implementation.htm</a>. Elsewhere in
<a href="implementation.htm">implementation.htm</a> we discuss specifics of our
implementation of certain Common Lisp functionality.
</p>



</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had significant revisions compared to the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#FFFF00"><b>RelNotes</b></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Significantly revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/release-notes.htm">10.0 version</a></td></tr></table></html>