<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>Miscellaneous Functionality</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/miscellaneous.htm">10.0 version</a></td></tr></table><h1 id="2">Miscellaneous Functionality</h1><p id="3">This document contains the following sections:</p><a href="#misc-intro-1">1.0 Introduction</a><br><a href="#fasl-read-write-1">2.0 The fasl reader/writer</a><br><a href="#extensions-1">3.0 Miscellaneous extensions</a><br><a href="#pll-file-1">4.0 Creating and using pll files</a><br><a href="#md5-1">5.0 MD5, SHA*, HMAC, RC4, and other message digest support</a><br><a href="#base64-1">6.0 Base64 support</a><br><a href="#encrypt-1">7.0 Support for encryption</a><br>&nbsp;&nbsp;&nbsp;<a href="#blowfish-2">7.1 Support for Blowfish encryption</a><br>&nbsp;&nbsp;&nbsp;<a href="#rsa-2">7.2 Support for rsa encryption</a><br><a href="#gzip-1">8.0 Support for gzip and bzip compression and decompression</a><br><a href="#pam-1">9.0 PAM support in Allegro Common Lisp</a><br>&nbsp;&nbsp;&nbsp;<a href="#pam-conversations-2">9.1 PAM conversation functions</a><br><a href="#asdf-1">10.0 asdf support in Allegro CL</a><br><a href="#tar-1">11.0 tar support in Allegro CL</a><br><a href="#coverage-1">12.0 Coverage analysis in Allegro CL</a><br><a href="#format-checking-1">13.0 Checking format forms during compilation</a><br><a href="#heap-walking-1">14.0 Heap walkers in Allegro CL</a><br><a href="#json-rpc-1">15.0 The JSON-RPC API</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-server-ops-2">15.1 JSON-RPC server operators and variables</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-client-ops-2">15.2 JSON-RPC client operators and variables</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-stream-trans-2">15.3 JSON-RPC built-in stream transport</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-aserve-trans-2">15.4 JSON-RPC built-in allegroserve transport</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-new-trans-2">15.5 JSON-RPC: how to add a new transport method</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-example-2">15.6 JSON-RPC: examples</a><br>&nbsp;&nbsp;&nbsp;<a href="#jsonrpc-index-2">15.7 JSON-RPC: functionality index</a><br><a href="#web-sock-1">16.0 Websocket API</a><br>&nbsp;&nbsp;&nbsp;<a href="#websock-server-func-2">16.1 Websocket server functionality</a><br>&nbsp;&nbsp;&nbsp;<a href="#websock-client-func-2">16.2 Websocket client functionality</a><br>&nbsp;&nbsp;&nbsp;<a href="#ws-event-handlers-2">16.3 Websocket event handlers</a><br>&nbsp;&nbsp;&nbsp;<a href="#websock-general-func-2">16.4 Websocket general functionality</a><br>&nbsp;&nbsp;&nbsp;<a href="#websock-classes-2">16.5 Websocket classes</a><br><hr><hr><h2 id="4"><a name="misc-intro-1">1.0 Introduction</a></h2>

<p id="5">This document describes functionality that does not naturally fit
in any of the other overview documents.</p>

<hr><hr><h2 id="6"><a name="fasl-read-write-1">2.0 The fasl reader/writer</a></h2>

<p id="7">The functions <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a>
and <a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a> provide a
mechanism for writing Lisp data and subsequently reading it back into
a Lisp image. It can handle many of the common Lisp data types. It can
optionally detect circularity and structure sharing in the data and
recreate the same topology up to <b>eql</b>-ness of components. The
data is written in a binary file format similar to that used for
compiled Lisp files, not in ASCII.</p>

<p id="8">Among the advantages of <a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a> and <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a> over standard Common Lisp read and
print functions is that data does not have to be converted to its
printed representation prior to being written (that conversion takes a
significant amount of time for complex objects). The main disadvantage
is that the files (unlike ASCII files with printed representations of
Lisp objects) are not at all portable between versions of Lisp (or
even between versions of Allegro CL on different platforms or between
major releases of Allegro CL). </p>

<p id="9">Not all Lisp objects may be written with <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a> (and thus are not available to be
read by <a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a>).  The
objects that cannot be written are CLOS objects, streams, stacks, or
c-allocated data (cstructs). You can use <a href="operators/excl/fasl-open.htm"><b>fasl-open</b></a> to open a file suitable for numerous
<a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a>'s.  (<a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a> reads all of whatever file
is specified to it.)</p>

<p id="10"><a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a> reads the
entire contents of its argument file. However, <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a>, if its argument is a stream rather
than a filename, writes data to the stream but does not close it. Thus
you can open a stream and do multiple <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a>'s to it. The stream must have
<code>:element-type</code> <code>(unsigned-byte 8)</code>. <a href="operators/excl/fasl-open.htm"><b>fasl-open</b></a> opens an appropriate
stream, as shown in the example.</p>

<p id="11">Here is a simple-minded example to show the correct syntax and give
an idea of the effect:</p>

<pre id="12">
(excl:fasl-write '(a b #1=#:c (#1#) #*1011 #(1 2 3) 
                  
1 1.1 1.1d0 1/2
                  
#c(1 1) #c(1.5 1.5) "abc")
     "test.fw")
(excl:fasl-read "test.fw")

(setq f (fasl-open "test2.fw")) 
(excl:fasl-write '(a b c) f) 
(excl:fasl-write '#1=(a b . #1#) f t) 
(excl:fasl-write '#(1 2 3 4.5) f)
(close f)

(excl:fasl-read "test2.fw")
</pre>

<h3 id="13">
Application note
</h3>
<p id="14">
<a href="operators/excl/fasl-read.htm"><b>fasl-read</b></a> and <a href="operators/excl/fasl-write.htm"><b>fasl-write</b></a> require the compiler so
they are not available in application images without the compiler.
</p>

<hr><hr><h2 id="15"><a name="extensions-1">3.0 Miscellaneous extensions</a></h2> 

<p id="16">The table describes those extensions to Common Lisp that do not
naturally fit elsewhere in the documentation. We only provide brief
information in the table. Please follow the link to the documentation
page for a full description.</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7" WIDTH="95%">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>Name</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>Arguments</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>Notes</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/dribble-bug.htm"><b>excl:dribble-bug</b></a></td>
    <td WIDTH="33%" VALIGN="TOP">&optional<em> file</em></td>
    <td WIDTH="33%" VALIGN="TOP">This function is an extension of the Common Lisp function <b>dribble</b>.
    <a href="operators/excl/dribble-bug.htm"><b>dribble-bug</b></a> called with the optional <i>file</i>
    calls several information functions whose output is then placed at the beginning of the
    dribble file. See also <a href="variables/excl/s_dribble-bug-hooks_s.htm"><code>excl:*dribble-bug-hooks*</code></a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/uncompile.htm"><b>excl:uncompile</b></a></td>
    <td WIDTH="33%" VALIGN="TOP"><em>function-name</em></td>
    <td WIDTH="33%" VALIGN="TOP"><p id="17">If the function <em>function-name</em> was compiled with the <a href="../ansicl/dictentr/compile.htm"><b>compile</b></a>
    function (as opposed to having been in a file that was compiled with <a href="../ansicl/dictentr/compile-.htm"><b>compile-file</b></a>
    and subsequently loaded), then the function is `uncompiled,' i.e. its function definition
    is replaced by the original interpreted definition. </p>
    <p id="18">This function will only work when
    definitions are saved. See the description page for <a href="operators/excl/uncompile.htm"><b>excl:uncompile</b></a> and the page for <a href="variables/excl/s_save-function-lambda-expression_s.htm"><code>excl:*save-function-lambda-expression*</code></a>
    for details.</p></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/bignump.htm"><b>excl:bignump</b></a></td>
    <td WIDTH="33%" VALIGN="TOP" ROWSPAN="4"><em>object</em></td>
    <td WIDTH="33%" VALIGN="TOP" ROWSPAN="4">These functions, like similar ones in standard
    Common Lisp return t if object is of the type specified, and nil otherwise.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/fixnump.htm"><b>excl:fixnump</b></a></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/ratiop.htm"><b>excl:ratiop</b></a></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/single-float-p.htm"><b>excl:single-float-p</b></a></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/file-older-p.htm"><b>excl:file-older-p</b></a></td>
    <td WIDTH="33%" VALIGN="TOP"><em>file-1 file-2 </em></td>
    <td WIDTH="33%" VALIGN="TOP">If <em>file-1</em> and <em>file-2</em> both exist, and if <em>file-1</em>
    is older than <em>file-2</em>, this function returns t. Otherwise, it returns nil.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/if_s.htm"><b>excl:if*</b></a></td>
    <td WIDTH="33%" VALIGN="TOP"><i>test-form {then then-form+ | thenret} 
    {elseif else-test-form 
    {then else-then-form+ | thenret}}* 
    [else else-form+]</i></td>
    <td WIDTH="33%" VALIGN="TOP">This extension to <b>cl:if</b> allows symbols like <em>then</em>,
    <em>else</em>, <em>elseif</em>, and <em>thenret</em> in the body allowing a complex number
    of cases and outcomes to be specified.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/named-readtable.htm"><b>excl:named-readtable</b></a></td>
    <td WIDTH="33%" VALIGN="TOP"><i>name </i>&optional <i>errorp</i></td>
    <td WIDTH="33%" VALIGN="TOP">This function looks up a readtable by <em>name</em>. <em>name</em>
    must be a symbol, but it is coerced to a keyword (so readtables are named by keywords). <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a>
    may be used to associate a name to a readtable. The association can be broken by setting
    to nil. See also <a href="operators/excl/with-named-readtable.htm"><b>with-named-readtable</b></a>.</td>
  </tr>
<tr>
<td WIDTH="33%" VALIGN="TOP">
<a href="operators/excl/prefixp.htm"><b>excl:prefixp</b></a>
</td>
<td WIDTH="33%" VALIGN="TOP">
<i>prefix sequence</i>
</td> 
<td WIDTH="33%" VALIGN="TOP">
This function returns non-<code>nil</code> if
<i>sequence</i> starts with <i>prefix</i>,
returning the index in sequence where prefix ends (so
<code>(prefixp "foo" "foobar")</code> returns 3). While this can
be done using regular-expression matching (see
<a href="regexp.htm">regexp.htm</a>), this function is easier to use for very
simple cases.
</td>
</tr>

<tr>
<td WIDTH="33%" VALIGN="TOP">
<a href="operators/excl/gen-sym.htm"><b>excl:gen-sym</b></a>
</td>
<td WIDTH="33%" VALIGN="TOP">
<i>x</i>
</td> 
<td WIDTH="33%" VALIGN="TOP">
Similar to <a href="../ansicl/dictentr/gensym.htm"><b>cl:gensym</b></a> except
that a symbol is accepted as the optional argument (as well as the
standard string or integer), in which case the <a href="../ansicl/dictentr/symbol-n.htm"><b>symbol-name</b></a> is used.  This is useful for
programs that are intended for use in either ANSI or modern Lisps,
where it is desired to print any gensyms without requiring escapes
(see <a href="case.htm">case.htm</a>).
</td>
</tr>

</table>

<hr><hr><h2 id="19"><a name="pll-file-1">4.0 Creating and using pll files</a></h2>

<p id="20">A <i>pll</i> file can be used in association with a Lisp image. It
contains constant code vectors and strings that can be shared among
many Lisp objects. When an image uses a <i>pll</i> file and a function
is compiled, the new codevector is compared to codevectors in the
<i>pll</i> file. If a match is found, the match is used and no new
codevector is allocated.  Similarly, if a constant string is specified
(with <a href="operators/excl/pure-string.htm"><b>excl:pure-string</b></a>) and
a matching string appears in the <em>pll</em> file, no new string is
allocated and the match is used.  Strings in a <i>pll</i> file cannot
be modified. Attempting to do so causes an error.  (Neither can
codevectors be modified but there is no user-visible way to modify
codevectors as there is with strings.)</p>

<p id="21">
Strings and codevectors in a <em>pll</em> file are not also (after
being garbage collected) in the Lisp heap. Thus if a string has been
successfully purified, it will not be in the heap after a global gc. A
total count of strings and codevectors is shown in the output of
<code>(room t)</code>.
</p>

<p id="22">
Constant strings in <i>pll</i> files cannot be overwritten (constant strings
stored in the heap can be overwitten although doing so is actually
illegal). Strings naming Common Lisp symbols are usually stored in <i>pll</i>
files, for example. This example shows in that case, the strings
cannot be modified:
</p>

<pre id="23">
cl-user(1): (pll-file)
#P"/usr/fi/dcl.pll"
cl-user(2): (nstring-upcase (symbol-name 'car))
Error: Attempt to store into purespace address #x2d7865e8.
  [condition type: purespace-write-error]
</pre>

<p id="24">
Here we tried to upcase the string naming the
symbol <code>car</code> (this is a modern Lisp where symbol
names are lowercase -- see <a href="case.htm">case.htm</a>). The change
failed and signaled purespace-write-error, which is the condition
specific to this issue. The next example shows that modifying a
constant strings not in the <i>pll</i> file does not signal an error:
</p>

<pre id="25">
cl-user(88): (setq teststring "this-string-is-likely-not-in-the-pll-file")
"this-string-is-likely-not-in-the-pll-file"
cl-user(89): (dotimes (i 4) (gc))
nil
cl-user(90): (nstring-upcase teststring)
"THIS-STRING-IS-LIKELY-NOT-IN-THE-PLL-FILE"
cl-user(91): teststring
"THIS-STRING-IS-LIKELY-NOT-IN-THE-PLL-FILE"
cl-user(92): 
</pre>

<p id="26">
The call to <a href="../ansicl/dictentr/string-u.htm"><b>nstring-upcase</b></a> is in fact illegal: you
may not modify a constant, but it is an error that does not signal an
error unless the string is located in the <i>pll</i> file.
</p>


<p id="27"><em>pll</em> files are created with the <b>cvdcvt</b> program
described next.</p>

<blockquote>
  <blockquote>
    <p id="28"><b>cvdcvt</b></p> <p id="29"><b>Arguments:</b> [<code>-o
    <i>outfilename</i></code>] [<code>-u</code>] [<code><i>file1 file2
    </i></code>]</p> <p id="30">A <i>.pll</i> file,
    <code>outfilename</code>, is created holding all the unique code
    vectors and strings. If <code>outfilename</code> is omitted it
    defaults to <i>code.blob</i>.</p>
    <p id="31">If <code>-u</code> is
    specified, then no duplications of strings are done, otherwise for
    every string that has no lowercase characters in it and at least
    one uppercase character, a lowercase copy is added to the output
    file. This is the default and is useful for
    <code>set-case-mode</code>. If no files are specified,
    <i>stdin</i> is used.</p> 
    <p id="32"><i>.str</i> (string) files and
    <i>.cvs</i> (code vector) files are combined without redundancies;
    if two files of the same extension have identical objects, the
    object from the file specified first to <b>cvdcvt</b> is retained,
    and the latter object is removed from the output. This allows for
    files (<i>.cvs</i> files especially) to be arranged by code
    vectors in order of execution, to provide for locality of
    reference. Those <i>.cv</i>s files that were produced by training
    techniques should be placed first in order to have the desired
    effect.</p>
  </blockquote>
</blockquote>

<p id="33">
As said in the description, <em>pll</em> files are built out of
<em>cvs</em> files and <em>str</em> files. <em>cvs</em> files are
created with <a href="operators/system/write-codevectors.htm"><b>sys:write-codevectors</b></a> and can be created by
<a href="operators/system/flush-codevectors.htm"><b>sys:flush-codevectors</b></a>.
<em>str</em> files are created with <a href="operators/system/record-strings.htm"><b>record-strings</b></a>.  See also <a href="operators/system/record-code-vectors.htm"><b>record-code-vectors</b></a>.
</p>

<p id="34">
The following functions can be used to associate a <em>pll</em>
file with an image, to find out which <em>pll</em> file is used with
an image, and to use strings in the <em>pll</em> file.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7" WIDTH="95%">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>Name</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>Arguments</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>Notes</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/pll-file.htm"><b>excl:pll-file</b></a>
    </td>
    <td WIDTH="33%" VALIGN="TOP">[none]</td>
    <td WIDTH="33%" VALIGN="TOP">Return the location of the current <i>.pll</i> file, or nil
    if there is no <i>.pll</i> file associated with this Lisp.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/use-pll-file.htm"><b>excl:use-pll-file</b></a>
    </td>
    <td WIDTH="33%" VALIGN="TOP"><em>name</em> &key (<em>global-gc</em> t)</td>
    <td WIDTH="33%" VALIGN="TOP">Associates the current Lisp with the <em>pll</em> file
    specified by <em>name</em>. It is an error to associate an image already using a pll file
    with another pll file.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><a href="operators/excl/pure-string.htm"><b>excl:pure-string</b></a></td>
    <td WIDTH="33%" VALIGN="TOP"><em>x</em></td>
    <td WIDTH="33%" VALIGN="TOP">When not in the body of <a href="operators/system/record-strings.htm"><b>sys:record-strings</b></a>, returns a
    pure-string if there is one identical to the argument and a heap-allocated string if there
    isn't. When in the body of <a href="operators/system/record-strings.htm"><b>sys:record-strings</b></a>,
    also write the string to the str file being created.</td>
  </tr>
</table>


<hr><hr><h2 id="35"><a name="md5-1">5.0 MD5, SHA*, HMAC, RC4, and other message digest support</a></h2>


<p id="36">
Allegro CL provides various message digest algorithms. Various
algorithms are supported, including MD2, MD4, MD5, SHA1, SHA224,
SHA256, SHA384, SHA512, and RMD160. Rather than have functions for
each of these types, there are general functions for them,
named <b>digest-*</b> and listed first. HMAC support is available for
:md5, :sha1, :sha224, :sha256, :sha384, and :sha512. The
functions <a href="operators/excl/hmac-init.htm"><b>hmac-init</b></a>,
<a href="operators/excl/hmac-update.htm"><b>hmac-update</b></a>, <a href="operators/excl/hmac-string.htm"><b>hmac-string</b></a>, and <a href="operators/excl/hmac-final.htm"><b>hmac-final</b></a> implement these algorithms.
</p>
<p id="37">
The MD*, SHA* and RMD160 functions are all are cryptographic hash
functions.  A hash function takes a long string (or message) of any
length as input and produces a fixed-size output.  This output is
sometimes termed a
<i>message digest</i>. 
</p>


<p id="38">
The keyed-hash algorithm HMAC is designed to work with algorithms MD5
and SHA* (for *=1, 224, 256, 384, and 512, to list what Allegro CL
currently supports). Keyed hash algorithms work by utilizing an
existing hash function (such as MD5 or SHA1) and using a secret "key"
as part of the information to hash.  If one party sends a message to
another party and also includes an HMAC with the message, the receiver
(if he/she shares the same secret key) can verify that the message
hasn't been altered by running the message through the HMAC functions
using the same key.  If the two HMACs match, then the message is
considered, with high probability, to be unaltered
</p>
<p id="39">
RC4 is a stream cipher algorithm.  It is used to encrypt streams of
data.
</p>
<p id="40">
Many of these function require SSL support
(see <a href="socket.htm#ssl-1">Secuere Socket Layer
(SSL)</a> in <a href="socket.htm">socket.htm</a>).
</p>
<p id="41">
The functions available are:
</p>

<h3 id="42">
General digest functions
</h3>

<ul>
<li id="43"><a href="operators/excl/digest-init.htm"><b>digest-init</b></a></li>
<li id="44"><a href="operators/excl/digest-update.htm"><b>digest-update</b></a></li>
<li id="45"><a href="operators/excl/digest-final.htm"><b>digest-final</b></a></li>
<li id="46"><a href="operators/excl/digest-file.htm"><b>digest-file</b></a></li>
<li id="47"><a href="operators/excl/digest-string.htm"><b>digest-string</b></a></li>
</ul>

<p id="48">
These functions are in the :digest module loaded
with <code>(require :digest)</code>.
</p>

<h3 id="49">
MD5 functions
</h3>
<ul>
<li id="50"><a href="operators/excl/md5-init.htm"><b>md5-init</b></a></li>
<li id="51"><a href="operators/excl/md5-update.htm"><b>md5-update</b></a></li>
<li id="52"><a href="operators/excl/md5-final.htm"><b>md5-final</b></a></li>
<li id="53"><a href="operators/excl/md5-file.htm"><b>md5-file</b></a></li>
<li id="54"><a href="operators/excl/md5-string.htm"><b>md5-string</b></a></li>
</ul>


<h3 id="55">
SHA1 functions
</h3>
<ul>
<li id="56"><a href="operators/excl/sha1-init.htm"><b>sha1-init</b></a></li>
<li id="57"><a href="operators/excl/sha1-update.htm"><b>sha1-update</b></a></li>
<li id="58"><a href="operators/excl/sha1-final.htm"><b>sha1-final</b></a></li>
<li id="59"><a href="operators/excl/sha1-file.htm"><b>sha1-file</b></a></li>
<li id="60"><a href="operators/excl/sha1-string.htm"><b>sha1-string</b></a></li>
</ul>

<p id="61">
These functions are in the :sha1 module loaded
with <code>(require :sha1)</code>.
</p>


<h3 id="62">
Related utility functions
</h3>

<ul>
<li id="63"><a href="operators/excl/hex-string-to-integer.htm"><b>hex-string-to-integer</b></a></li>
<li id="64"><a href="operators/excl/integer-to-hex-string.htm"><b>integer-to-hex-string</b></a></li>
<li id="65">
<a href="operators/excl/hex-string-to-usb8-array.htm"><b>hex-string-to-usb8-array</b></a>:
converts a hex string to an (unsigned-byte 8) array. 
</li>
<li id="66">
<a href="operators/excl/usb8-array-to-hex-string.htm"><b>usb8-array-to-hex-string</b></a>:
converts an (unsigned-byte 8) array to a hex string.  
</li>

</ul>

<h3 id="67">
HMAC functions for MD5 and SHA*
</h3>
<ul>
<li id="68">
<a href="operators/excl/hmac-init.htm"><b>hmac-init</b></a>
</li>
<li id="69">
<a href="operators/excl/hmac-update.htm"><b>hmac-update</b></a>
</li>
<li id="70">
<a href="operators/excl/hmac-final.htm"><b>hmac-final</b></a>
</li>
<li id="71">
<a href="operators/excl/hmac-string.htm"><b>hmac-string</b></a>
</li>
</ul>

<p id="72">
These functions are in the :hmac module loaded
with <code>(require :hmac)</code>.
</p>



<h3 id="73">
RC4 functions
</h3>

<ul>
<li id="74">
<a href="operators/excl/rc4-set-key.htm"><b>rc4-set-key</b></a>
</li>
<li id="75">
<a href="operators/excl/rc4.htm"><b>rc4</b></a>
</li>
</ul>

<p id="76">
These functions are in the :rc4 module loaded
with <code>(require :rc4)</code>.
</p>



<hr><hr><h2 id="77"><a name="base64-1">6.0 Base64 support</a></h2>

<p id="78">
Allegro CL provides support for Base64 encoding within Lisp. Base64
encoding is a 64-bit representation scheme that uses the ASCII
characters A-Z, a-z, 0-9, + and /. Since padding could be needed in
converting multiples of 8-bits into base64, = characters are used,
when necessary, as padding at the end of a converted string. Base64
encoding is described in the RFC2045 document (<a href="http://www.ietf.org/rfc/rfc2045.txt">www.ietf.org/rfc/rfc2045.txt</a>).
</p>
<p id="79">
These functions provide the Base64 support in Allegro CL:
</p>
<ul>
<li id="80">
<a href="operators/excl/integer-to-base64-string.htm"><b>integer-to-base64-string</b></a>,
which takes an integer argument and an optional
<i>column</i> argument and returns the associated string
(with newlines at the <i>column</i> location, if any).
</li>
<li id="81">
<a href="operators/excl/base64-string-to-integer.htm"><b>base64-string-to-integer</b></a>,
which takes a string and returns the associated integer.
</li>


<li id="82">

<a href="operators/excl/usb8-array-to-base64-string.htm"><b>usb8-array-to-base64-string</b></a>,
which takes an (unsigned-byte 8) array argument and a
<i>wrap-at-column</i> keyword argument and returns the
associated string (with newlines at the
<i>wrap-at-column</i> location, if any).

</li>

<li id="83">
<a href="operators/excl/base64-string-to-usb8-array.htm"><b>base64-string-to-usb8-array</b></a>,
which takes a string and returns the associated (unsigned-byte 8)
array.
</li>


<li id="84">

<a href="operators/excl/string-to-base64-string.htm"><b>string-to-base64-string</b></a>,
which takes a string argument and a
<i>wrap-at-column</i> keyword argument and returns the
associated string (with newlines at the
<i>wrap-at-column</i> location, if any).

</li>

<li id="85">
<a href="operators/excl/base64-string-to-string.htm"><b>base64-string-to-string</b></a>,
which takes a string and returns the associated string.
</li>
<li id="86">
<a href="operators/excl/base64-encode-stream.htm"><b>base64-encode-stream</b></a>,
which reads bytes from a stream and writes the base64
encoding of those bytes to another stream.
</li>
<li id="87">
<a href="operators/excl/base64-decode-stream.htm"><b>base64-decode-stream</b></a>,
which reads base64 bytes from a stream and writes the decoded bytes
to another stream.
</li>
</ul>
<p id="88">
Here are some examples, first using <a href="operators/excl/integer-to-base64-string.htm"><b>integer-to-base64-string</b></a> and <a href="operators/excl/base64-string-to-integer.htm"><b>base64-string-to-integer</b></a>:
</p>
<pre id="89">
cl-user(2): (integer-to-base64-string #xfeedfacefeedface)
"/u36zv7t+s4="
cl-user(3): (base64-string-to-integer "/u36zv7t+s4=")
18369614222061337294
cl-user(4): (format t "~x" *)
feedfacefeedface
nil
cl-user(5): 
</pre>
<p id="90">
And now using <a href="operators/excl/usb8-array-to-base64-string.htm"><b>usb8-array-to-base64-string</b></a> and <a href="operators/excl/base64-string-to-usb8-array.htm"><b>base64-string-to-usb8-array</b></a>:
</p>
<pre id="91">
;;  The encoding results may differ between Windows and 
;;  UNIX/Linux/Mac OS X (the transcript is from a
;;  UNIX machine).

cl-user(5): (setq a (string-to-octets
                     (setq s
                       "
(defun deep-thought ()
  (sleep (years2secs 7500000))
  42)
")
                     :external-format (crlf-base-ef :latin1)))
#(10 40 100 101 102 117 110 32 100 101 ...)
cl-user(6): (usb8-array-to-base64-string a)
"CihkZWZ1biBkZWVwLXRob3VnaHQgKCkKICAoc2xlZXAgKHllYXJz
MnNlY3MgNzUwMDAwMCkpCiAgNDIpCgA="
cl-user(7): (base64-string-to-usb8-array *)
#(10 40 100 101 102 117 110 32 100 101 ...)
cl-user(8): (setq a2 *)
#(10 40 100 101 102 117 110 32 100 101 ...)
cl-user(9): (equalp a a2)
t
cl-user(10): (octets-to-string a2 :external-format (crlf-base-ef :latin1))
"
(defun deep-thought ()
  (sleep (years2secs 7500000))
  42)
"
61
61
cl-user(11): 
</pre>

<hr><hr><h2 id="92"><a name="encrypt-1">7.0 Support for encryption</a></h2>

<p id="93">
Allegro CL provides implementations of some publicly available
encryption algorithms: blowfish (see
<a href="#blowfish-2">Section 7.1 Support for Blowfish encryption</a>) and rsa (see
<a href="#rsa-2">Section 7.2 Support for rsa encryption</a>). Please note that we make no
claims about the actual security provided by these encryption schemes.
</p>

<hr><h2 id="94"><a name="blowfish-2">7.1 Support for Blowfish encryption</a></h2>

<p id="95">
The Blowfish algorithm, described on <a href="http://www.counterpane.com/blowfish.html">this page</a> (and
links from it), is a high speed symmetric cryptographic algorithm (or
cipher). The same key is used to encrypt and decrypt the data.
Blowfish encrypts blocks of 64 bits (8 octets) at a time. The
functions below can automatically pad out the data to encrypt to be a
multiple of 8 octets. Blowfish was designed by Bruce Schneier, a
leading authority on cryptography and author of the book <i>Applied
Cryptography</i>. Schneier writes in his book published in 1996: "I
know of no successful cryptanalysis against Blowfish."
</p>




<ul>
<li id="96">
<a href="operators/excl/blowfish-encrypt.htm"><b>blowfish-encrypt</b></a>: encrypts
an (unsigned-byte 8) array or a Lisp string using a specified key.
</li>
<li id="97">
<a href="operators/excl/blowfish-decrypt.htm"><b>blowfish-decrypt</b></a>: decrypts a
value encrypted with <a href="operators/excl/blowfish-encrypt.htm"><b>blowfish-encrypt</b></a>.
</li>
<li id="98">
<a href="operators/excl/blowfish-init.htm"><b>blowfish-init</b></a>: returns an
object that holds the key already processed for doing encryption or
decryption, saving time when doing multiple calls to <a href="operators/excl/blowfish-encrypt.htm"><b>blowfish-encrypt</b></a> or <a href="operators/excl/blowfish-decrypt.htm"><b>blowfish-decrypt</b></a> using the same key. (The
object rather than the key is passed to those functions, saving the
time needed to calculate the object from the key multiple times.)
</li>
</ul>

<p id="99">
Here are some examples of Blowfish encryption and decryption:
</p>

<pre id="100">
;; Example 1. string encrypting

cl-user(12): (blowfish-encrypt "my secret message" 
                        :key "my key")
#(57 27 110 242 191 19 182 150 1 5 ...)
24
cl-user(13): (blowfish-decrypt * :key "my key" :string t)
"my secret message"
cl-user(14): 

;; Example 2. (unsigned-byte 8) encrypting:

;; Here we allocate an (unsigned-byte 8) array with a size 
;; that is a multiple of 8 and fill it with data.  
;; We can do in-place encryption and decryption.
;; We specify no padding (since otherwise 8 bytes of padding would
;; have to be added and there's no room in this array for that):

;; Create our array:

cl-user(12): (setq aa (make-array 8 :element-type '(unsigned-byte 8) 
                        :initial-contents '(2 4 6 8 10 12 14 16)))
#(2 4 6 8 10 12 14 16)

;; Encrypt it in place

cl-user(13): (blowfish-encrypt aa :key "my key" 
               :in-place t :pad nil)
#(129 144 108 210 20 227 10 58)
8

;; Verify that it has been modified:

cl-user(14): aa
#(129 144 108 210 20 227 10 58)

;; Now decrypt in place. Notice how the arguments to 
;; blowfish-decrypt match those to blowfish-encrypt:

cl-user(15): (blowfish-decrypt aa :key "my key" 
                 :in-place t :pad nil)
#(2 4 6 8 10 12 14 16)
cl-user(16): 

;; And verify that the array is now back to normal:

cl-user(16): aa
#(2 4 6 8 10 12 14 16)
cl-user(17): 

;; Example 3. use of contexts

;; Create context which holds the key processed by 
;; blowfish to prepare it for encryption/decryption:

cl-user(21): (setq cc (blowfish-init "my key"))
#(141 90 172 196 250 88 140 57 179 211 ...)

;; Encrypt something using the context:

cl-user(22): (blowfish-encrypt "my message" :context cc)
#(75 202 37 143 4 243 181 205 211 126 ...)
16

;; And now decrypt it using the same context
;; to show the original string

cl-user(23): (blowfish-decrypt * :context cc :string t)
"my message"
cl-user(24): 
</pre>

<p id="101">
It is a common practice to send Blowfish keys to intended recipients
using their RSA public keys. See <a href="#rsa-2">Section 7.2 Support for rsa encryption</a>
for information on RSA encryption.
</p>



<hr><h2 id="102"><a name="rsa-2">7.2 Support for rsa encryption</a></h2>

<p id="103">
RSA is a public key cipher named after its inventors: Rivest, Shamir
and Adleman. A public key cipher differs from a symmetric cipher like
Blowfish (see <a href="#blowfish-2">Section 7.1 Support for Blowfish encryption</a>) in two
important ways:
</p>

<ol>
<li id="104">
There exist two keys: the Public key and the Private key.
</li>
<li id="105">
Different keys are used for encryption and decryption.
</li>
<li id="106">
One of the keys (the Public key) can be made public without
making it possible to compute the other key (the Private key).
</li>
</ol>

<p id="107">
With RSA you can encrypt with the Public key and decrypt
with the Private key or encrypt with the Private key
and decrypt with the Public key. Typically one encrypts
with the Public key to send a message to the person with the Private key.
</p>
<p id="108">
RSA has never been proven to be secure.  However the
obvious way to crack the encryption involves factoring 
a very large number. There is no published way of factoring
a large number that's better than a brute force attempt
of trying all possible factors. Thus by making the key
big enough you can be sure that it won't be possible
to compute the factors by brute force search in a very long time.
There may be other ways to crack RSA encryption that are simply
not published yet.  
</p>
<p id="109">
One major downside to RSA is that it is roughly 1000 times slower
to encrypt and decrypt than a symmetric cipher like Blowfish.
As a result people usually use RSA as means of transmitting
a key for a symmetric cipher.  For example if Alice wants
to send Bob a large document securely she'll first go to 
Bob's web site and copy down his Public RSA key.  Then
she'll use a random number generator to create a 64 bit 
blowfish key. She'll encrypt the blowfish key with Bob's Public
key and send the result to Bob.  Then she'll encrypt her
document using Blowfish and the key she generated.
Bob will decrypt the first message from Alice using his Private
RSA key. That will give him the Blowfish key he'll need to 
decrypt the second message from Alice.
</p>
<p id="110">
Because the public key is known to all you have to be careful
to not encrypt small values with an RSA public key since
that gives you very little security.  For example, suppose you
decide to encrypt a 4 digit security code using an RSA public
key.  A person willing to steal your code need only encrypt
the values 0000 through 9999 and compare them to your encrypted
value to determine what the value encrypted was.  If you want
to encrypt a 4 digit security code XXXX then it's best to
encrypt instead YYYYYYYYXXXX where the Y's are digits chosen
randomly.  
</p>

<p id="111">
An RSA key pair consists of three integers: a  modulus, a
private exponent and a public exponent. The only number that
must be kept secret is the private exponent. The public
exponent is usually one of a set of common small numbers.
The Allegro RSA key generator always chooses 17 as
the public exponent.
</p>

<p id="112">
An RSA key is represented in Allegro as a vector of three
values:
</p>
<ol>
<li id="113">
<code>t</code> if this is the public key, <code>nil</code> if this is the private key. This value is to help
you distinguish one key from the other and is not used in the
encryption/decryption code.
</li>
<li id="114">
the modulus value (approximately 1024 bits long). 
</li>
<li id="115">
the exponent value.
</li>
</ol>


<p id="116">
RSA is a block cipher: a sequence of octets is encrypted at once.
The block size isn't fixed but is usually determined by the size of
the modulus.  In order to encrypt data whose length is not a multiple
of the block size padding is done at the end of the value and
information about the padding is added to the value.  The format of
this padding information is not standard among rsa encryption
functions, thus you can't expect any function except <a href="operators/excl/rsa-decrypt.htm"><b>rsa-decrypt</b></a> to be able to decrypt a value
encrypted with <a href="operators/excl/rsa-encrypt.htm"><b>rsa-encrypt</b></a>.
</p>

<p id="117">
The functions associated with RSA encryption and decryption are:
</p>

<ul>
<li id="118">
<a href="operators/excl/rsa-encrypt.htm"><b>rsa-encrypt</b></a>:
given a value to encrypt and a key, returns the encrypted value.
</li>
<li id="119">
<a href="operators/excl/rsa-decrypt.htm"><b>rsa-decrypt</b></a>: given a value
returned by <a href="operators/excl/rsa-encrypt.htm"><b>rsa-encrypt</b></a> and a key,
return the decrypted value.
</li>
<li id="120">
<a href="operators/excl/generate-rsa-keys.htm"><b>generate-rsa-keys</b></a>: generates
candidate public and private keys. This function takes a long time to
complete and is not guaranteed to produce valid keys. Please see the
description for details.
</li>
</ul>

<p id="121">
Because RSA encryption is resource intensive compared to symetric
encoders like Blowfish, it is a common practice to encode using
Blowfish and send Blowfish keys to intended recipients using their RSA
public keys. See <a href="#blowfish-2">Section 7.1 Support for Blowfish encryption</a> for
information on Blowfish encryption.
</p>

<p id="122">
Here are some examples of Blowfish encryption and decryption:
</p>

<pre id="123">
;; A call to generate-rsa-keys, such as the following, can take 
;; on the order of 10 minutes to complete. The example call
;; could have been made with ':verbose t' to get progress
;; information as it runs. 
;;
;; The return value is a list of the public and
;; private keys, both of which are vectors.  This list
;; is made the value of the variable 'keys'.


cl-user(12): (setq keys (generate-rsa-keys :verbose nil))
(#(t
   4696616306992156162791359909817969438301590857320651704912\
5099728659553054438846018512904176959283177314807123575693727\
9515543419344057970899365859403176313951068268266882944649562\
1008090347981854919956845970556254842289211552574616675107428\
9213609596618613446079618857135830766959762009927055865884710\
796501
   17)
 #(nil
   46966163069921561627913599098179694383015908573206517049125\
09972865955305443884601851290417695928317731480712357569372795\
15543419344057970899365859403176313951068268266882944649562100\
80903479818549199568459705562548422892115525746166751074289213\
609596618613446079618857135830766959762009927055865884710796501

   38678016645817756634752375727912689491895454119111249334573\
61154124904369189081436818709755749588026367101763117998307007\
77506345342165387799477766567321557421166007590816670669406236\
43773618649101682703783799537062586749082756929026484684965113\
373035085734095558864183533679809881862774879514342408924287321))



;; Here we encrypt with the public key and decrypt with the private key
;; we could have encrypted with the private key and decrypted with the
;; public key as well.

cl-user(13): (rsa-encrypt "my secret message" (car keys))
#(102 136 69 180 180 27 185 63 132 137 ...)


cl-user(14): (rsa-decrypt * (cadr keys) :string t)
"my secret message"
cl-user(15): 
</pre>




<hr><hr><h2 id="124"><a name="gzip-1">8.0 Support for gzip and bzip compression and decompression</a></h2>



<p id="125">
The <b>inflate</b> and <b>deflate</b> modules allows you to compress
data as it is written to files, and to open streams to files containing gzip
compressed data and to uncompress the data while reading the file. To
load the modules, evaluate <code>(require
:inflate)</code> and <code>(require
:deflate)</code>. Symbols in the modules are in the
<b>util.zip</b> package. (There are two modules because they were
added at different times.)
</p>
<p id="126">
The <code>:deflate</code> module requires that the <b>libz</b>
library be available on your computer (and in the correct version). If
you do not have that library or do not have the correct version,
deflation will not work. Allegro CL functionality that uses deflation
(such as AllegroServe, see <a href="aserve/aserve.html">aserve/aserve.html</a>)
will warn that they cannot compress data but will continue to work
without data compression.
</p>
<p id="127">
The inflation function <a href="miscellaneous.htm#inflate-op-bookmarkxx"><b>util.zip:inflate</b></a> can be applied
to instances of the class <a href="miscellaneous.htm#inflate-stream-class-bookmarkxx"><code>util.zip:inflate-stream</code></a>.
</p>
<p id="128">
The various utility functions <a href="miscellaneous.htm#skip-gzip-header-op-bookmarkxx"><b>util.zip:skip-gzip-header</b></a>, <a href="miscellaneous.htm#skip-gzip-trailer-op-bookmarkxx"><b>util.zip:skip-gzip-trailer</b></a>, <a href="miscellaneous.htm#skip-zlib-header-op-bookmarkxx"><b>util.zip:skip-zlib-header</b></a>,
and <a href="miscellaneous.htm#skip-zlib-trailer-op-bookmarkxx"><b>util.zip:skip-zlib-trailer</b></a> can
be applied to an input stream to position the file position to the
correct location for uncompressing and to avoid any trailers.
</p>
<p id="129">
The deflation functions <a href="miscellaneous.htm#deflate-target-stream-op-bookmarkxx"><b>util.zip:deflate-target-stream</b></a>, <a href="miscellaneous.htm#deflate-stream-vector-op-bookmarkxx"><b>util.zip:deflate-stream-vector</b></a>, and <a href="miscellaneous.htm#deflate-stream-vector-combined-op-bookmarkxx"><b>util.zip:deflate-stream-vector-combined</b></a> can
be applied to instances of the class <a href="miscellaneous.htm#deflate-stream-class-bookmarkxx"><code>util.zip:deflate-stream</code></a>.
</p>

<p id="130">
The value of the variable <a href="variables/system/s_zlib-system-library_s.htm"><code>sys:*zlib-system-library*</code></a> is the name of the
gzip library used by the deflate module.
</p>


<h3 id="131">
inflate-stream and related functions
</h3>
<hr><h3 id="132"><a name="inflate-op-bookmarkxx"></a>inflate</h3><h3 id="133">Function</h3><h4 id="134">Package: util.zip</h4>

<p id="135"><b>Arguments: </b><i>
input-stream output-stream
</i></p>

<p id="136">
The compressed information from the input-stream is read and the
uncompressed information is written to the output-stream.
</p>
<p id="137">
Both streams must support (unsigned-byte 8) element reading and
writing.
</p>

<hr>

<hr><h3 id="138"><a name="skip-gzip-header-op-bookmarkxx"></a>skip-gzip-header</h3><h3 id="139">Function</h3><h4 id="140">Package: util.zip</h4>

<p id="141"><b>Arguments: </b><i>
input-stream
</i></p>

<p id="142">
If the input stream is positioned on the header of a gzip'ed file then
skip that header. <i>input-stream</i> is not an instance
of the class <a href="miscellaneous.htm#inflate-stream-class-bookmarkxx"><code>util.zip:inflate-stream</code></a>. It is
simply an input stream (opened, for example, with <a href="../ansicl/dictentr/open.htm"><b>open</b></a>). The file position must be moved to the
beginning of the compressed data before unziping, and only at that
point should an instance of <a href="miscellaneous.htm#inflate-stream-class-bookmarkxx"><code>util.zip:inflate-stream</code></a> be
created (see <a href="miscellaneous.htm#inflate-stream-class-bookmarkxx"><code>util.zip:inflate-stream</code></a>).
</p>
<p id="143">
If the input stream is not positioned on a gzip header then nothing is done.
</p>

<hr>

<hr><h3 id="144"><a name="skip-gzip-trailer-op-bookmarkxx"></a>skip-gzip-trailer</h3><h3 id="145">Function</h3><h4 id="146">Package: util.zip</h4>

<p id="147"><b>Arguments: </b><i>
input-stream
</i></p>

<p id="148">
Skips past the next 8 bytes
in <b><i>input-stream</i></b>. Note that gzip trailers
have no byte-markers to identify them so care should be taken to only
call this function after the final data block is read from the stream.
</p>

<hr>


<hr><h3 id="149"><a name="skip-zlib-header-op-bookmarkxx"></a>skip-zlib-header</h3><h3 id="150">Function</h3><h4 id="151">Package: util.zip</h4>

<p id="152"><b>Arguments: </b><i>
input-stream
</i></p>

<p id="153">
If <b><i>input-stream</i></b> is positioned at the
header of a zlib'ed stream, then skip past it, returning the number of
bytes read.
</p>
<p id="154">
If <i>input-stream</i> is not positioned at a zlib
header, return <code>nil</code>
</p>
<p id="155">
If <i>input-stream</i> appears to be positioned at a
zlib header but turns out to not be, signal an error.
</p>

<hr>

<hr><h3 id="156"><a name="skip-zlib-trailer-op-bookmarkxx"></a>skip-zlib-trailer</h3><h3 id="157">Function</h3><h4 id="158">Package: util.zip</h4>

<p id="159"><b>Arguments: </b><i>
input-stream
</i></p>

<p id="160">
Skips past the next 4 bytes
in <b><i>input-stream</i></b>. Note that zlib trailers
have no byte-markers to identify them so care should be taken to only
call this function after the final data block is read from the stream.
</p>

<hr>

<hr><h3 id="161"><a name="inflate-stream-class-bookmarkxx"></a>inflate-stream</h3><h3 id="162">Class</h3><h4 id="163">Package: util.zip</h4>

<p id="164">
The stream class for instances of files containing comressed gzip'ed
data. Instances of this class are suitable as arguments to <a href="miscellaneous.htm#inflate-op-bookmarkxx"><b>util.zip:inflate</b></a>.
</p>
<p id="165">
To create an instance of this class, do the following:
</p>
<ol>
<li id="166">
Make a stream (using, e.g. <a href="../ansicl/dictentr/open.htm"><b>open</b></a>) with a data source which contains
compressed data.
</li>
<li id="167">
If the this file may have a gzip header on it, apply <a href="miscellaneous.htm#skip-gzip-header-op-bookmarkxx"><b>util.zip:skip-gzip-header</b></a> to
the stream.
</li>
<li id="168">
Create an instance of util.zip:inflate-stream by evaluating:
<pre id="169">
(make-instance 'inflate-stream :input-handle &lt;stream created in 1&gt;
               [:compression <i>compress-spec</i>])
</pre>
<p id="170">
<i>compress-spec</i> can be one of the following three values:
</p>
<ul>
<li id="171">
<code>:gzip</code> (the default): automatically read past gzip
header and trailer.
</li>
<li id="172">
<code>:zlib</code>: read past zlib header/trailer.
</li>
<li id="173">
<code>:deflate</code>: no headers in this stream.
</li>
<li id="174">
<code>(header-fn trailer-fn)</code>: users may specify their own
functions for skipping past headers and trailers wrapping the
deflate-stream. This can be used to support less common encoding
methods, such as <b>zip</b> or <b>pkzip</b>, etc. The inflate module
does not capture any information from header and trailers, so the
custom functions can also be used to capture this information if
needed. The function accepts a single argument, which is the
input-handle of the inflate-stream. It should
return <code>nil</code> or the number of bytes read.
</li>
<li id="175">
<code>nil</code>: equivalent to
the <code>:deflate</code> option. No callbacks to utility
functions needed.
</li>
</ul>



<p id="176">
The call to <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> will
return a stream which can be read to recover the uncompressed data.
</p>
</li>
</ol>

<p id="177">
Closing the inflate-stream will also close the stream created in step
1.
</p>

<hr>

<h3 id="178">
deflate-stream and related functions
</h3>

<p id="179">
To write compressed data, you create a deflate-stream and at that time
specify an ultimate taget, which is either a regular stream (perhaps
open to a file) or a octet vector (of element
type <code>(unsigned-byte 8)</code>). You then write data to the
deflate-stream and that data is compressed and eventually written to
the target. We say <i>eventually</i> because there is a lot of
buffering so you do not see data in the target immediately. When you
are done, you close the deflate-stream and that causes any remaining
data to be written to the target.
</p>
<p id="180">
Closing the deflate-stream does not close the target if it is a
stream. <b>You must close the target stream yourself</b>.
</p>
<p id="181">
You create deflate-streams with <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>, as described next.
</p>

<hr><h3 id="182"><a name="deflate-stream-class-bookmarkxx"></a>deflate-stream</h3><h3 id="183">Class</h3><h4 id="184">Package: util.zip</h4>

<p id="185">
The stream class for instances of deflation streams which accepts
characters and bytes and causes them to be compressed and sent to a
target.
</p>
<p id="186">
You created a <code>deflate-stream</code> with <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>. You must specify a
target when you create a deflate-stream.
</p>
<p id="187">
Here is a sample <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> call:
</p>

<pre id="188">
(make-instance 'deflate-stream :target <i>target-spec</i> 
                               [:compression <i>compress-spec</i>])
</pre>

<p id="189">
<i>target-spec</i> can either another stream, or it can be a vector
(that is an actual stream or an actual vector). The stream must be
writable. The vector must have element-type (unsigned-byte
8). 
</p>
<p id="190">
<i>compress-spec</i> can be one of the following three values:
</p>
<ul>
<li id="191">
<code>:gzip</code> (the default): create a deflate stream with
gzip headers.
</li>
<li id="192">
<code>:zlib</code>: create a deflate stream with zlib headers.
</li>
<li id="193">
<code>:deflate</code>: create a deflate stream with <b>no</b>
headers.
</li>
</ul>


<p id="194">
<code>:gzip</code> is the preferred
format as the result can be uncompressed with the <a href="miscellaneous.htm#inflate-stream-class-bookmarkxx"><code>util.zip:inflate-stream</code></a> (be sure
to specify <code>:skip-gzip-header t</code> to
the <b>make-instance</b> creating the inflate-stream or to
call <a href="miscellaneous.htm#skip-gzip-header-op-bookmarkxx"><b>util.zip:skip-gzip-header</b></a> after
the input stream is opened). The <code>:gzip</code> format
output can also be uncompressed with the <b>gunzip</b> program found
on Unix.
</p>

<h3 id="195">
A stream as the target-spec
</h3>
<p id="196">
If you pass a stream as the <i>target-spec</i> then as
you write characters and bytes to the deflate-stream, the bytes
resulting from deflation will be written to the given stream. There
is a lot of buffering going on in this stream and the compression
library. Therefore you may not see the results in your target-spec
stream immediately.
</p>
<p id="197">
When you close the deflate-stream the last bytes in all the buffers
will be sent through deflation and the end of deflation record will
be written to the target-spec stream.
</p>
<p id="198">
Again, the target-spec stream <b>will not be closed</b> when the
deflate-stream is closed. It is the callers responsibility to close
the stream passed in as the target-spec.
</p>
<p id="199">
The function <a href="miscellaneous.htm#deflate-target-stream-op-bookmarkxx"><b>deflate-target-stream</b></a> will
return that target-spec stream used by the deflate-stream.
</p>
<h3 id="200">
A vector as the target-spec
</h3>
<p id="201">
Passing a simple vector of type (unsigned-byte 8) as
the <i>target-spec</i> is telling the deflate-stream
that you wish to collect the deflation result in vectors in the lisp
heap. The size of the vector passed is not important. Additional
vectors will be created as necessary to hold data as it is written.
</p>
<p id="202">
Once you have closed the deflate-stream after all data has been
written to it, you can retrieve the result with <a href="miscellaneous.htm#deflate-stream-vector-op-bookmarkxx"><b>util.zip:deflate-stream-vector</b></a>
or <a href="miscellaneous.htm#deflate-stream-vector-combined-op-bookmarkxx"><b>util.zip:deflate-stream-vector-combined</b></a>,
as described in the descriptions of those
functions. The <b>deflate-stream-vector-combined</b> combines all
results into a new vector if the target vector is not large
enough. <b>deflate-stream-vector</b> returns the vectors created by
writing to the deflate-stream, along with additional information.
</p>

<hr>

<hr><h3 id="203"><a name="deflate-target-stream-op-bookmarkxx"></a>deflate-target-stream</h3><h3 id="204">Function</h3><h4 id="205">Package: util.zip</h4>

<p id="206"><b>Arguments: </b><i>
deflate-stream
</i></p>

<p id="207">
Returns the stream which is the target
of <b><i>deflate-stream</i></b> which must be
a <a href="miscellaneous.htm#deflate-stream-class-bookmarkxx"><code>deflate-stream</code></a>. Returns 
<code>nil</code> if <i>deflate-stream</i>
has a vector as its target.
</p>

<hr>

<hr><h3 id="208"><a name="deflate-stream-vector-op-bookmarkxx"></a>deflate-stream-vector</h3><h3 id="209">Function</h3><h4 id="210">Package: util.zip</h4>

<p id="211"><b>Arguments: </b><i>
deflate-stream
</i></p>

<p id="212">
<b><i>deflate-stream</i></b> must be
a <a href="miscellaneous.htm#deflate-stream-class-bookmarkxx"><code>deflate-stream</code></a> whose target is a
vector. In that case, this function returns three values:
</p>
<ol>
<li id="213">
The newest vector created so far by writing
to <i>deflate-stream</i> (or the last such vector if
<i>deflate-stream</i> is closed).
</li>
<li id="214">
The number of bytes of actual data in the newest vector.
</li>
<li id="215">
A list of previous vectors holding data in reverse order.
</li>
</ol>
<p id="216">
For example, if the three returns values are:
</p>

<pre id="217">
    v
    100
    (c b a)
</pre>

<p id="218">
then the deflated result is found by combining in this order:
</p>

<pre id="219">
    all of a
    all of b
    all of c
    the first 100 bytes of v
</pre>

<p id="220">
This function signals an error if <i>deflate-stream</i>
has a stream as its target.
</p>

<hr>


<hr><h3 id="221"><a name="deflate-stream-vector-combined-op-bookmarkxx"></a>deflate-stream-vector-combined</h3><h3 id="222">Function</h3><h4 id="223">Package: util.zip</h4>

<p id="224"><b>Arguments: </b><i>
deflate-stream
</i></p>

<p id="225">
<b><i>deflate-stream</i></b> must be
a <a href="miscellaneous.htm#deflate-stream-class-bookmarkxx"><code>deflate-stream</code></a> whose target is a
vector. In that case, this function returns two values:
</p>
<ol>
<li id="226">
An octet vector.
</li>
<li id="227">
The number of bytes of actual data.
</li>
</ol>
<p id="228">
The octet vector is newly created if necessary (if the target vector
specified when the <a href="miscellaneous.htm#deflate-stream-class-bookmarkxx"><code>deflate-stream</code></a> was created is
not large enough to hold the compressed data).
</p>
<p id="229">
This function signals an error if <i>deflate-stream</i>
has a stream as its target.
</p>

<hr>


<h3 id="230">
Example
</h3>

<p id="231">
Suppose we wish to create a compressed file foo.cl.gz from the following text:
</p>
<pre id="232">
;; file foo.cl begin
(in-package :user)

(defpackage :foo (:use :cl :excl))
(defun foo (y) (bar y))

;; file foo.cl end
</pre>
<p id="233">
In the following transcript, we use a deflate stream to create
foo.cl.gz and then we inflate foo.cl.gz by opening the file, stripping
the gzip header, creating an inflate-stream instance, reading the file
line by line, closing the inflate-stream, and closing the file. We
could also inflate the while file by calling <a href="miscellaneous.htm#inflate-op-bookmarkxx"><b>inflate</b></a>.
</p>
<pre id="234">
;; We load the modules and then write a compressed file.
;; Once it is written, we read it back uncompressing it.

cl-user(61) (require :deflate)
; [loading messages]
tcl-user(62) (require :inflate)
; [loading messages]
t
cl-user(63): (setq myfile (open &quot;foo.cl.gz&quot; :direction :output :if-exists :supersede))
#&lt;file-simple-stream #P&quot;foo.cl.gz&quot; for output pos 0 @ #x100439f9f2&gt;
cl-user(64): (setq *df* (make-instance 'deflate-stream :target myfile))
#&lt;deflate-stream in 0 / out 0 @ #x10043ad922&gt;
cl-user(65): (format *df* &quot;;; file foo.cl begin~%~%&quot;)
nil
cl-user(66): (format *df* &quot;(in-package :user)~%~%&quot;)
nil
cl-user(67): (format *df* &quot;(defpackage :foo (:use :cl :excl))~%&quot;)
nil
cl-user(68): (format *df* &quot;(defun foo (y) (bar y))~%~%&quot;)
nil
cl-user(69): (format *df* &quot;;; file foo.cl end&quot;)
nil
cl-user(70): (close *df*)
#&lt;deflate-stream in 120 / out 106 @ #x10043ad922&gt;
cl-user(71): (close myfile)
t
cl-user(72): (setq s (open &quot;foo.cl.gz&quot; :direction :input))
#&lt;file-simple-stream #P&quot;foo.cl.gz&quot; for input pos 0 @ #x1004400732&gt;
cl-user(73): (util.zip:skip-gzip-header s)
10
cl-user(74): (setq is
              (make-instance 'util.zip:inflate-stream :input-handle s))
#&lt;inflate-stream
  inflating #&lt;file-simple-stream #P&quot;foo.cl.gz&quot; for input pos 10 @
              #x1004400732&gt;ef :latin1-base, in: 0, inflated 0, used: 0 of
  @ #x1004417412&gt;
cl-user(75): (read-line is nil s)
&quot;;; file foo.cl begin&quot;
nil
cl-user(76): (read-line is nil s)
&quot;&quot;
nil
cl-user(77): (read-line is nil s)
&quot;(in-package :user)&quot;
nil
cl-user(78): (read-line is nil s)
&quot;&quot;
nil
cl-user(79): (read-line is nil s)
&quot;(defpackage :foo (:use :cl :excl))&quot;
nil
cl-user(80): (read-line is nil s)
&quot;(defun foo (y) (bar y))&quot;
nil
cl-user(81): (read-line is nil s)
&quot;&quot;
nil
cl-user(82): (read-line is nil s)
&quot;;; file foo.cl end&quot;
t
cl-user(83): (read-line is nil s)
#&lt;file-simple-stream #P&quot;foo.cl.gz&quot; for input pos 98 @ #x1004400732&gt;
t
cl-user(84): (close is) ;; this also closes s.

t
cl-user(85): 
</pre>

<p id="235">
The source code to the gzip utility is included with the Allegro CL
distribution, in <i>[Allegro
directory]/src/inflate.cl</i>.
</p>



<hr><hr><h2 id="236"><a name="pam-1">9.0 PAM support in Allegro Common Lisp</a></h2>

<p id="237">
PAM stands for <i>Pluggable Authentication Modules</i>. It is a
flexible mechanism for authenticating users. 
An Allegro CL module provides a Lisp wrapper
around the PAM API on Linux, Solaris, and some other unixlike
operating systems.
We do not discuss PAM in detail here. See <a href="http://www.kernel.org/pub/linux/libs/pam/FAQ">www.kernel.org/pub/linux/libs/pam/FAQ</a>.
</p>
<p id="238">
PAM is supported on the following platforms:
</p>
<ul>
<li id="239">
<b>FreeBSD</b>
</li>
<li id="240">
<b>Linux</b>
</li>
<li id="241">
<b>HP/UX (32-bit)</b>
</li>
<li id="242">
<b>Mac OS X (32-bit)</b>
</li>
<li id="243">
<b>Solaris</b>
</li>
</ul>
<p id="244">
PAM is not supported in Allegro CL on the following platforms:
</p>
<ul>
<li id="245">
<b>Windows</b>
</li>
<li id="246">
<b>Tru64</b>
</li>
<li id="247">
<b>AIX</b>
</li>
<li id="248">
<b>HP/UX 64-bit</b> (32-bit is supported)
</li>
<li id="249">
<b>Mac OS X 64-bit</b> (32-bit is supported)
</li>
</ul>

<p id="250">
The PAM API is is loaded by evaluating <code>(require
:pam)</code>. Symbols naming functionality are in the
<b>util.pam</b> package.  Depending on your system configuration, your
program may be required to run with 'root' privileges to successfully
make use of PAM.
</p>

<p id="251">
There is one class and several operators defined in the pam
module. They are:
</p>
<ul>
<li id="252">
<a href="miscellaneous.htm#pam-class-bookmarkxx"><code>pam</code></a> (class)
</li>
<li id="253">
<a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a> (function)
</li>
<li id="254">
<a href="miscellaneous.htm#pam-end-op-bookmarkxx"><b>pam-end</b></a> (generic
function)
</li>
<li id="255">
<a href="miscellaneous.htm#set-pam-fail-delay-op-bookmarkxx"><b>set-pam-fail-delay</b></a> (generic
function)
</li>
<li id="256">
<a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a> (generic
function)
</li>
<li id="257">
<a href="miscellaneous.htm#with-pam-op-bookmarkxx"><b>with-pam</b></a> (macro)
</li>
</ul>

<hr><h3 id="258"><a name="pam-class-bookmarkxx"></a>pam</h3><h3 id="259">Class</h3><h4 id="260">Package: util.pam</h4>

<p id="261">
The class of <a href="miscellaneous.htm#pam-class-bookmarkxx"><code>pam</code></a> objects. A pam object is
created by <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>.
</p>

<hr>

<hr><h3 id="262"><a name="pam-start-op-bookmarkxx"></a>pam-start</h3><h3 id="263">Function</h3><h4 id="264">Package: util.pam</h4>

<p id="265"><b>Arguments: </b><i>
service-name user </i>&amp;key <i>conversation data</i><i>
</i></p>

<p id="266">
This function provides a wrapper around the <b>pam_start(3)</b> PAM
library function.  <b><i>service-name</i></b> should be
a string naming the desired PAM service.
<b><i>user</i></b> may be <code>nil</code>
or a string.
</p>
<p id="267">
If <b><i>conversation</i></b> is specified, it should be
a function (or a symbol naming a function) which will perform the PAM
"conversation", when necessary.  <b><i>data</i></b> is
optional user-defined data that will be passed to the conversation
function.  If <i>conversation</i> is <code>nil</code> (the default), a default conversation function
will be used.  For more information on conversation functions, see
<a href="#pam-conversations-2">Section 9.1 PAM conversation functions</a>.
</p>
<p id="268">
This function returns a <a href="miscellaneous.htm#pam-class-bookmarkxx"><code>pam</code></a> object on success.  You will
pass this object to other functions and methods.  If <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>
fails, an error is signalled.
</p>

<hr>

<hr><h3 id="269"><a name="pam-end-op-bookmarkxx"></a>pam-end</h3><h3 id="270">Generic Function</h3><h4 id="271">Package: util.pam</h4>

<p id="272"><b>Arguments: </b><i>
pam </i> &amp;optional <i>status</i><i>
</i></p>

<p id="273">
The default method is analogous to the <b>pam_end(3)</b> PAM library
function. <b><i>pam</i></b> must be a <a href="miscellaneous.htm#pam-class-bookmarkxx"><code>pam</code></a> object returned by <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>.  If
<b><i>status</i></b> is specified, it should be an
integer. See the <b>pam_end(3)</b> description (in PAM documentation
not supplied here) for details on the use of
<i>status</i>. If <i>status</i> is <code>nil</code>, <a href="osi-constants.htm#s_pam-success_s-var-bookmarkxx"><code>excl.osi:*pam-success*</code></a> will
be used.
</p>
<p id="274">
This method returns <code>t</code> on success, otherwise
it signals an error.
</p>

<hr>

<hr><h3 id="275"><a name="with-pam-op-bookmarkxx"></a>with-pam</h3><h3 id="276">Macro</h3><h4 id="277">Package: util.pam</h4>


<p id="278"><b>Arguments: </b><i>
(var </i> &amp;rest <i>rest</i><i>) </i> &amp;body <i>body</i><i>
</i></p>

<p id="279">
<a href="miscellaneous.htm#with-pam-op-bookmarkxx"><b>with-pam</b></a> is a convenience macro
which evaluates <i>body</i> with
<i>var</i> bound to the result of calling <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a> with the arguments
specified in <i>rest</i>.  <a href="miscellaneous.htm#pam-end-op-bookmarkxx"><b>pam-end</b></a> will
be called when <i>body</i> terminates, either normally
or abnormally.
</p>
<h4 id="280">
Sample use
</h4>

<pre id="281">
(util.pam:with-pam (pam "login" "jimmy")
  (format t "This is the body~%"))
</pre>

<hr>

<hr><h3 id="282"><a name="pam-authenticate-op-bookmarkxx"></a>pam-authenticate</h3><h3 id="283">Generic Function</h3><h4 id="284">Package: util.pam</h4>

<p id="285"><b>Arguments: </b><i>
pam </i>&amp;key <i>flags password</i><i>
</i></p>

<p id="286">
This default method is analogous to the <b>pam_authenticate(3)</b> PAM
library function.  <i>pam</i> must be a pam object
returned by <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>.  If
<i>password</i> is specified, it should be a string.  It
will be used when needed if the default conversation (see <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>) is used.  If
<i>flags</i> is specified, it should be an integer.
</p>
<p id="287">
On success, this function returns <code>t</code>.
</p>
<p id="288">
If the call is not successful, the function returns two values,
<code>nil</code> and a status value.  The status value
will be a keyword or an integer.  Possible status value keywords are:
</p>
<ul>
<li id="289">
<code>:auth-err</code>
</li>
<li id="290">
<code>:cred-insufficient</code>
</li>
<li id="291">
<code>:authinfo-unavail</code>
</li>
<li id="292">
<code>:user-unknown</code>
</li>
<li id="293">
<code>:max-tries</code>
</li>
</ul>

<p id="294">
If <b>pam_authenticate(3)</b> returns an unrecognized status code, it
will be returned without being converted to a keyword.
</p>


<hr>

<hr><h3 id="295"><a name="set-pam-fail-delay-op-bookmarkxx"></a>set-pam-fail-delay</h3><h3 id="296">Generic Function</h3><h4 id="297">Package: util.pam</h4>


<p id="298"><b>Arguments: </b><i>
pam microseconds
</i></p>

<p id="299">
This method is used to request a delay of at least the specified
number of microseconds (which must be an integer) before returning
from an unsuccessful <a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a> call.  Setting
a delay slows down attempts to rapidly try different passwords for an
account.
</p>
<p id="300">
If multiple calls to <a href="miscellaneous.htm#set-pam-fail-delay-op-bookmarkxx"><b>set-pam-fail-delay</b></a> are made, the
largest requested delay will be used.  On some systems, it is possible
that the PAM modules themselves may request delays, so you might
notice a delay longer than one you requested (and in particular, you
might notice a delay even though you hadn't called <a href="miscellaneous.htm#set-pam-fail-delay-op-bookmarkxx"><b>set-pam-fail-delay</b></a>).
</p>
<p id="301">
The actual delay will is computed pseudorandomly and may differ by as
much as 25% above or below the maximum requested value.
</p>
<p id="302">
Regardless of the success or failure of a pam-authenticate call, the
delay is set back to 0 before returning from <a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a>.  This means
that you should generally call <a href="miscellaneous.htm#set-pam-fail-delay-op-bookmarkxx"><b>set-pam-fail-delay</b></a> before each
call to <a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a>.
</p>

<hr>


<hr><h2 id="303"><a name="pam-conversations-2">9.1 PAM conversation functions</a></h2>

<p id="304">
The default conversation function will display prompts and request
input from <a href="../ansicl/dictentr/terminal.htm"><code>*terminal-io*</code></a>.
If the <i>password</i> argument is supplied to <a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a>, it is probable
that no interaction with <code>*terminal-io*</code> will occur
at all.  However, if your system configuration or application has
different requirements, you can provide your own conversation
function.
</p>
<p id="305">
The conversation function will be called by the PAM API when it needs
to collect information to move the authentication process along.  
</p>
<p id="306">
If you supply your own conversation function, it should accept two
required arguments, and one keyword argument: 
</p>
<p id="307"><b>Arguments: </b><i>
messages data </i>&amp;key <i>password</i><i>
</i></p>

<p id="308">
<b><i>messages</i></b> will be a list of pam-message
structures. <b><i>data</i></b> will be the same value
that was supplied to <a href="miscellaneous.htm#pam-start-op-bookmarkxx"><b>pam-start</b></a>.
<b><i>password</i></b> will be the password that was
passed to <a href="miscellaneous.htm#pam-authenticate-op-bookmarkxx"><b>pam-authenticate</b></a> (and may
possibly be <code>nil</code>).
</p>
<p id="309">
The conversation function should return a list of pam-response
structures.  The list must have the same length as the
<i>messages</i> list.  The first entry in the list
should be the response that corresponds to the first message.  The
second entry should correspond to the second message, and so forth.
See <b>pam_conv(3)</b> for details.
</p>
<p id="310">
The pam-message structure has two slots, <b>style</b> and
<b>message</b>.  The <code>style</code> slot will be one of the
following keywords <code>(:prompt-echo-off, :prompt-echo-on,
:error, :text)</code> or an integer (indicating an unrecognized
style). <code>message</code> will be a string which may be used
to prompt the user.
</p>
<p id="311">
The pam-response structure has two slots, <b>response</b> and
<b>code</b>.  <code>response</code> should be a string with the
data requested by the corresponding message.  <code>code</code>
should be an integer (the default is 0).  Again, see
<b>pam_conv(3)</b> for details.
</p>




<hr><hr><h2 id="312"><a name="asdf-1">10.0 asdf support in Allegro CL</a></h2>

<p id="313">
The popular system definition facility, <b>asdf</b>, is included with
Allegro CL. Evaluate <code>(require :asdf)</code> to load it
into a running Lisp. See <b><i>[Allegro
directory]/code/asdf.readme</i></b> for more information,
<code>[Allegro directory]/code/asdf.license</code> for the
license, and <code>[Allegro directory]/src/asdf.lisp</code> for
the source code. asdf documentation can be found on the web
at 
<a href="http://constantly.at/lisp/asdf/">http://constantly.at/lisp/asdf/</a>.
</p>


<hr><hr><h2 id="314"><a name="tar-1">11.0 tar support in Allegro CL</a></h2>

<p id="315">
Allegro CL provides support for extracting contents from tar files. To
use this facility, evaluate</p>

<pre id="316">
(require :tar)
</pre>

<p id="317">
The tar functions are named by symbols exported from
the <b>util.tar</b> package. 
</p>
<p id="318">
The tar functions take streams (rather than pathnames) as
arguments. <a href="miscellaneous.htm#list-tar-op-bookmarkxx"><b>util.tar:list-tar</b></a> lists the
contents of the tar file. <a href="miscellaneous.htm#extract-tar-op-bookmarkxx"><b>util.tar:extract-tar</b></a> extracts
the contents into a specified directory.
</p>
<p id="319">
Here are example forms using the tar functions:
</p>

<pre id="320">
(with-open-file (s "foo.tgz")
  (util.tar:list-tar s :gzip t))
(with-open-file (s "foo.tgz")
  (util.tar:extract-tar s :gzip t :directory "tmp/"))
</pre>

<hr><h3 id="321"><a name="list-tar-op-bookmarkxx"></a>list-tar</h3><h3 id="322">Function</h3><h4 id="323">Package: unknown</h4>

<p id="324"><b>Arguments: </b><i>
stream </i>&amp;key <i>gzip</i><i>
</i></p>

<p id="325">
List, to <a href="../ansicl/dictentr/terminal.htm"><code>*terminal-io*</code></a>,
the contents of <b><i>stream</i></b>, which should be a
stream opened to a tar file. If <i>stream</i> is
compressed with gzip compression, specify a
non-<code>nil</code> value
for <b><i>gzip</i></b>. bzip2 compression is not
supported.
</p>

<hr>

<hr><h3 id="326"><a name="extract-tar-op-bookmarkxx"></a>extract-tar</h3><h3 id="327">Function</h3><h4 id="328">Package: unknown</h4>

<p id="329"><b>Arguments: </b><i>
stream </i>&amp;key <i>gzip directory verbose</i><i>
</i></p>

<p id="330">
Extract, to <b><i>directory</i></b>, the contents
of <b><i>stream</i></b>, which should be a stream opened
to a tar file. If <i>stream</i> is compressed with gzip
compression, specify a non-<code>nil</code> value
for <b><i>gzip</i></b>. bzip2 compression is not
supported. 
</p>
<p id="331">
<b><i>directory</i></b> defaults
to <code>nil</code>, which means extract to the current
directory (as returned by <a href="operators/excl/current-directory.htm"><b>current-directory</b></a>).
</p>
<p id="332">
If <b><i>verbose</i></b> is specified
non-<code>nil</code>, information about what is being done
will be printed.
</p>

<hr>



<hr><hr><h2 id="333"><a name="coverage-1">12.0 Coverage analysis in Allegro CL</a></h2>

<p id="334">
When testing a program, the coverage is a measure of how much of the
source code has actually been tested: have all branches of a
conditional been taken, have all defined functions been called, have
all error handlers been triggered, and so on (coverage is described in
Wikipedia <a href="http://en.wikipedia.org/wiki/Code_coverage">here</a>).
</p>
<p id="335">
Allegro CL has a macro, <a href="operators/excl/with-coverage.htm"><b>with-coverage</b></a>, which executes code and
when done, prints information about how well a specified list of
functions are excercised. The type of coverage, following the
description in the Wikipedia article linked to above, is statement
coverage, where "lines of code" is understood to mean Lisp
S-expressions.
</p>
<p id="336">
See the <a href="operators/excl/with-coverage.htm"><b>with-coverage</b></a> page
for further details and an example. Note that source file recording
must be on for the coverage tool to work.
</p>




<hr><hr><h2 id="337"><a name="format-checking-1">13.0 Checking format forms during compilation</a></h2>

<p id="338">
Allegro CL has a facility for checking <a href="../ansicl/dictentr/format.htm"><b>format</b></a> forms during compilation. What
is checked is whether there seem to be sufficient arguments in the
form for the format control string to be processed without error when
the form is evaluated at run time. If enabled, the facility will warn
when it detects that there are two few arguments, note when there are
too many arguments, and note when the control string is too complex
for analysis. (Having too many argument is not an error and is indeed
explicitly permitted by the ANS. However, if it is not what is
intended, it is useful to know that it has happened.)
</p>
<p id="339">
The analysis will occur when the
<a href="variables/compiler/verify-format-argument-count-switch.htm"><code>comp:verify-format-argument-count-switch</code></a>
is non-<code>nil</code> and not 0. This switch differs
from most compiler switches in that its value can be 0, 1, 2, 3, or 4
as well as <code>nil</code> (equivalent to 0)
and <code>t</code> (equivalent to 2). 
</p>
<p id="340">
Here is the behavior for the various values of the switch:
</p>
<ul>
<li id="341">
0 or <code>nil</code>: Collect no statistics, signal no
warning or compiler notes.
</li>
<li id="342">
<code>t</code>, 1, 2, 3, or 4: Collect statistics about
format argument counts compared to what is called for in format
strings; about format strings too complex to analyze; and about
syntactic errors in format forms.
</li>
<li id="343">
1: Gather statistics only. Signal no
warnings or compiler notes.
</li>
<li id="344">
<code>t</code> or 2: Gather statistics, signal
style-warning if not enough arguments.
</li>
<li id="345">
3: Like 2, but signal a compiler-note when too many arguments are
detected. (It is not an error to supply too many arguments, but a
compiler-note can be useful if that is not what is intended.)
</li>
<li id="346">
4: Like 3, but also signal a compiler-note when a format string is too
complex to analyse.
</li>
</ul>
<p id="347">
Statistics are only kept if the value of the
variable <a href="variables/excl/s_format-arg-count-stats_s.htm"><code>*format-arg-count-stats*</code></a> is a list of six
fixnums (representing all, missing args, args equal in number to
needed, args more than needed, too complex, and syntax error). These
numbers are incremented appropriately as format forms are
analysed. Warnings and compiler-notes are printed if the switch value
calls for them. The function <a href="operators/excl/format-arg-count-stats.htm"><b>format-arg-count-stats</b></a> prints the
collected statistics.
</p>



<hr><hr><h2 id="348"><a name="heap-walking-1">14.0 Heap walkers in Allegro CL</a></h2>

<p id="349">
A <i>heap walker</i> is a tool which examines the Lisp heap and
gathers information about it. The Lisp heap is where most Lisp objects
are stored. It comprises the old space and new spaces described in the
garbage collection document <a href="gc.htm">gc.htm</a>.
</p>
<p id="350">
The two built-in tools which walk the heap are <a href="operators/excl/get-objects.htm"><b>get-objects</b></a> and <a href="operators/excl/get-references.htm"><b>get-references</b></a>. Each returns a <i>heapwalk
vector</i>. This is a simple vector with element
type <code>t</code>, whose size depends on the number of
objects found. The first element of a heapwalk vector is the integer
number of objects of interest found). These objects are stored in the
vector elements after the first. The actual size of the vector is a
little bit bigger than strictly necessary to allow for including
objects created while the heap is being examined. Note that the
heapwalk vector itself is an object in the heap. It is persumably not
an object of interest (it did not even exist when <a href="operators/excl/get-objects.htm"><b>get-objects</b></a> or <a href="operators/excl/get-references.htm"><b>get-references</b></a> was called) so its existence
can skew the results slightly but unavoidably.
</p>
<p id="351">
The function get-objects takes a <i>code</i> as its
required argument and has keyword agguments <i>old</i>
and <i>new</i>. The keyword arguments default
to <code>t</code>. If
specified <code>nil</code>, that particular space will not
be searched. The <i>code</i> is the type code of a lisp
object.
</p>
<p id="352">
Type codes are shown in room output and also by the
function <a href="operators/excl/print-type-counts.htm"><b>print-type-counts</b></a>. (Neither lists all possible
type counts, just those for which at least one object of the
particular type exists.) Here is a (slightly truncated) output
of <code>(room t)</code>:
</p>

<pre id="353">
cl-user(2): (room t)
area area  address(bytes)        cons         other bytes
  #  type                   8 bytes each
                             (free:used)      (free:used)
     Top #x20d7a000
     New #x20994000(4087808)   916:15225     843936:3035024
     New #x205ae000(4087808)    -----            -----
   0 Old #x20000aa0(5952864)   711:78771    2098888:3209704
Root pages: 126
  Lisp heap:    #x20000000  pos: #x20d7a000 resrve: #x20fa0000
Aclmalloc heap: #xa0000000  pos: #xa0048000 resrve: #xa00fa000
 Pure space:    #x1f8ec000  end: #x1ffff888

code   type                                 items     bytes 
126: (simple-array (unsigned-byte 16))       10767   2153400 31.4%
112: (simple-array t)                         8891   1445976 21.1%
  1: cons                                    93996    751968 11.0%
  7: symbol                                  20360    651520  9.5%
  8: function                                 9681    602864  8.8%
133: sv-vector                               20549    340840  5.0%
120: (simple-array fixnum)                     259    270272  3.9%
119: (simple-array code)                       367    192064  2.8%
117: (simple-array character)                 2396    148960  2.2%
125: (simple-array (unsigned-byte 8))           19     98720  1.4%
 12: standard-instance                        3900     62400  0.9%
  9: closure                                  2897     50432  0.7%
 15: structure                                1159     47856  0.7%
127: (simple-array (unsigned-byte 32))          11     12744  0.2%
[...]

 total bytes = 6856032
aclmalloc arena:
[...]
</pre>

<p id="354">
Now we call <a href="operators/excl/get-objects.htm"><b>get-objects</b></a> on
type code 127, which is <code>(simple-array (unsigned-byte
32))</code>. There are eleven such objects, according to the list
printed by <a href="../ansicl/dictentr/room.htm"><b>room</b></a> (code 127 is
the last item before the list is truncated).
</p>

<pre id="355">
cl-user(3): (get-objects 127)
#(11 #(255 65535 16777215 4294967295) #(32 8224 2105376 538976288)
  #(3960924350 2165561044 562617442 2270225120 1264129478 758582028 172407450
    2782512936 595962478 1609675396 ...)
  #(0 2567483615)
  #(546914304 4087808 916 15225 529448960 536869000 553254912 536870912 843936
    3035024 ...)
  #(3960924350 2165561044 562617442 2270225120 1264129478 758582028 172407450
    2782512936 595962478 1609675396 ...)
  #(3960924350 2165561044 562617442 2270225120 1264129478 758582028 172407450
    2782512936 595962478 1609675396 ...)
  #(200235464 1375865383 2472949741 3729159793 443451277 421802134 4188904507
    2175392005 408067652 1254986169 ...)
  #(3960924350 2165561044 562617442 2270225120 1264129478 758582028 172407450
    2782512936 595962478 1609675396 ...)
  ...)
cl-user(4): (length *)
31
cl-user(5):
</pre>
<p id="356">
The result is a heapwalk vector. The first element is 11, the number
of objects of the type of interest. Then those eleven objects. Then
some extra elements (19 extra in this case, for a total vector size of
31).
</p>
<p id="357">
Once you have objects of a particular type, you can find references to
that object with
<a href="operators/excl/get-references.htm"><b>get-references</b></a>, which
returns a heapwalk vector filled with objects in the Lisp heap or in
lispstatic space which point directly to the object of interest. Note
that compound structures might not point to the object directly; for
example, if a list has an element within it, the first call to
get-references will return only the cons cell whose car is that
object; you would have to repeat the <a href="operators/excl/get-references.htm"><b>get-references</b></a> on that cons cell to find the
cons whose cdr points to it, and so on backward through the list until
you find a recognizable structure, symbol, or function that points to
the head of the list. The stack can be included in the search if
the <i>include-stacks</i> keyword argument to <a href="operators/excl/get-references.htm"><b>get-references</b></a> is specified true.
</p>
<p id="358">
Heapwalker vectors themselves point to lots of objects but are not
what you are looking for when you search for references. Therefore,
heapwalk vectors are marked and are not included in <a href="operators/excl/get-references.htm"><b>get-references</b></a> output.
</p>
<p id="359">
When using <a href="operators/excl/get-references.htm"><b>get-references</b></a>, note the following:
</p>
<ul>
  <li id="360">
    You should do a <code>(gc t)</code> (global gc) before you
start using this tool. Heapwalkers don't care if an object is dead or
not, so it may be that you are grabbing objects from the heap which
    would have otherwise been collected because it was dead.
  </li>
  <li id="361">
    <a href="../ansicl/dictentr/unnamed2.htm"><code>*</code></a>, <a href="../ansicl/dictentr/unnamed2.htm"><code>**</code></a>, and <a href="../ansicl/dictentr/unnamed2.htm"><code>***</code></a> are assigned results from previous
invocations of <a href="operators/excl/get-references.htm"><b>get-references</b></a>, so it is likely that one of
    them will be in the next result-vector.
      </li>
</ul>





<hr><hr><h2 id="362"><a name="json-rpc-1">15.0 The JSON-RPC API</a></h2>



<p id="363">
The JSON-RPC module depends on
the <a href="https://marijnhaverbeke.nl/st-json/">ST-JSON</a> open
source module. A compiled version of the module, the
file <i>st-json.fasl</i> is included with the Allegro CL
distribution and can be loaded with <code>(require
:st-json)</code>. You can download the sources and documentation
from github
at <a href="https://github.com/marijnh/ST-JSON">https://github.com/marijnh/ST-JSON</a>. ST-JSON
is a 'Common Lisp library for encoding and decoding JSON values (as
specified on <a href="http://json.org/">json.org</a>)' (quoting from
the ST-JSON home page). In what follows, we assume that module has
been downloaded and loaded in Allegro CL. The symbols in the ST-JSON
module (useful for manipulation JSON objects) are in
the <code>st-json</code> package.
</p>
<p id="364">
JSON-RPC is lightweight remote procedure call protocol similar to
XML-RPC. (See <a href="xml-rpc.htm">xml-rpc.htm</a> for information on the
XMP RPC interface in Allegro CL.)  The JSON-RPC module in Allegro CL
provides an API within Lisp to JSON-RPC.
</p>
<h3 id="365">
Package and module loading
</h3>
<p id="366">
Symbols naming functionality in the module are in
the <code>net.json.rpc</code> package. You load the module with
the following <a href="../ansicl/dictentr/provider.htm"><b>require</b></a>
form:
</p>

<pre id="367">
   (require :json-rpc)
</pre>

<p id="368">
The JSON-RPC module is initialized with the following function.
</p>

<hr><h3 id="369"><a name="init-json-rpc-op-bookmarkxx"></a>init-json-rpc</h3><h3 id="370">Function</h3><h4 id="371">Package: net.json.rpc</h4>

<p id="372"><b>Arguments: </b><i>
</i>&amp;key <i>client server converter methods global</i><i>
</i></p>

<p id="373">
This function initializes various JSON-RPC features.  The various
keyword arguments are described in later sections as they apply to
client or server operations.
</p>
<p id="374">
The <b><i>converter</i></b> keyword must be omitted,
<code>nil</code>, <code>:default</code>, or a
function of one argument. If omitted or <code>nil</code>,
there is no effect.
</p>
<p id="375">
When a function is specified, it must be a function that transforms a
string (denoting a JSON method or member name) to a corresponding Lisp
symbol, or Lisp symbol to a corresponding JSON name string. This
function is used in all cases where derived-symbol or derived-string
is specified.
</p>
<p id="376">
The value :default specifies a built-in function with the following
behavior.  This is the initial setting as well.
</p>
<p id="377">
Convert a string to a symbol or a symbol to a string using simple case
and hyphenation ruled:
</p>

<pre id="378">
       &quot;fooBarBaz&quot;  &lt;--&gt;  foo-bar-baz
</pre>

<p id="379">
This function will try to signal a warning when troublesome cases are
found.
</p>

<h3 id="380">
For servers
</h3>

<p id="381">
A
non-<code>nil</code> &nbsp; <b><i>server</i></b>
keyword argument specifies a default transport protocol for JSON-RPC
servers.  If the <b><i>global</i></b> argument
is <code>nil</code>, the only effect is to perform any
initialization required for the transport protocol (such as loading a
required fasl or library).  If the <b><i>global</i></b>
argument is non-<code>nil</code> (the default) then any
running JSON-RPC servers are stopped.
</p>
<p id="382">
When the <b><i>methods</i></b> keyword argument is
non-<code>nil</code>, all current JSON-RPC method
definitions are deleted, and any desired methods must be defined again
by evaluating or loading the defining forms.
</p>

<h3 id="383">
For clients:
</h3>

<p id="384">
A
non-<code>nil</code> &nbsp; <b><i>client</i></b>
argument specifies a default destination for client calls. If the
<b><i>global</i></b> argument
is <code>nil</code>, the only effect is to perform any
initialization required for the transport protocol (such as loading a
required fasl or library).  If the <b><i>global</i></b>
argument is non-<code>nil</code>, the value of
<a href="miscellaneous.htm#s_json-rpc-destination_s-var-bookmarkxx"><code>*json-rpc-destination*</code></a> is
updated.
</p>

<hr>

<hr><h2 id="385"><a name="jsonrpc-server-ops-2">15.1 JSON-RPC server operators and variables</a></h2>

<hr><h3 id="386"><a name="def-json-rpc-method-op-bookmarkxx"></a>def-json-rpc-method</h3><h3 id="387">Macro</h3><h4 id="388">Package: net.json.rpc</h4>

<p id="389"><b>Arguments: </b><i>
name bv </i> &amp;body <i>body</i><i>
</i></p>

<p id="390">
Defines a Lisp function that can be dispatched as the destination of
a JSON-RPC message to the server. The arguments are:
</p>
<p id="391">
<b><i>name</i></b>: the value can be
</p>
<ul>
<li id="392">
<b>a list</b> containing a symbol naming the function to be created, a
string naming the associated method, and options (discussed below). So
<pre id="393">
(def-json-rpc-method (s1 "method1") ...)
</pre>

<p id="394">
defines a Lisp function <b>s1</b> that is called when the server
received a JSON-RPC request where the method name is
"method1".
</p>
</li>
<li id="395">
<b>a symbol</b>: the function created will be named by the symbol and
the associated method will be the derived-string returned by the
converter function specified in <a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a>. So, using the
default converter function,

<pre id="396">
(def-json-rpc-method foo ...)
</pre>

<p id="397">
defines a Lisp function <b>foo</b> called when method "foo" is
invoked. Equivalent to
<code>(def-json-rpc-method (foo "foo") ...)</code>.
</p>
</li>
<li id="398">
<b>a string</b>: the method will be named by the string and the
associated Lisp function name will be the derived-symbol returned by
the converter function specified to <a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a>. So, using the
default converter function,


<pre id="399">
(def-json-rpc-method "fooBar" ...)
</pre>

<p id="400">
defines a Lisp function <b>foo-bar</b> called when method "fooBar" is
invoked. This is equivalent to <code>(def-json-rpc-method (foo-bar
"fooBar") ...)</code>
</p>
</li>
</ul>
<p id="401">
<b>options</b>: options may only be specified using the list value
for <b><i>name</i></b>. The options can name a set or
sets in which to include the method. If no set is named, the method is
part of all sets.
</p>
<p id="402">
The <b><i>bv</i></b> argument: the value should be a
list of one of the following forms:
</p>

<pre id="403">
([var]... [&rest tailvar] [&whole listvar])
</pre>

<p id="404">
The "params" member in the JSON message must be a JSON
array. Each <i>var</i> specifies a required element in
the array, and is bound in body to the corresponding array element.
</p>
<p id="405">
If &rest is present, additional arguments are allowed in the
array, and the list is bound to this tailvar. By-position methods are
dispatched by matching all methods without &rest first, then all
methods with &rest.  All methods are matched in order of decreasing
number of required args.
</p>

<pre id="406">
(&key [label]... [&allow-other-keys] [&whole wholevar])
</pre>

<p id="407">
The "params" member in the JSON message must be a JSON object. Here:
</p>

<pre id="408">
      label --&gt; (var member-name)
	    --&gt; symbol == (symbol derived-string)
	    --&gt; string == (derived-symbol string)
</pre>

<p id="409">
Each var is a keyword argument bound in body to the named member of
the object.  If &allow-other-keys is present, additional members are
ignored; they are accessed by the member name from the pointer bound
to wholevar.
</p>
<p id="410">
By-name methods are dispatched by matching methods without &allow-other-keys first.  
</p>
<p id="411">
In each group, the methods are ordered by decreasing number of
required members.  The member names are sorted lexicographically and
the signatures are sorted lexicographically within each set of equal
length.
</p>
<p id="412">
The dispatch strategy may cause some methods to be unreachable.  Some
unreachable methods may be detected at compile time, others may not.
</p>
<p id="413">
<b><i>body</i></b> returns one value, a JSON object or a
Lisp object that is converted to JSON by default rules, or the body
signals an error that is returned as a JSON error object.
</p>
<p id="414">
The same JSON method name may apply to several actual methods with
distinct signatures; the Lisp names of these methods must be
distinct (therefore only one can be a derived name).
</p>

<hr>

<hr><h3 id="415"><a name="s_json-rpc-redefinition-action_s-var-bookmarkxx"></a>*json-rpc-redefinition-action*</h3><h3 id="416">Variable</h3><h4 id="417">Package: net.json.rpc</h4>

<p id="418">
This variable specifies the behavior when <a href="miscellaneous.htm#def-json-rpc-method-op-bookmarkxx"><b>def-json-rpc-method</b></a> redefines a
JSON-RPC method or a one of the Lisp functions associated with the
method. The value can be:
</p>
<ul>
<li id="419">
<code>:warn</code> -- signal a Lisp warning.
</li>
<li id="420">
<code>:error</code> -- signal a Lisp error.
</li>
<li id="421">
<code>:allow-same</code> -- signal an error if the JSON name or
Lisp name differ.
</li>
<li id="422">
<code>:ignore</code> -- allow redefinitions silently.
</li>
</ul>
<p id="423">
The initial value is <code>:warn</code>.
</p>
<hr>

<hr><h3 id="424"><a name="start-json-rpc-server-op-bookmarkxx"></a>start-json-rpc-server</h3><h3 id="425">Function</h3><h4 id="426">Package: net.json.rpc</h4>

<p id="427"><b>Arguments: </b><i>
</i>&amp;key <i>transport export receive send &amp</i><i>
</i></p>

<p id="428">
Start a JSON-RPC server, or enhance an existing server with
JSON-RPC features.
</p>
<p id="429">
The <b><i>transport</i></b> argument specifies how
JSON-RPC messages will arrive. The format of the argument depends on
the nature of the transport.
</p>
<p id="430">
The inital implementation supports a simple stream or a web server
running AllegroServe.  The default for this argument can be specified
with <a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a>.  Additional
arguments are interpreted by specific transport implementations.
</p>
<p id="431">
The <b><i>receive</i></b> argument must be a list that
specifies the JSON-RPC versions accepted by the server.  The first
entry in the list is the default reply version.  The initial value is
<code>(:2.0 :1.0 :batch)</code>.  The
entry <code>:batch</code> specifies that batch requests will be
honored.
</p>
<p id="432">
The <b><i>send</i></b> argument specifies the version of
reply messages.  The value <code>:same</code> specifies that the
reply message will be the same version as the request message.
</p>
<p id="433">
The export argument is a string or symbol or a list of strings and/or
symbols.  A symbol denotes a Lisp function defined with
<a href="miscellaneous.htm#def-json-rpc-method-op-bookmarkxx"><b>def-json-rpc-method</b></a>, or a set of
methods specified with the <code>:rpc-set</code> option; if a
symbol denotes both a set and a function, the set definition prevails.
A string denotes a JSON-RPC method (in that case all Lisp names are
included).
</p>
<p id="434">
This function returns an object that can be used as the argument
to <a href="miscellaneous.htm#stop-json-rpc-server-op-bookmarkxx"><b>stop-json-rpc-server</b></a>.
</p>
<h3 id="435">
Simple stream transport:
</h3>
<p id="436">
The <b><i>transport</i></b> argument must
be <code>:stream</code> or a list <code>(:stream
stream-instance)</code>.  If the argument
is <code>:stream</code>, then a stream-instance must be
specified with a <code>:stream</code> keyword argument.  The
stream-instance must be subclass of <a href="classes/excl/dual-channel-simple-stream.htm"><code>dual-channel-simple-stream</code></a>.
</p>
<h3 id="437">
AllegroServe transport:
</h3>
<p id="438">
The <b><i>transport</i></b> argument must
be <code>:aserve</code> or a list <code>(:aserve
. aserve-start-options)</code>.
</p>
<p id="439">
Additional transport protocols may be defined in the future.
</p>

<hr>

<hr><h3 id="440"><a name="stop-json-rpc-server-op-bookmarkxx"></a>stop-json-rpc-server</h3><h3 id="441">Function</h3><h4 id="442">Package: net.json.rpc</h4>

<p id="443"><b>Arguments: </b><i>
</i>&amp;key <i>server</i><i>
</i></p>

<p id="444">
Stop a server. The server argument should be the return value of the
call to <a href="miscellaneous.htm#start-json-rpc-server-op-bookmarkxx"><b>start-json-rpc-server</b></a> that
started the server.
</p>

<hr>

<p id="445">
See the description of <a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a> for information on
initializing JSON-RPC for servers. A
non-nil <b><i>server</i></b> keyword argument to that
function specifies a default transport protocol for JSON-RPC servers.
If the <b><i>global</i></b> argument
is <code>nil</code>, the only effect is to perform any
initialization required for the transport protocol (such as loading a
required fasl or library).  If the <b><i>global</i></b>
argument is non-<code>nil</code> (the default) then any
running JSON-RPC servers are stopped.
</p>
<p id="446">
When the <b><i>methods</i></b> keyword argument to that
function is non-<code>nil</code>, all current JSON-RPC
method definitions are deleted, and any desired methods must be
defined again by evaluating or loading the defining forms.
</p>



<hr><h2 id="447"><a name="jsonrpc-client-ops-2">15.2 JSON-RPC client operators and variables</a></h2>

<hr><h3 id="448"><a name="s_json-rpc-destination_s-var-bookmarkxx"></a>*json-rpc-destination*</h3><h3 id="449">Variable</h3><h4 id="450">Package: net.json.rpc</h4>

<p id="451">
A destination where JSON-RPC call messages can be sent,
such as a URL.
</p>

<hr>

<hr><h3 id="452"><a name="s_json-rpc-call-version_s-var-bookmarkxx"></a>*json-rpc-call-version*</h3><h3 id="453">Variable</h3><h4 id="454">Package: net.json.rpc</h4>

<p id="455">
The default version for method calls from a client. The initial value is :2.0.
</p>

<hr>

<hr><h3 id="456"><a name="call-json-rpc-method-op-bookmarkxx"></a>call-json-rpc-method</h3><h3 id="457">Function</h3><h4 id="458">Package: net.json.rpc</h4>

<p id="459"><b>Arguments: </b><i>
method-name json-parameters </i>&amp;key <i>notification id destination version &amp</i><i>
</i></p>

<p id="460">
Call the server at <b><i>destination</i></b> with a
JSON-RPC message where <b><i>method-name</i></b> is the
method member and <b><i>json-parameters</i></b> is the
parameters member.
</p>
<p id="461">
Default destination is <a href="miscellaneous.htm#s_json-rpc-destination_s-var-bookmarkxx"><code>*json-rpc-destination*</code></a>.  Default
version is <a href="miscellaneous.htm#s_json-rpc-call-version_s-var-bookmarkxx"><code>*json-rpc-call-version*</code></a>.
</p>
<p id="462">
The <b><i>id</i></b> argument is used only in the scope
of a <a href="miscellaneous.htm#with-json-rpc-batch-op-bookmarkxx"><b>with-json-rpc-batch</b></a> expression.
It specifies an id value that can be used in the call to
<a href="miscellaneous.htm#json-rpc-batch-result-op-bookmarkxx"><b>json-rpc-batch-result</b></a>.
</p>
<p id="463">
Additional keywords are interpreted or ignored by methods specific
to a particular destination.
</p>
<p id="464">
Within the call body of a <a href="miscellaneous.htm#with-json-rpc-batch-op-bookmarkxx"><b>with-json-rpc-batch</b></a>, the
returned value is the unique JSON-RPC call id. In other contexts, the
returned value is the JSON-RPC
result. When <b><i>notification</i></b> is
non-<code>nil</code>, no value is returned in either case.
</p>

<hr>

<hr><h3 id="465"><a name="def-json-rpc-call-op-bookmarkxx"></a>def-json-rpc-call</h3><h3 id="466">Macro</h3><h4 id="467">Package: net.json.rpc</h4>

<p id="468"><b>Arguments: </b><i>
name bv </i>&amp;key <i>destination version notification id</i><i>
</i></p>

<p id="469">
This macro defines a Lisp function that will make a JSON-RPC call to a
JSON-RPC method.
</p>
<p id="470">
<b><i>name</i></b>: the value can be
</p>
<ul>
<li id="471">
<b>a list</b> containing a symbol naming the function to be created and a
string naming the associated method. So
<pre id="472">
(def-json-rpc-call (s1 "method1") ...)
</pre>

<p id="473">
defines a Lisp function <b>s1</b> that makes the call to a JSON-RPC
method named "method1".
</p>
</li>
<li id="474">
<b>a symbol</b>: the function created will be named by the symbol and
the associated method will be the symbol name. So

<pre id="475">
(def-json-rpc-method foo ...)
</pre>

<p id="476">
defines a Lisp function <b>foo</b> that makes the call to a JSON-RPC
method named "foo". Equivalent to
<code>(def-json-rpc-call (foo "foo") ...)</code>.
</p>
</li>
<li id="477">
<b>a string</b>: the method will be named by the string and the
associated Lisp function name will be derived from the string (by
replacing uppercase characters with the equivalent lowercase characters
preceded by a dash), so

<pre id="478">
(def-json-rpc-call "fooBar" ...)
</pre>

<p id="479">
defines a Lisp function <b>foo-bar</b> that makes the call to a
JSON-RPC method named "fooBar".  This is equivalent
to <code>(def-json-rpc-method (foo-bar "fooBar") ...)</code>
</p>
</li>
</ul>

<p id="480">
The <b><i>bv</i></b> argument: the value should be a
list of one of the following forms:
</p>

<pre id="481">
([var]... [&rest rvar])
</pre>

<p id="482">
The Lisp function expects arguments that get sent as a single JSON
array.  The argument names are ignored.
</p>


<pre id="483">
(&key label...  [&optional label...])
</pre>

<p id="484">
The Lisp function expects keyword arguments that are sent as members
of a JSON object. The labels before &optional specify required
keyword args.  The trailing labels specify optional keyword args. (We
ask the reader to excuse this deviant usage of the &optional marker)
</p>

<pre id="485">
      label --&gt; (keyword-name member-name)
	    --&gt; symbol == (symbol derived-string)
	    --&gt; string == (derived-symbol string)
</pre>

<hr>



<hr><h3 id="486"><a name="with-json-rpc-batch-op-bookmarkxx"></a>with-json-rpc-batch</h3><h3 id="487">Macro</h3><h4 id="488">Package: net.json.rpc</h4>

<p id="489"><b>Arguments: </b><i>
bv options callbody </i> &amp;rest <i>body</i><i>
</i></p>

<p id="490">
Call several JSON-RPC methods as a single batch call.
The options are passed to methods specific to the destination.
</p>
<p id="491">
The variables in <b><i>bv</i></b> are bound and visible
in <b><i>callbody</i></b> and
in <b><i>body</i></b>.
</p>
<p id="492">
The <b><i>callbody</i></b> expression is evaluated first
for its side-effects, and then any values are discarded. Any JSON-RPC
calls during this evaluation add to the content of a batch; the calls
themselves do not return a JSON result, instead, they return the
unique JSON-RPC id of the call in the batch.  The calls in the batch
are sent when the <a href="../ansicl/dictentr/progn.htm"><b>progn</b></a> exits.
</p>
<p id="493">
The expressions in <b><i>body</i></b> are evaluated as a
<a href="../ansicl/dictentr/progn.htm"><b>progn</b></a> after the result of the
batch call have arrived.  Within <b><i>body</i></b>, the
function <a href="miscellaneous.htm#json-rpc-batch-result-op-bookmarkxx"><b>json-rpc-batch-result</b></a> can be
called to extract the result of a specific call.
</p>

<hr>

<hr><h3 id="494"><a name="json-rpc-batch-result-op-bookmarkxx"></a>json-rpc-batch-result</h3><h3 id="495">Function</h3><h4 id="496">Package: net.json.rpc</h4>

<p id="497"><b>Arguments: </b><i>
id
</i></p>

<p id="498">
When called in the body of a <a href="miscellaneous.htm#with-json-rpc-batch-op-bookmarkxx"><b>with-json-rpc-batch</b></a> expression,
this function returns the result of the request with the
specified <b><i>id</i></b>.
The <b><i>id</i></b> argument can be the unique id
returned in the <i>callbody</i> of the
<a href="miscellaneous.htm#with-json-rpc-batch-op-bookmarkxx"><b>with-json-rpc-batch</b></a> expression,
or the local id specified in the JSON-RPC call.
</p>

<hr>

<p id="499">
When <a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a> is called with a
non-nil <b><i>client</i></b> argument, it specifies a
default destination for client calls. If
the <i>global</i> argument
is <code>nil</code>, the only effect is to perform any
initialization required for the transport protocol (such as loading a
required fasl or library).  If the <i>global</i>
argument is non-<code>nil</code>, the value of
<a href="miscellaneous.htm#s_json-rpc-destination_s-var-bookmarkxx"><code>*json-rpc-destination*</code></a> is
updated.
</p>



<hr><h2 id="500"><a name="jsonrpc-stream-trans-2">15.3 JSON-RPC built-in stream transport</a></h2>


<p id="501">
Application program must supply a stream to the server or the client.
The stream must be a <a href="classes/excl/dual-channel-simple-stream.htm"><code>dual-channel-simple-stream</code></a> instance such as a
socket or a pipe stream.
</p>
<p id="502">
In a call to <a href="miscellaneous.htm#start-json-rpc-server-op-bookmarkxx"><b>start-json-rpc-server</b></a>, the value
of the <b><i>transport</i></b> keyword argument must be
<code>:stream</code> or a list <code>(:stream
stream)</code>. An additional <b><i>stream</i></b>
keyword argument is accepted (so the stream to be used may be part of
a list value of <i>transport</i> or separately specified
as the value of <i>stream</i> argument). The stream must
be a <a href="classes/excl/dual-channel-simple-stream.htm"><code>dual-channel-simple-stream</code></a> instance.
</p>
<p id="503">
In a call to <a href="miscellaneous.htm#call-json-rpc-method-op-bookmarkxx"><b>call-json-rpc-method</b></a>, the value
of the <b><i>destination</i></b> argument must be a
stream.
</p>




<hr><h2 id="504"><a name="jsonrpc-aserve-trans-2">15.4 JSON-RPC built-in allegroserve transport</a></h2>

<p id="505">
To use the JSON-RPC module with AllegroServe, you must load the
:json-rpc-aserve module:
</p>

<pre id="506">
(require :json-rpc-aserve)
</pre>

<p id="507">
In calls to <a href="miscellaneous.htm#start-json-rpc-server-op-bookmarkxx"><b>start-json-rpc-server</b></a>,
the <b><i>transport</i></b> argument must be either
<code>:aserve</code> or the dotted list <code>(:aserve
. start-arguments)</code> or
a <code>net.aserve:wserver</code> instance.
</p>
<p id="508">
Additional accepted keyword arguments include:   
</p>

<pre id="509">
:url "/json-rpc"   
:content-type "text/html"
:publish additional-publish-args
</pre>

<p id="510">
In a call to <a href="miscellaneous.htm#call-json-rpc-method-op-bookmarkxx"><b>call-json-rpc-method</b></a>, the value
of the <b><i>destination</i></b> argument must be a uri
string or a <a href="classes/uri/uri.htm"><code>net.uri:uri</code></a> instance.
</p>



<hr><h2 id="511"><a name="jsonrpc-new-trans-2">15.5 JSON-RPC: how to add a new transport method</a></h2>

<p id="512">
The steps for adding a new transport method are:
</p>
<ol>
<li id="513">
Choose a new keyword to identify the method.
</li>
<li id="514">
Define a subclass of <a href="miscellaneous.htm#json-rpc-server-class-bookmarkxx"><code>json-rpc-server</code></a>.
</li>
<li id="515">
Push the entry <code>(keyword class-name)</code> onto
<a href="miscellaneous.htm#s_json-rpc-transports_s-var-bookmarkxx"><code>*json-rpc-transports*</code></a>.
</li>
<li id="516">
When the method is loaded, maybe setq <a href="miscellaneous.htm#s_json-rpc-transport_s-var-bookmarkxx"><code>*json-rpc-transport*</code></a> to the
keyword (or a list starting witht he keyword).  This is used as the
default <b><i>transport</i></b> argument to
<a href="miscellaneous.htm#start-json-rpc-server-op-bookmarkxx"><b>start-json-rpc-server</b></a>.
</li>
<li id="517">
Define a method for <a href="miscellaneous.htm#start-json-rpc-server-implementation-op-bookmarkxx"><b>start-json-rpc-server-implementation</b></a>
specialized on the new server class, to initialize the server and
instance. 
The server calls <a href="miscellaneous.htm#json-rpc-dispatch-op-bookmarkxx"><b>json-rpc-dispatch</b></a> when it has
parsed a complete JSON-RPC request. The result
is <code>nil</code>, or a fully formed JSON-RPC reply
message.  If the result is <code>nil</code>, the message
was a notification or an array consisting entirely of notifications;
in that case the server does nothing. If the result is
not <code>nil</code>, the server must send the reply
message to the client; the ST-JSON package includes several methods to
serialize a JSON object for transmission if the transport method uses
characters.
</li>
<li id="518">
Define a method for <a href="miscellaneous.htm#json-rpc-stop-transport-op-bookmarkxx"><b>json-rpc-stop-transport</b></a>.
</li>
<li id="519">
Define a distinct type for client destination.
Reserved types are string, uri, and stream. 
</li>
<li id="520">
Define a method for <a href="miscellaneous.htm#json-rpc-send-message-op-bookmarkxx"><b>json-rpc-send-message</b></a>
specialized on that type.
</li>
</ol>
<p id="521">
As an example, this very trivial implementation assumes the client and
server are in the same address space:
</p>

<pre id="522">

(defclass local-server (json-rpc-server) ())
(push (list :local 'local-server) *json-rpc-transports*)

(defmethod start-json-rpc-server-implementation 
     ((server local-server) &key &allow-other-keys)
   ())

(defmethod json-rpc-send-message ((server local-server) message notification)
   (declare (ignore notification))
   (json-rpc-dispatch server message)
</pre>

<p id="523">
Here are the descriptions of some of the needed functionality.
</p>

<hr><h3 id="524"><a name="json-rpc-server-class-bookmarkxx"></a>json-rpc-server</h3><h3 id="525">Class</h3><h4 id="526">Package: net.json.rpc</h4>

<p id="527">
This class used in defining a new transport method.
This class must be a superclass of any new transport server.
</p>

<hr>

<hr><h3 id="528"><a name="s_json-rpc-transports_s-var-bookmarkxx"></a>*json-rpc-transports*</h3><h3 id="529">Variable</h3><h4 id="530">Package: net.json.rpc</h4>

<p id="531">
This variable is used in defining a new transport method.
The value of this variable is a list of the form
</p>

<pre id="532">
((transport-keyword name-of-server-class) ... )
</pre>

<p id="533">
Additional entry formats may be defined in the future.
</p>

<hr>

<hr><h3 id="534"><a name="s_json-rpc-transport_s-var-bookmarkxx"></a>*json-rpc-transport*</h3><h3 id="535">Variable</h3><h4 id="536">Package: net.json.rpc</h4>

<p id="537">
This variable is used in defining a new transport method.  The value
of this variable is the default transoprt method for JSON-RPC
calls. This must be a transport name keyword or a list beginning with
such a keyword.  The tail of the list contains additional
transport-specific arguments.
</p>

<hr>


<hr><h3 id="538"><a name="start-json-rpc-server-implementation-op-bookmarkxx"></a>start-json-rpc-server-implementation</h3><h3 id="539">Generic Function</h3><h4 id="540">Package: net.json.rpc</h4>

<p id="541"><b>Arguments: </b><i>
server </i> &amp;rest <i>options</i><i>
</i>&amp;key <i>&amp</i><i>
</i></p>

<p id="542">
This method must be implemented when defining a new transport method.
Keyword arguments provide transport-specific inital values.  This
method is called after the server instance is created and initialized
at the <a href="miscellaneous.htm#json-rpc-server-class-bookmarkxx"><code>json-rpc-server</code></a> level.
</p>

<hr>

<hr><h3 id="543"><a name="json-rpc-stop-transport-op-bookmarkxx"></a>json-rpc-stop-transport</h3><h3 id="544">Generic Function</h3><h4 id="545">Package: net.json.rpc</h4>

<p id="546"><b>Arguments: </b><i>
server
</i></p>

<p id="547">
This method must be implemented when defining a new transport method.
This method is called before any generic <a href="miscellaneous.htm#json-rpc-server-class-bookmarkxx"><code>json-rpc-server</code></a> shutdown
operations are performed.
</p>

<hr>

<hr><h3 id="548"><a name="json-rpc-send-message-op-bookmarkxx"></a>json-rpc-send-message</h3><h3 id="549">Generic Function</h3><h4 id="550">Package: net.json.rpc</h4>

<p id="551"><b>Arguments: </b><i>
destination message notification
</i> &amp;rest <i>options</i><i>
</i>&amp;key <i>&amp</i><i>
</i></p>

<p id="552">
This method, specialized on a new destination type, must be
implemented when defining a new transport method.  The message
argument is a jso instance formatted for the specified JSON-RPC
version.  The <b><i>notification</i></b> argument
is <code>t</code> for a notification or for a batch
consiting entirely of notifications.
</p>
<p id="553">
The <b><i>options</i></b> argument will contain all the
options specified in the call to <a href="miscellaneous.htm#call-json-rpc-method-op-bookmarkxx"><b>call-json-rpc-method</b></a>.
</p>

<hr>

<hr><h3 id="554"><a name="json-rpc-dispatch-op-bookmarkxx"></a>json-rpc-dispatch</h3><h3 id="555">Function</h3><h4 id="556">Package: net.json.rpc</h4>

<p id="557"><b>Arguments: </b><i>
server message
</i></p>

<p id="558">
This function is called from the body of a
<a href="miscellaneous.htm#start-json-rpc-server-implementation-op-bookmarkxx"><b>start-json-rpc-server-implementation</b></a>
method for a new transport
method. The <b><i>server</i></b> argument is the server
argument passed to this method, and
the <b><i>message</i></b> argument is a parsed JSON-RPC
message received by the server.
</p>
<p id="559">
This function returns <code>nil</code> if the message was
a notification or an array consisting entierly of notifications.
Otherwise, this function returns a JSON-RPC reply object that contains
the result(s) of the message.
</p>


<hr>



<hr><h2 id="560"><a name="jsonrpc-example-2">15.6 JSON-RPC: examples</a></h2>

<p id="561">
To call a method with positional args to add two numbers:
</p>

<pre id="562">
;; Server def:

(def-json-rpc-method &quot;adder&quot; (x y) (+ x y))

;; Client call:

(call-json-rpc-method &quot;adder&quot; (list 2 5)) 
;; ==&gt; 7
</pre>

<p id="563">
The client can also define a Lisp function that makes this call
</p>

<pre id="564">
(def-json-rpc-call (json-add &quot;adder&quot;) (x y))

(json-add 2 5) 
;;  ==&gt; 7
</pre>

<p id="565">
To call a json-rpc method with named args:
</p>

<pre id="566">
;; Server def:

(def-json-rpc-method &quot;combineMembers&quot; (&amp;key (p1 &quot;part1&quot;) (p2 &quot;part2&quot;))
    (jso &quot;combined&quot; (append p1 p2)))

;; Client call:

(setq r (call-json-rpc-method &quot;combineMembers&quot;
     (jso &quot;part1&quot; (list 2 4) &quot;part2&quot; (list 6 8))))
;;  ==&gt; jso instance
(getjso &quot;combined&quot; r) 
;;  ==&gt; (2 4 6 8)

;; or

(def-json-rpc-call (jappend &quot;combine-members&quot;)
        (&amp;key (m1 &quot;part1&quot;) (m2 &quot;part2&quot;)))

(setq r (jappend :m1 (list 2 4) :m2 (list 6 8)))
(getjso &quot;combined&quot; r) 
;; ==&gt; (2 4 6 8)
</pre>



<hr><h2 id="567"><a name="jsonrpc-index-2">15.7 JSON-RPC: functionality index</a></h2>

<ul> 
<li id="568"> 
<a href="miscellaneous.htm#call-json-rpc-method-op-bookmarkxx"><b>call-json-rpc-method</b></a>
(function)
</li>
<li id="569"> 
<a href="miscellaneous.htm#def-json-rpc-call-op-bookmarkxx"><b>def-json-rpc-call</b></a> (macro)
</li>
<li id="570"> 
<a href="miscellaneous.htm#def-json-rpc-method-op-bookmarkxx"><b>def-json-rpc-method</b></a>
(macro)
</li>
<li id="571"> 
<a href="miscellaneous.htm#init-json-rpc-op-bookmarkxx"><b>init-json-rpc</b></a> (function)
</li>
<li id="572"> 
<a href="miscellaneous.htm#json-rpc-batch-result-op-bookmarkxx"><b>json-rpc-batch-result</b></a>
(function)
</li>
<li id="573"> 
<a href="miscellaneous.htm#s_json-rpc-call-version_s-var-bookmarkxx"><code>*json-rpc-call-version*</code></a>
(variable)
</li>
<li id="574"> 
<a href="miscellaneous.htm#s_json-rpc-destination_s-var-bookmarkxx"><code>*json-rpc-destination*</code></a>
(variable)
</li>
<li id="575"> 
<a href="miscellaneous.htm#json-rpc-dispatch-op-bookmarkxx"><b>json-rpc-dispatch</b></a>
(function) 
</li>
<li id="576">
<a href="miscellaneous.htm#s_json-rpc-redefinition-action_s-var-bookmarkxx"><code>*json-rpc-redefinition-action*</code></a>
(variable)
</li>
<li id="577"> 
<a href="miscellaneous.htm#json-rpc-send-message-op-bookmarkxx"><b>json-rpc-send-message</b></a>
(generic function)
</li> 
<li id="578"> 
<a href="miscellaneous.htm#json-rpc-server-class-bookmarkxx"><code>json-rpc-server</code></a> (class)
</li>
<li id="579"> 
<a href="miscellaneous.htm#json-rpc-stop-transport-op-bookmarkxx"><b>json-rpc-stop-transport</b></a>
(generic function) 
</li>
<li id="580"> 
<a href="miscellaneous.htm#s_json-rpc-transport_s-var-bookmarkxx"><code>*json-rpc-transport*</code></a>
(variable)
</li>
<li id="581"> 
<a href="miscellaneous.htm#s_json-rpc-transports_s-var-bookmarkxx"><code>*json-rpc-transports*</code></a>
(variable)
</li>
<li id="582"> 
<a href="miscellaneous.htm#start-json-rpc-server-op-bookmarkxx"><b>start-json-rpc-server</b></a>
(function)
</li>
<li id="583">
<a href="miscellaneous.htm#start-json-rpc-server-implementation-op-bookmarkxx"><b>start-json-rpc-server-implementation</b></a>
(generic-function)
</li> 
<li id="584"> 
<a href="miscellaneous.htm#stop-json-rpc-server-op-bookmarkxx"><b>stop-json-rpc-server</b></a>
(generic function)
</li> 
<li id="585">
<a href="miscellaneous.htm#with-json-rpc-batch-op-bookmarkxx"><b>with-json-rpc-batch</b></a>
(macro) 
</li>
</ul>






<hr><hr><h2 id="586"><a name="web-sock-1">16.0 Websocket API</a></h2>

<p id="587">
The websocket module implements the websocket protocol specified in
<a href="https://tools.ietf.org/html/rfc6455">RFC 6455</a>. This
document describes the Lisp functionality that support this
specification; it is not a websocket tutorial by any measure. Many
websocket tutorials are available on the web; the Mozilla Firefox
tutorials
at <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a>
is one starting point.
</p>
<p id="588">
This module implements both a server and a client API. Extensions are
not implemented at this time, but protocol and extension negotiation
is performed in the initial handshake, and extension data are parsed
and transmitted correctly in websocket message payloads.
</p>
<p id="589">
The module is included in a running Lisp with the expression
</p>

<pre id="590">
(require :websocket)
</pre>

<p id="591">
The module requires the AllegroServe component and includes the
necessary calls to <a href="../ansicl/dictentr/provider.htm"><b>require</b></a>. Most of the documented symbols
are in the <code>net.aserve</code> package. Symbols specific to
the client API are in the <code>net.aserve.client</code>
package.
</p>


<hr><h2 id="592"><a name="websock-server-func-2">16.1 Websocket server functionality</a></h2>

<p id="593">
The main server operator is <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a>.
</p>

<hr><h3 id="594"><a name="publish-websocket-op-bookmarkxx"></a>publish-websocket</h3><h3 id="595">Function</h3><h4 id="596">Package: net.aserve</h4>

<p id="597"><b>Arguments: </b><i>
</i>&amp;key <i>path host port content-type format server authorizer timeout hook headers remove on-open on-message on-close on-error on-ping on-pong on-idle on-fragment</i> (<i>class</i> (quote net.aserve:websocket-message-entity))<i> contract-class plist protocols extensions origins debug ply close-timeout fragment-size ping-interval</i><i>
</i></p>

<p id="598">
This function enables a websocket service in an AllegroServe web server.
It has many keyword arguments, which are divided into three groups:
</p>
<h3 id="599">
Group 1: Arguments that are passed unchanged to the
AllegroServe publish function
</h3>
<ul>
<li id="600">
<b><i>path</i></b>
</li>
<li id="601">
<b><i>host</i></b>
</li>
<li id="602">
<b><i>port</i></b>
</li>
<li id="603">
<b><i>content-type</i></b>
</li>
<li id="604">
<b><i>format</i></b>
</li>
<li id="605">
<b><i>server</i></b>
</li>
<li id="606">
<b><i>authorizer</i></b>
</li>
<li id="607">
<b><i>timeout</i></b>
</li>
<li id="608">
<b><i>hook</i></b>
</li>
<li id="609">
<b><i>headers</i></b>
</li>
<li id="610">
<b><i>remove</i></b>
</li>
</ul>
<p id="611">
See the description of the AllegroServe publish function
in <a href="aserve/aserve.html">aserve/aserve.html</a>
for details on these arguments.
</p>
<h3 id="612">
Group 2: This group of arguments specify event handlers for messages
</h3>
<p id="613">
The value of these arguments must be <code>nil</code> or
an appropriate function which accepts the specified number of
arguments. See <a href="#ws-event-handlers-2">Section 16.3 Websocket event handlers</a> for
further information. The names of these arguments
are: <b><i>on-open</i></b>,
<b><i>on-message</i></b>,
<b><i>on-close</i></b>, <b><i>on-error</i></b>,
<b><i>on-ping</i></b>, <b><i>on-pong</i></b>,
<b><i>on-idle</i></b>,
and <b><i>on-fragment</i></b>.
</p>
<h3 id="614">
Group 3: Other arguments specific to this function
</h3>
<ul>
<li id="615">
<b><i>class</i></b>: this argument allows a programmer
to specialize the websocket methods on a class specific to an
application. If specified, this argument must be the name of a
subclass of <a href="miscellaneous.htm#websocket-entity-class-bookmarkxx"><code>websocket-entity</code></a>. The
default (and only implemented class) is <a href="miscellaneous.htm#websocket-message-entity-class-bookmarkxx"><code>websocket-message-entity</code></a>.
</li>
<li id="616">
<b><i>contract-class</i></b>: when specified, this
argument must be the name of a subclass of <a href="miscellaneous.htm#websocket-message-server-contract-class-bookmarkxx"><code>websocket-message-server-contract</code></a>.
</li>
<li id="617">
<b><i>plist</i></b>: this argument is stored unchanged in
the entity instance. It allows a program to pass private data to
request handlers.
</li>
<li id="618">
<b><i>protocols</i></b>: a list of protocol names
supported by this endpoint. Each item in the list can be a string or
symbol naming a protocol. In the current implementation, protocol
names are compared in the initial handshake as specified in the
protocol, but there is currently no other effect on the behavior.
</li>
<li id="619">
<b><i>extensions</i></b>: a list of extension names
supported by this endpoint. Each item in the list can be a string or
symbol naming an extension available in all protocols. An item can
also be a list where the first element is a protocol name and the
remaining elements are extensions that apply only to this protocol.
<p id="620">
In the current implementation, extension names are compared in the 
initial handshake as specified in the protocol, but there is
currently no other effect on the behavior.
</p>
</li>
<li id="621">
<b><i>origins</i></b>: a list of strings that are
matched to the standard HTTP Origin header in the initial HTTP
request. If the list is empty, all requests are accepted, and the
Origin header is ignored. If the list begins with a string, then
requests without an Origin header are accepted, requests with an
Origin header are accepted if the header value matches one in the
list. If the list begins with the keyword <code>:only</code>,
then only requests with a matching Origin header are accepted.
</li>
<li id="622">
<b><i>debug</i></b>: a reserved argument for support
interactions with customer problems. Do not specify a value unless
instructed to do so as part or resolving a problem report.
</li>
<li id="623">
<b><i>ply</i></b>: this argument specifies the threading
behavior of the websocket support code. The value can be:
<ul>
<li id="624">
<code>nil</code>, 0, or 1: all server code in response to
a websocket connection runs in the AllegroServe worker thread that
handled the initial connection. The default value is 1.
</li>
<li id="625">
2: Receiving of messages and event handlers run in the AllegroServe
worker thread that handled the initial connection. Outgoing messages
are queued and sent by a separate thread.
</li>
<li id="626">
3: Currently the same as 2.
</li>
</ul>
</li>
<li id="627">
<a name="arg-close-timeout"></a>
<b><i>close-timeout</i></b>: the default timeout value
for <a href="miscellaneous.htm#close-websocket-op-bookmarkxx"><b>close-websocket</b></a> (a positive real
number, units are seconds). The default is 5 meaning 5 seconds.
</li>
<li id="628">
<a name="arg-fragment-size"></a>
<b><i>fragment-size</i></b>:
when <code>nil</code>, there is no automatic fragmentation
of messages. If specified, the value must be a positive integer and
messages are fragmented to this maximum fragment size. Text fragment
size may vary to accomodate complete UTF-8 octet sequences in each
fragment (this behavior is not required by the websocket
specification, but should make life much easier between Allegro CL
clients and Allegro CL servers. Binary fragments will all be the
specified size, except possibly the last one.
</li>
<li id="629">
<a name="arg-ping-interval"></a>
<b><i>ping-interval</i></b>: when
non-<code>nil</code> the value must be a positive real
number. Ping messages will be sent repeatedly with an interval
approximately that number of seconds. The application payload in the
message will be the string
<pre id="630">
       "Heartbeat ping at xxxxxxx"
</pre>
<p id="631">
where <i>xxxxxx</i> is the ISO 8601 time string for the time when the
ping was sent.
</p>
</li>
</ul>

<hr>



<hr><h2 id="632"><a name="websock-client-func-2">16.2 Websocket client functionality</a></h2>

<p id="633">
Symbols naming websocket client functionality are in
the <code>net.aserve.client</code> package.
</p>

<hr><h3 id="634"><a name="open-websocket-op-bookmarkxx"></a>open-websocket</h3><h3 id="635">Function</h3><h4 id="636">Package: net.aserve.client</h4>

<p id="637"><b>Arguments: </b><i>
</i>&amp;key <i>cookies proxy proxy-basic-authorization basic-authorization digest-authorization query user-agent ssl on-open on-message on-close on-error on-ping on-pong on-idle on-fragment headers class ply protocols extensions close-timeout fragment-size ping-interval</i><i>
</i></p>

<p id="638">
This function opens a websocket connection to a server to enable
sending and receiving websocket messages. The function operates in two
modes depending on the specified threading behavior, as specified by
the <i>ply</i> keyword argument. In one mode the
function returns a websocket instance that is used subsequently to
perform operations on this connection.  In the other mode, the
function returns only after the connection is terminated; all
application actions take place in event handlers.
</p>
<p id="639">
The arguments to this function are divided into four groups: 
</p>
<ol>
<li id="640">
Arguments passed unchanged to the aserve
function <b>make-http-client-request</b>. See <a href="#owg1">here</a>.
</li>
<li id="641">
Event handling arguments. See <a href="#owg2">here</a>.
</li>
<li id="642">
Arguments specific to this function. See <a href="#owg3">here</a>.
</li>
<li id="643">
Arguments that are the same as arguments to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a>. 
See <a href="#owg4">here</a>.
</li>
</ol>
<h3 id="644">
<a name="owg1"></a>Group 1: arguments passed to make-http-client-request
</h3>
<p id="645">
This first argument group, which includes the following arguments, are
passed unchanged to the AllegroServe
function <b>net.aserve-client:make-http-client-request</b>:
</p>
<ul>
<li id="646">
<b><i>cookies</i></b>
</li>
<li id="647">
<b><i>proxy</i></b>
</li>
<li id="648">
<b><i>proxy-basic-authorization</i></b>
</li>
<li id="649">
<b><i>basic-authorization</i></b>
</li>
<li id="650">
<b><i>digest-authorization</i></b>
</li>
<li id="651">
<b><i>query</i></b>
</li>
<li id="652">
<b><i>user-agent</i></b>
</li>
<li id="653">
<b><i>ssl</i></b>
</li>
</ul>
<h3 id="654">
<a name="owg2"></a>Group 2: arguments which specify event handlers
</h3>
<p id="655">
The second group of arguments are event handlers. The value of these
arguments must be <code>nil</code> or an appropriate
function which accepts the specified number of
arguments. See <a href="#ws-event-handlers-2">Section 16.3 Websocket event handlers</a> for
further information. The names of these arguments
are: <b><i>on-open</i></b>,
<b><i>on-message</i></b>,
<b><i>on-close</i></b>, <b><i>on-error</i></b>,
<b><i>on-ping</i></b>, <b><i>on-pong</i></b>,
<b><i>on-idle</i></b>,
and <b><i>on-fragment</i></b>.
</p>
<h3 id="656">
<a name="owg3"></a>Group 3: argument specific to this function
</h3>
<ul>
<li id="657">
<b><i>headers</i></b>: these headers are appended to the
websocket protocol headers.
</li>
<li id="658">
<b><i>class</i></b>: when specified, this argument must
be the name of a subclass of <a href="miscellaneous.htm#websocket-message-client-contract-class-bookmarkxx"><code>websocket-message-client-contract</code></a>.
</li>
<li id="659">
<b><i>ply</i></b>: this argument specifies the threading
behavior of the websocket support code. The value must be a positive
integer or <code>nil</code>. The arguments are interpreted
as follows:
<ul>
<li id="660">
0 or <code>nil</code>: the function call
returns only after the connection is terminated. All application
actions take place in event handlers. Receiving and sending of
messages takes place in the same thread.
</li>
<li id="661">
1: the function returns as soon as a
connection is established. The function returns a
<a href="miscellaneous.htm#websocket-contract-class-bookmarkxx"><code>websocket-contract</code></a>
instance that is used as an argument in subsequent websocket calls by
the application. One new thread is created to handle both receiving
and sending of messages.
</li>
<li id="662">
2 (the default): same as the value 1 except two threads are created,
one to receive messages and one to send messages.
</li>
<li id="663">
3 or larger: reserved for future use.
</li>
</ul>
</li>
<li id="664">
<b><i>protocols</i></b>: specifies the desired
protocol. The value may be <code>nil</code> (the default),
a string, a symbol, or a list of strings or symbols. The
value <code>nil</code> means the client is requesting the
basic unmodified websocket protocol. When given a
non-<code>nil</code> value, the server will choose the
first supported protocol in the list.  If the server was unable to
negotiate a protocol, the connection is closed and an error is
signaled. The negotiated protocol is queried with
<a href="miscellaneous.htm#websocket-protocol-op-bookmarkxx"><b>websocket-protocol</b></a>.
</li>
<li id="665">
<b><i>extensions</i></b>: this argument specifies the
desired extensions. Value must be a list of strings or symbols.  If
the server returns extensions not in this list, the connection is
closed and an error is signaled. Otherwise, the negotiated extensions
are a subset of the requested extensions. The negotiated extensions
are queried with <a href="miscellaneous.htm#websocket-extensions-op-bookmarkxx"><b>websocket-extensions</b></a>.
</li>
</ul>
<h3 id="666">
<a name="owg4"></a>Group 4: arguments identical to publish-websocket arguments
</h3>
<p id="667">
These final arguments are the same as the identically named arguments
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a>. See that
description for details. For each argument, there is a link to the
description in the <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> documentation.
</p>
<ul>
<li id="668">
<b><i>close-timeout</i></b>: see
the <i>close-timeout</i> argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> described
<a href="#arg-close-timeout">here</a>.
</li>
<li id="669">
<b><i>fragment-size</i></b>: see
the <i>fragment-size</i> argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> described
<a href="#arg-fragment-size">here</a>.
</li>
<li id="670">
<b><i>ping-interval</i></b>: see
the <i>ping-interval</i> argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> described
<a href="#arg-ping-interval">here</a>.
</li>
</ul>

<hr>

<hr><h3 id="671"><a name="close-websocket-op-bookmarkxx"></a>close-websocket</h3><h3 id="672">Generic Function</h3><h4 id="673">Package: net.aserve.client</h4>

<p id="674"><b>Arguments: </b><i>
contract
</i>&amp;key <i>code message wait</i><i>
</i></p>
<p id="675">
This generic function can be specialized on the contract argument. A
method is predefined on the class <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a>. This
method begins and possibly waits for the completion of a closing
handshake on the websocket connection specified by contract.
</p>
<p id="676">
The keyword arguments are:
</p>
<ul>
<li id="677">
<b><i>code</i></b>: this argument specifies the status
code that will be sent to the server. The default value is 1000.
</li>
<li id="678">
<b><i>message</i></b>: this argument must
be <code>nil</code> or a string. If a string, the text is
included in the closing message sent to the server.  The text is
transmitted as UTF-8 octets. The text is truncated if the UTF-8
representation is longer than 125 octets.
</li>
<li id="679">
<b><i>wait</i></b>: if <code>nil</code>, the
function initiates the closing handshake and
returns <code>nil</code>. If an integer greater than zero,
wait that many seconds for completion; if not completed in that
interval, return 2 values, <code>nil</code>
and <code>:timeout</code>. If another
non-<code>nil</code> value, then wait indefinitely (such
values are <b>not</b> recommended). If omitted, the default is the
<i>close-timeout</i> value in the contract.
</li>
</ul>
<p id="680">
On successful completion, the method returns two values: the status code
sent by the server and a string containing the message text if any.
</p>

<hr>



<hr><h2 id="681"><a name="ws-event-handlers-2">16.3 Websocket event handlers</a></h2>

<p id="682">
Event handlers are application functions (written by the application
programmer) called by a websocket implementation when specified
messages arrive at the endpoint. The functions are specified by the
corresponding keyword arguments to
<a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a>
and <a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a>.
</p>
<p id="683">
The first argument is in all cases the instance of
<a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a>
specific to the current websocket connection.
</p>


<hr><h3 id="684"><a name="on-message-op-bookmarkxx"></a>on-message</h3><h3 id="685">Function</h3><h4 id="686">Package: net.aserve</h4>

<p id="687"><b>Arguments: </b><i>
contract data ext
</i></p>

<p id="688">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-message</b>) or the
associated function object should be passed as the value of
the <b><i>on-message</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="689">
This function is called when an endpoint receives a complete message.
When the message is a text message,
the <b><i>data</i></b>
and <b><i>ext</i></b> arguments
are <code>nil</code> or strings.
</p>
<p id="690">
When the message is a binary message,
the <b><i>data</i></b>
and <b><i>ext</i></b> arguments
are <code>nil</code> or arrays of octets.
</p>

<hr>

<hr><h3 id="691"><a name="on-fragment-op-bookmarkxx"></a>on-fragment</h3><h3 id="692">Function</h3><h4 id="693">Package: net.aserve</h4>

<p id="694"><b>Arguments: </b><i>
contract message-contract in-message ftype appdata ext
</i></p>

<p id="695">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-fragment</b>) or the
associated function object should be passed as the value of
the <b><i>on-fragment</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>

<p id="696">
When this function is specified, it is called for every message
fragment.
</p>
<p id="697">
If the function returns <code>nil</code>, it must
return <code>nil</code> for every fragment in a single
message, and the fragments are collected and handled as if no function
was specified. The function is used simply to note the passing of
fragments. The <a href="miscellaneous.htm#on-message-op-bookmarkxx"><b>on-message</b></a> function is called
after the final fragment has been collected.
</p>
<p id="698">
If the function returns a non-<code>nil</code> value,
it must return a non-<code>nil</code> value for every
fragment in a single message.  The function is responsible for
collecting and handling the content of the message.  The
<a href="miscellaneous.htm#on-message-op-bookmarkxx"><b>on-message</b></a> function is not
called for that message.
</p>
<p id="699">
If the <a href="miscellaneous.htm#on-fragment-op-bookmarkxx"><b>on-fragment</b></a> function returns an
inconsistent sequence of values, the results are unspecified.
</p>
<p id="700">
The <b><i>in-message</i></b> argument is one of the
keywords <code>:text</code> or <code>:binary</code>.
</p>
<p id="701">
The <b><i>ftype</i></b> argument is one of the
keywords <code>:only</code>, <code>:first</code>,
<code>:continuation</code>, or <code>:final</code>.
</p>
<p id="702">
The <b><i>appdata</i></b>
and <b><i>ext</i></b> arguments are
always <code>nil</code> or arrays
of <code>(unsigned-byte 8)</code> elements. Note that when
the <i>ftype</i> is <code>:text</code>, these
arrays may begin or end with incomplete UTF-8 multi-octet
characters.
</p>

<hr>

<hr><h3 id="703"><a name="on-close-op-bookmarkxx"></a>on-close</h3><h3 id="704">Function</h3><h4 id="705">Package: net.aserve</h4>

<p id="706"><b>Arguments: </b><i>
contract code data-string
</i></p>

<p id="707">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-close</b>) or the
associated function object should be passed as the value of
the <b><i>on-close</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="708">
This function is called when a close message is received.
</p>

<hr>


<hr><h3 id="709"><a name="on-ping-op-bookmarkxx"></a>on-ping</h3><h3 id="710">Function</h3><h4 id="711">Package: net.aserve</h4>

<p id="712"><b>Arguments: </b><i>
contract data-usb8
</i></p>

<p id="713">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-ping</b>) or the
associated function object should be passed as the value of
the <b><i>on-ping</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="714">
This function is called when a ping message is received and is called
before the required pong response is sent, and its behavior does not
affect the standard response.
</p>

<hr>
    
<hr><h3 id="715"><a name="on-pong-op-bookmarkxx"></a>on-pong</h3><h3 id="716">Function</h3><h4 id="717">Package: net.aserve</h4>

<p id="718"><b>Arguments: </b><i>
contract data-usb8
</i></p>

<p id="719">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-pong</b>) or the
associated function object should be passed as the value of
the <b><i>on-pong</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="720">
This function is called when a pong message is received.
</p>

<hr>



<hr><h3 id="721"><a name="on-error-op-bookmarkxx"></a>on-error</h3><h3 id="722">Function</h3><h4 id="723">Package: net.aserve</h4>

<p id="724"><b>Arguments: </b><i>
contract
</i></p>

<p id="725">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-error</b>) or the
associated function object should be passed as the value of
the <b><i>on-error</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="726">
This function is called when an endpoint detects an error that causes an
attempt to send an abnormal termination message. The message may or may
not actually be sent.
</p>

<hr>


<hr><h3 id="727"><a name="on-open-op-bookmarkxx"></a>on-open</h3><h3 id="728">Function</h3><h4 id="729">Package: net.aserve</h4>

<p id="730"><b>Arguments: </b><i>
contract
</i></p>

<p id="731">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-open</b>) or the
associated function object should be passed as the value of
the <b><i>on-open</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>

<p id="732">
This function is called when a connection is first opened after a 
successful handshake.
</p>
<p id="733">
In a client application where <a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> is called
with <b><i>ply</i></b>
value <code>nil</code> or 0, this is the where the
application would normally begin operation on the client side (unless
it expected an unsolicited server message instead).
</p>

<hr>

<hr><h3 id="734"><a name="on-idle-op-bookmarkxx"></a>on-idle</h3><h3 id="735">Function</h3><h4 id="736">Package: net.aserve</h4>

<p id="737"><b>Arguments: </b><i>
contract
</i></p>

<p id="738">
This function is not already defined. The application writer must
define a function which accepts the arguments listed and returns
values as specified in the function description below. The symbol
naming the function (which need not be <b>on-idle</b>) or the
associated function object should be passed as the value of
the <b><i>on-idle</i></b> keyword argument
to <a href="miscellaneous.htm#publish-websocket-op-bookmarkxx"><b>publish-websocket</b></a> and/or
<a href="miscellaneous.htm#open-websocket-op-bookmarkxx"><b>open-websocket</b></a> (different
functions can be specified for each).
</p>
<p id="739">
This function is called when the websocket handler is setup to handle 
receiving and sending in the same thread. The function is called when there
is no incoming message and the send queue is empty.
</p>
<p id="740">
If the function returns <code>nil</code>, the handler
enters an operating system wait state waiting for input from the other
endpoint. If the function return a non-<code>nil</code>
value, the handler polls for input or queued messages to send.
</p>

<hr>




<hr><h2 id="741"><a name="websock-general-func-2">16.4 Websocket general functionality</a></h2>

<p id="742">
Symbols naming general websocket functionality are in
the <code>net.aserve</code> package.
</p>

<hr><h3 id="743"><a name="websocket-send-op-bookmarkxx"></a>websocket-send</h3><h3 id="744">Generic Function</h3><h4 id="745">Package: net.aserve</h4>

<p id="746"><b>Arguments: </b><i>
contract message
</i>&amp;key <i>ext fragment-size</i><i>
</i></p>

<p id="747">
There is a predefined method on this generic function specialized on 
<code>(websocket-message-contract t)</code>:
</p>
<p id="748">
That method sends a websocket message to the other endpoint and
returns the keyword <code>:text</code>
or <code>:binary</code> depending on the message type.
</p>
<p id="749">
The <b><i>contract</i></b> argument must be an open
websocket connection instance.
</p>
<p id="750">
If the <b><i>message</i></b> argument is a string, the
message type is <code>:text</code>.  If
the <b><i>message</i></b> argument is an array of
octets, the message type is <code>:binary</code>. Any other
type causes an error to be signaled.
</p>
<p id="751">
The <b><i>ext</i></b> argument when specified must be
the same type as the <i>message</i> argument. The data
is included in the message payload and will be presented as extension
data to the receiver. The current implementation in Allegro CL does not
support any named extensions.
</p>
<p id="752">
The <b><i>fragment-size</i></b> argument if specified
overrides the fragment-size default for the connection. Messages
above this size will be sent in fragments of approximately the
specified size. If the <i>ext</i> argument is specified,
any fragment-size specification is ignored; the message is always sent
in a single payload.
</p>

<hr>

<hr><h3 id="753"><a name="websocket-ping-op-bookmarkxx"></a>websocket-ping</h3><h3 id="754">Generic Function</h3><h4 id="755">Package: net.aserve</h4>

<p id="756"><b>Arguments: </b><i>
contract
</i>&amp;key <i>message</i><i>
</i></p>

<p id="757">
The predefined method specialized on <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a>
does the following:
</p>
<p id="758">
The method sends a ping message to the other
endpoint. The <b><i>message</i></b> argument must be a
string or <code>nil</code>.
</p>


<hr>

<hr><h3 id="759"><a name="websocket-pong-op-bookmarkxx"></a>websocket-pong</h3><h3 id="760">Generic Function</h3><h4 id="761">Package: net.aserve</h4>

<p id="762"><b>Arguments: </b><i>
contract
</i>&amp;key <i>message</i><i>
</i></p>

<p id="763">
The predefined method specialized on <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a>
does the following:
</p>
<p id="764">
The method sends a pong message to the other
endpoint. The <b><i>message</i></b> argument must be a
string or <code>nil</code>.
</p>

<hr>

<hr><h3 id="765"><a name="websocket-close-op-bookmarkxx"></a>websocket-close</h3><h3 id="766">Generic Function</h3><h4 id="767">Package: net.aserve</h4>

<p id="768"><b>Arguments: </b><i>
contract
</i>&amp;key <i>code message</i><i>
</i></p>

<p id="769">
The predefined method specialized on (<a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> t)
does the following:
</p>
<p id="770">
This method sends a close message to the other endpoint.  If
a <b><i>code</i></b> is specified it should be a valid
websocket close code. The <b><i>message</i></b> argument
must be a string or <code>nil</code>.
</p>
<p id="771">
Once the close message is sent, subsequent send calls are ignored.
</p>

<hr>

<hr><h3 id="772"><a name="websocket-state-op-bookmarkxx"></a>websocket-state</h3><h3 id="773">Generic Function</h3><h4 id="774">Package: net.aserve</h4>

<p id="775"><b>Arguments: </b><i>
contract
</i></p>

<p id="776">
The predefined method specialized on <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> does
the following:
</p>
<p id="777">
The method queries the state of the connection, returning one of the
keywords <code>:connecting</code>, <code>:open</code>, 
<code>:closing</code>,
or <code>:closed</code>.
</p>

<hr>

<hr><h3 id="778"><a name="websocket-protocol-op-bookmarkxx"></a>websocket-protocol</h3><h3 id="779">Generic Function</h3><h4 id="780">Package: net.aserve</h4>

<p id="781"><b>Arguments: </b><i>
contract
</i></p>

<p id="782">
The predefined method specialized on <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> does
the following:
</p>
<p id="783">
Returns a symbol or a string naming the protocol negotiated for the
connection idenified by <b><i>contract</i></b>. Returns
<code>nil</code> if the negotiated result is the
unmodified websocket protocol.
</p>.

<hr>

<hr><h3 id="784"><a name="websocket-extensions-op-bookmarkxx"></a>websocket-extensions</h3><h3 id="785">Generic Function</h3><h4 id="786">Package: net.aserve</h4>

<p id="787"><b>Arguments: </b><i>
contract
</i></p>

<p id="788">
The predefined method specialized on <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> does
the following:
</p>
<p id="789">
this method returns a list of strings or symbols naming the extensions
negotiated for this connection.
</p>

<hr>

<hr><h3 id="790"><a name="websocket-send-fragment-op-bookmarkxx"></a>websocket-send-fragment</h3><h3 id="791">Generic Function</h3><h4 id="792">Package: net.aserve</h4>

<p id="793"><b>Arguments: </b><i>
contract fq
</i>&amp;key <i>begin final data ext</i><i>
</i></p>

<p id="794">
The predefined method specialized on (<a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> t)
does the following:
</p>
<p id="795">
The method allows an application to exert more control over the
fragmentation of a message.  Each call prepares a separate message
fragment.  Any number of fragments can be prepared before any
sending takes place.  As soon as the first fragment is sent, no
other messages will be sent (except for ping or pong) until the
final fragment is sent.
</p>
<p id="796">
The <b><i>fq</i></b> argument must
be <code>nil</code> for the first call of a fragmented
message. The value returned is an opaque handle used as
the <i>fq</i> argument in subsequent calls.
</p>
<p id="797">
The keyword arguments have the following effect:
</p>
<ul>
<li id="798">
When <b><i>begin</i></b> is <code>t</code>,
begin sending this or previously prepared fragments.  Once the first
fragment is sent, new messages will be queued and will wait until the
final fragment in this message is sent.
</li>
<li id="799">
When <b><i>final</i></b> is <code>t</code>,
the fragment is the last, and no more will be accepted.
</li>
</ul>
<p id="800">
When <b><i>fq</i></b> is <code>nil</code>,
return new fq, required in subsequent calls.
</p>

<p id="801">
The <b><i>data</i></b>
and <b><i>ext</i></b> arguments are as in
<a href="miscellaneous.htm#websocket-send-op-bookmarkxx"><b>websocket-send</b></a>.  Note that this
function allows an application to scatter extension data among
fragments.
</p>
<p id="802">
This method may be called with a <code>nil</code> value
for <i>data</i> and <i>begin</i> specified
as <code>t</code>.
</p>

<hr>





<hr><h2 id="803"><a name="websock-classes-2">16.5 Websocket classes</a></h2>

<p id="804">
Websocket classes are named by symbols in
the <code>net.aserve</code> package.
</p>

<hr><h3 id="805"><a name="websocket-entity-class-bookmarkxx"></a>websocket-entity</h3><h3 id="806">Class</h3><h4 id="807">Package: net.aserve</h4>

<p id="808">
The superclass of any websocket implementation for
AllegroServe. Currently the only subclass is <a href="miscellaneous.htm#websocket-message-entity-class-bookmarkxx"><code>websocket-message-entity</code></a>.
</p>


<hr>

<hr><h3 id="809"><a name="websocket-message-entity-class-bookmarkxx"></a>websocket-message-entity</h3><h3 id="810">Class</h3><h4 id="811">Package: net.aserve</h4>

<p id="812">
This class implements the server part of the websocket protocol
specified in RFC 6455.
</p>

<hr>

<hr><h3 id="813"><a name="websocket-contract-class-bookmarkxx"></a>websocket-contract</h3><h3 id="814">Class</h3><h4 id="815">Package: net.aserve</h4>

<p id="816">
The superclass on any any websocket contract classes. Currently the
only subclass is <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a>.
</p>

<hr>

<hr><h3 id="817"><a name="websocket-message-contract-class-bookmarkxx"></a>websocket-message-contract</h3><h3 id="818">Class</h3><h4 id="819">Package: net.aserve</h4>

<p id="820">
An instance of this superclass is the opaque handle for all websocket
operations in both server and client applications. This class
implements the websocket protocol specified in RFC 6455.
</p>

<hr>

<hr><h3 id="821"><a name="websocket-message-client-contract-class-bookmarkxx"></a>websocket-message-client-contract</h3><h3 id="822">Class</h3><h4 id="823">Package: net.aserve</h4>

<p id="824">
The subclass of <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> used
by client code.
</p>

<hr>

<hr><h3 id="825"><a name="websocket-message-server-contract-class-bookmarkxx"></a>websocket-message-server-contract</h3><h3 id="826">Class</h3><h4 id="827">Package: net.aserve</h4>
<p id="828">
The subclass of <a href="miscellaneous.htm#websocket-message-contract-class-bookmarkxx"><code>websocket-message-contract</code></a> used
by server code.
</p>

<hr>




</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/miscellaneous.htm">10.0 version</a></td></tr></table></html>