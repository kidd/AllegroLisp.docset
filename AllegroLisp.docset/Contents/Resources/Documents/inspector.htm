<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>Inspector</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/inspector.htm">10.0 version</a></td></tr></table><h1 id="2">Inspector</h1><p id="3">This document contains the following sections:</p><a href="#inspector-intro-1">1.0 The inspector introduction</a><br>&nbsp;&nbsp;&nbsp;<a href="#istep-2">1.1 Inspector commands</a><br>&nbsp;&nbsp;&nbsp;<a href="#right-margin-2">1.2 The inspector and the right margin</a><br><a href="#inspector-example-1">2.0 An example of inspect</a><br><hr><hr><h2 id="4"><a name="inspector-intro-1">1.0 The inspector introduction</a></h2>

<p id="5">
The inspector allows the user to examine the internal structure of
Allegro CL objects.  The commands that control inspecting objects are
part of the Allegro CL top level command structure.
</p>

<p id="6">
Except when using the IDE (where inspection goes on in an Inspect
window), you can inspect objects at any time with the <a href="tpl-commands/istep.htm"><b>:istep</b></a> top-level command. Outside an
inspector command interpreter (described just below), <a href="tpl-commands/istep.htm"><b>:istep</b></a> displays an inspection of its
argument but does not enter an inspector command interpreter (its
behavior is different inside an inspector command interpreter.)
</p>

<p id="7">
Except when running the Integrated Development Environment,
the <a href="../ansicl/dictentr/inspect.htm"><b>inspect</b></a> function invokes a
recursive top-level command interpreter as does
the <a href="tpl-commands/inspect.htm"><b>:inspect</b></a> top-level
command. (In the IDE
<a href="../ansicl/dictentr/inspect.htm"><b>inspect</b></a> brings up
an <a href="ide-menus-and-dialogs/inspect-dialog.htm">Inspect</a>
dialog. The top-level
command <a href="tpl-commands/inspect.htm"><b>:inspect</b></a> does not work
when the IDE is running since all interaction with the inspector is
through the Inspector window. The IDE inspector is not further
discussed in this document (see <a href="cgide.htm">cgide.htm</a> for
information on the IDE). Allegro Composer also provides a window
inspector but its interface is
different. See <a href="composer.htm">composer.htm</a>.)</p>

<hr><h2 id="8"><a name="istep-2">1.1 Inspector commands</a></h2>

<p id="9">
Once the inspector is started, the <a href="tpl-commands/istep.htm"><b>:istep</b></a>, whose minimal abbreviation is
<strong>:i</strong>, top-level command can be used, as documented
here, to further inspect objects, to set values, and so on. 
</p>
<p id="10">
All the normal Allegro CL commands are available while inspecting
objects. You know inspector commands are available (and an object is
being inspected) when the prompt contains an i, like <strong>[1i]
USER(3):</strong>.
</p>

<p id="11">The inspector maintains a stack of objects whose components are
being inspected. The top object on that stack is called the <i>current
object</i>, and can be displayed at any time. When the current object
has components, these are displayed with prefixes of the form </p>

<pre id="12">
<i>index</i> -&gt; <i>name</i>
</pre>

<p id="13">where <i>index</i> is a numeric index associated with the component
and <i>name</i> is a symbolic name for the component. The user can
<i>select</i> a component of the current object by name or index, and
add it to the stack, making the selected component the new current
object. The user can also pop the current object off the stack, making
its parent object the current object again. In this way the user can
explore the structure of compound objects to any depth. </p>

<p id="14">To begin inspecting an object, call the <a href="../ansicl/dictentr/inspect.htm"><b>inspect</b></a> function or the <a href="tpl-commands/inspect.htm"><b>:inspect</b></a> top-level command
with the object as an
argument. A break loop is entered when the function is called and
exited when inspecting is stopped with the command </p>

<pre id="15">
:istep q 
</pre>

<p id="16">The break-level portion of the prompt has an appended `i' to
indicate that Lisp is in an inspection break loop (see the example in
<a href="#inspector-example-1">Section 2.0 An example of inspect</a>).</p>

<p id="17">
When inspection is initiated with a call to the inspect function,
all the inspect commands except <code>:istep q</code> set the
variable common-lisp:* to the current object being inspected. </p>

<p id="18">On Unix, a windowized inspector is provided with Allegro Composer,
an add-on product which provides a programming environment for Allegro
CL. See the Allegro Composer User Guide for more information.</p>

<p id="19">
When entered with no arguments, <a href="tpl-commands/istep.htm"><b>:istep</b></a> redisplays the structure of the
current object or prints an error message if there is no current
object. When entered with an option, performs as described in the
table below.
</p>

<p id="20">
Multiple options can be placed in a single <a href="tpl-commands/istep.htm"><b>:istep</b></a> command. Each is processed serially,
except intermediate information is not printed. But the
<code>pprint</code> option causes the current obejct to be
pretty printed, so <code>pprint</code>'s interspersed with other
commands cause intermediate printing. See the end of the example
section for some examples.
</p>
<p id="21">
Thus <a href="tpl-commands/istep.htm"><b>:istep</b></a> commands can look like
the following (<b>:i</b> is the abreviation for <a href="tpl-commands/istep.htm"><b>:istep</b></a>:
</p>

<pre id="22">
:i    ;; causes the redisplay of the current object

;;  Here are the forms of a single option (x) with
;;  one argument (y) or with two arguments (y and z):
:i &lt;x&gt; 
  OR 
:i &lt;x&gt; &lt;y&gt; 
  OR 
:i &lt;x&gt; &lt;y&gt; &lt;z&gt;

;;  As many options (along with arguments) can appear 
;;  in a single :i command, so in BNF notation:

:i {&lt;x&gt; [&lt;y&gt; [&lt;z&gt;]]}* 
</pre>

<p id="23">
Here is the table of options:
</p>



<table BORDER="1" CELLSPACING="1" CELLPADDING="7" WIDTH="95%">
  <tr>
    <td WIDTH="78" VALIGN="TOP"><b>Istep option</b></td>
    <td WIDTH="128" VALIGN="TOP"><b>Arguments</b></td>
    <td WIDTH="483" VALIGN="TOP"><b>Notes</b></td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>=</code> or
    <code>nil</code> (i.e.
    &lt;no arg&gt;)</td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP">Redisplay the inspection of the current object.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>?</code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option prints a message describing the inspector commands</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>*</code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><p id="24"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option initializes the inspect stack to hold only the value of *, that
    is, the first result from the last top-level evaluation. This object becomes the
    inspector's current object and its structure is displayed.</p>
    <p id="25"><code>(inspect *) </code></p>
    <p id="26">is like an </p>
      <p id="27"><code>:istep * </code></p>
    <p id="28">invoked within a recursive read-eval-print loop that 
    sets up its own inspect stack.</p></td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>+</code></td>
    <td WIDTH="128" VALIGN="TOP">x</td>
    <td WIDTH="483" VALIGN="TOP">Do (inspect (eval x)).</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><i>index</i></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option, where <em>index</em> is an integer, selects the <em>index</em>th
    component of the current object. The selection is made according to the component indices
    displayed by inspect, which may not be the same as the element numbers used by other
    Allegro CL functions. Some object components cannot be selected. Elements of a specialized
    vector, for example, are displayed as components but cannot be made the current object.
    Attempting to select such a component will elicit an explanatory message but will not
    signal an error.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><i>name</i></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><p id="29"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option, where name is a symbol that is not one of the special inspector
    command options (such as *, q, and set), selects the named component of the current
    object. The component names are those displayed by inspect. They are compared using
    string-equal, so case and package are not significant. If a component's name is shadowed
    by another component's name or by one of the inspector command symbols, then the numeric
    index can be used to select the shadowed component. The inspector considers the tail of a
    dotted list to be a component with no numeric index but with the component name tail. The
    tail of a proper list can also be designated by name, even though no tail component is
    displayed for such an object. In addition, the component names <b>car</b>, <b>cdr</b>, <b>caar</b>,
    <b>cadr</b>, <b>cdar</b>, <b>cddr</b>, <b>caaar</b>, ... <b>cdddr</b>, <b>caaaar</b>, ... <b>cddddr</b>,
    are recognized for selecting the named components of list structures. </p>
    <p id="30">As with selection
    by <em>index</em>, attempting to select an unselectable component by name results in an
    explanation but no error. </p></td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code><em>form</em></code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP">Evaluate <em>form</em> and initialize inspector to inspect
    the result. <em>form</em> cannot be a number or a symbol.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>-</code>
    ^</td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with either of these options removes the current object from the inspect stack and
    displays the new current object. The new current object will be the parent of the old
    current object. If the inspect stack is empty or has only one entry, then the current
    object is not changed and an explanatory message is displayed.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>&lt;</code>
    <code>&gt;</code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP">Inspect the previous (<code>&lt;</code>) or next (<code>&gt;</code>)
    indexed component of the current object.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>q</code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option clears the inspect stack, so that there is no current object. If
    there is an active invocation of inspect, then the inner-most invocation returns to its
    caller. (This is important if you are looking at a large object which you want to be
    garbage collected. No object on the inspect stack will be reclaimed by the garbage
    collector.)</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>set</code></td>
    <td WIDTH="128" VALIGN="TOP"><i>index-or-name form</i></td>
    <td WIDTH="483" VALIGN="TOP"><p id="31">When <a href="tpl-commands/istep.htm"><b>:istep</b></a>
    is called with this option, form is evaluated for a single value. If <em>index-or-name</em>
    is an index (i.e. an integer) and if the current object has a settable component indexed
    by it, then the value of form is stored in that component. If <em>index-or-name</em> is a
    name (i.e. a symbol which is not one of the inspect options) and if the current object has
    a settable component with that name, then the value of form is stored in that component.</p>
    <p id="32">If
    there is no current object, or it has no settable component identified by <em>index-or-name</em>,
    or if the type of that component does not admit assignment of form's value, then an
    explanatory message is displayed and the component is not changed. Many components that
    are not selectable are settable. Elements of specialized vectors, for example, are
    settable. </p></td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>print</code></td>
    <td WIDTH="128" VALIGN="TOP"><i>max</i></td>
    <td WIDTH="483" VALIGN="TOP"><p id="33"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option limits the number of components that it displays. The maximum
    number defaults to <code>10</code>, but can be changed by using this command. <em>max</em>
    must be a positive integer. The value starts at 10 for each invocation of the inspector
    (that is, each entry into an inspector break loop).</p>
    <p id="34">If there are more components than
    the maximum specified, that many are printed, then suspension points (`...') then the
    final component (whatever its index). If there is exactly one more component than the
    maximum, all components are printed without suspension points.</p></td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>pprint</code></td>
    <td WIDTH="128" VALIGN="TOP"></td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option pretty prints the current object. When you
    have multiple options in the same command, interspersing 
    <code>pprint</code>'s where desired cause the intermediate objects
    to be printed. Thus <code>:i 7 pprint &lt;</code> tells the
    system to inspect the component at index 7, pretty print it, 
    and go back to the previous (at index 6) component. 
    <code>:i 7 &lt;</code> would only print the component at index 6.
</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>raw</code></td>
    <td WIDTH="128" VALIGN="TOP"><i>t-or-nil</i></td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with <code>raw t</code> puts the inspector into raw mode while <code>nil</code>
    returns it to regular mode. In raw mode, standard-instances are viewed with no special
    interpretation, instead of having its slots walked in standard CLOS manner. Raw mode is
    remembered in deeper recursions of inspect.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>skip</code></td>
    <td WIDTH="128" VALIGN="TOP"><em>n</em></td>
    <td WIDTH="483" VALIGN="TOP"><a href="tpl-commands/istep.htm"><b>:istep</b></a>
    called with this option redisplays the current object, omitting the first <em>n</em>
    components. This allows the display of any section of a large structure or array without
    filling the screen with unwanted information.</td>
  </tr>
  <tr>
    <td WIDTH="78" VALIGN="TOP"><code>tree</code></td>
    <td WIDTH="128" VALIGN="TOP"> </td>
    <td WIDTH="483" VALIGN="TOP">When called with this option, <a href="tpl-commands/istep.htm"><b>:istep</b></a> displays the elements of the
    inspect stack so the user can see the genealogy of the current object relative to the
    object specified by <a href="tpl-commands/istep.htm"><b>:istep</b></a> *<code><i><b>
    </b></i></code>or (inspect *).</td>
  </tr>
</table>




<hr><h2 id="35"><a name="right-margin-2">1.2 The inspector and the right margin</a></h2>

<p id="36">
The inspector uses the right margin (the value
of <a href="../ansicl/dictentr/print-ri.htm"><code>*print-right-margin*</code></a>)
to determine when to abbreviate data displayed. The following example
shows that making <a href="../ansicl/dictentr/print-ri.htm"><code>*print-right-margin*</code></a> causes more data to be
displayed.
</p>
<pre id="37">
;; We are inspecting an internal variable, excl::*shared-cons-table*,
;; which has largish but not unreasonably sized data elements:

cl-user(1): :inspect excl::*shared-cons-table*
A tenured #&lt;equal hash-table (sans values) with weak keys, 16882 entries @
            #x4016bfba&gt;
   0 key ----------&gt; ((:internal) ...), a proper list with 3 elements
   1 key ----------&gt; (# . excl::generate-eql-match-tree), a dotted list with 1 element
   2 key ----------&gt; (ff::value ff::pointer ff::extra ...), a proper list with 5 elements
   3 key ----------&gt; (comp::con comp::cycle), a proper list with 2 elements
   4 key ----------&gt; (comp::syms), a proper list with 1 element
   5 key ----------&gt; (&amp;optional comp::nocommit), a proper list with 2 elements
   6 key ----------&gt; (((method) . mp:process-name) ...), a proper list with 2 elements
   7 key ----------&gt; (# . excl.yacc::grammar-defaults), a dotted list with 1 element
   8 key ----------&gt; (# . :modeless-end-anchor-no-newline), a dotted list with 1 element
   9 key ----------&gt; (# ...), a proper list with 3 elements
  10 key ----------&gt; (regexp::end regexp::back-end), a proper list with 2 elements
  11 key ----------&gt; (#:class #:kids #:type ...), a proper list with 19 elements
  [...]

;; remaining printed entries deleted

;; Next, with a larger right margin set:

[1i] cl-user(2): :i q
cl-user(3): (setq *print-right-margin* 150)
150
cl-user(4): :in excl::*shared-cons-table*
A tenured #&lt;equal hash-table (sans values) with weak keys, 16882 entries @ #x4016bfba&gt;
   0 key ----------&gt; ((:internal) ((method) . lep::compute-reply) lep::tpl-command-session), a proper list with 3 elements
   1 key ----------&gt; ((labels) . excl::generate-eql-match-tree), a dotted list with 1 element
   2 key ----------&gt; (ff::value ff::pointer ff::extra ff::offset ff::width), a proper list with 5 elements
   3 key ----------&gt; (comp::con comp::cycle), a proper list with 2 elements
   4 key ----------&gt; (comp::syms), a proper list with 1 element
   5 key ----------&gt; (&amp;optional comp::nocommit), a proper list with 2 elements
   6 key ----------&gt; (((method) . mp:process-name) mp:process), a proper list with 2 elements
   7 key ----------&gt; ((setf) . excl.yacc::grammar-defaults), a dotted list with 1 element
   8 key ----------&gt; ((:property) . :modeless-end-anchor-no-newline), a dotted list with 1 element
   9 key ----------&gt; (((method) . regexp::fe-compile-pass3-rec) regexp::ast-greedy-optional-repetition t), a proper list with 3 elements
  10 key ----------&gt; (regexp::end regexp::back-end), a proper list with 2 elements
  11 key ----------&gt; (#:class #:kids #:type #:bits #:env #:inline-info #:source #:vars #:vals #:srcs ...), a proper list with 19 elements
</pre>



<hr><hr><h2 id="38"><a name="inspector-example-1">2.0 An example of inspect</a></h2> 

<p id="39">The following example shows how the inspect commands are used. </p>

<pre id="40">
;; Please note that this manual is generic over several
;; implementations of Allegro CL. The exact representation
;; of the objects displayed here may differ in your version.
;;
;; Please also note: 
;;
;; 1. After the initial call to INSPECT, the prompt changes
;; to [1i] USER(&lt;num&gt;):. The `i' indicates an inspect 
;; break loop
;;
;; 2. Some lines wrapped when printed and we have added
;; carriage returns to prettify things.

cl-user(1): (inspect #(car x 12 #\a #*100 (1/2 0.5 0.5d0)))
A simple t vector (6) @ #x4566d32
   0-&gt; The symbol car
   1-&gt; The symbol x
   2-&gt; fixnum 12 [#x00000030]
   3-&gt; character #\a [#x0000030e] char-code #x0061
   4-&gt; A simple-bit-vector (3) #*100
   5-&gt; (1/2 0.5 0.5d0), a proper list with 3 elements
[1i] cl-user(2): :i 0
The symbol car @ #x400a1d7
  which is an external symbol in the common-lisp package
   0 type ---------&gt; Bit field: #x07
   1 flags --------&gt; Bit field: #x24
   2 hash ---------&gt; Bit field: #x2c85
   3 value --------&gt; ..unbound..
   4 package ------&gt; The common-lisp package
   5 function -----&gt; #&lt;Function car&gt;
   6 name ---------&gt; A simple-string (3) &quot;car&quot;
   7 plist --------&gt; (excl::.args. (1 . 1) ...), a proper list with 12 elements
[1i] cl-user(3): :i 7
A proper list @ #x4614b49 with 12 elements
   0-&gt; The symbol excl::.args.
   1-&gt; (1 . 1), a dotted list with 1 element
   2-&gt; The symbol comp::.side-effect-free-fcn.
   3-&gt; The symbol t
   4-&gt; The symbol comp::.comp-args.
   5-&gt; (1 . 1), a dotted list with 1 element
   6-&gt; The symbol comp::.qc-call-handler.
   7-&gt; #&lt;Closure (:internal
                  (flet (:top-level-form &quot;qbif.cl&quot; 8473)
                    comp::qc-car-cdr-closure)
                  0) [car]
         @ #x40c5b7a&gt;
   8-&gt; The symbol excl::setf-inverse
   9-&gt; The symbol excl::.inv-car
  10-&gt; The symbol excl::dynamic-extent-arg-template
  11-&gt; The symbol nil
[1i] cl-user(4): :i tree
In first recursive call to inspect.
The current object is:
(excl::.args. (1 . 1) ...), a proper list with 12 elements, which is component number 7 of
The symbol car, which is component number 0 of
simple t vector (6) = #(car x 12...), which was selected by &quot;(inspect ...)&quot;
[1i] cl-user(5): :i -
The symbol car @ #x400a1d7
  which is an external symbol in the common-lisp package
   0 type ---------&gt; Bit field: #x07
   1 flags --------&gt; Bit field: #x24
   2 hash ---------&gt; Bit field: #x2c85
   3 value --------&gt; ..unbound..
   4 package ------&gt; The common-lisp package
   5 function -----&gt; #&lt;Function car&gt;
   6 name ---------&gt; A simple-string (3) &quot;car&quot;
   7 plist --------&gt; (excl::.args. (1 . 1) ...), a proper list with 12 elements
[1i] cl-user(6): :i 2
Cannot select the element indexed by 2
[1i] cl-user(7): :i -
A simple t vector (6) @ #x4566d32
   0-&gt; The symbol car
   1-&gt; The symbol x
   2-&gt; fixnum 12 [#x00000030]
   3-&gt; character #\a [#x0000030e] char-code #x0061
   4-&gt; A simple-bit-vector (3) #*100
   5-&gt; (1/2 0.5 0.5d0), a proper list with 3 elements
[1i] cl-user(8): :i 1
The symbol x @ #x456693f
  which is an internal symbol in the common-lisp-user package
   0 type ---------&gt; Bit field: #x07
   1 flags --------&gt; Bit field: #x00
   2 hash ---------&gt; Bit field: #x207a
   3 value --------&gt; ..unbound..
   4 package ------&gt; The common-lisp-user package
   5 function -----&gt; #&lt;Function (unnamed) @ #x4002532&gt;
   6 name ---------&gt; A simple-string (1) &quot;x&quot;
   7 plist --------&gt; The symbol nil
[1i] cl-user(9): :i set value 0
The symbol x @ #x456693f
  which is an internal symbol in the common-lisp-user package
   0 type ---------&gt; Bit field: #x07
   1 flags --------&gt; Bit field: #x00
   2 hash ---------&gt; Bit field: #x207a
   3 value --------&gt; fixnum 0 [#x00000000]
   4 package ------&gt; The common-lisp-user package
   5 function -----&gt; #&lt;Function (unnamed) @ #x4002532&gt;
   6 name ---------&gt; A simple-string (1) &quot;x&quot;
   7 plist --------&gt; The symbol nil
[1i] cl-user(10): :i -
A simple t vector (6) @ #x4566d32
   0-&gt; The symbol car
   1-&gt; The symbol x
   2-&gt; fixnum 12 [#x00000030]
   3-&gt; character #\a [#x0000030e] char-code #x0061
   4-&gt; A simple-bit-vector (3) #*100
   5-&gt; (1/2 0.5 0.5d0), a proper list with 3 elements
[1i] cl-user(11): :i 5
A proper list @ #x45fe489 with 3 elements
   0-&gt; ratio object = 1/2
   1-&gt; single-float = 0.5 [#x3f000000]
   2-&gt; double-float = 0.5d0 [#x3fe00000 00000000]
[1i] cl-user(12): :i set tail (cdr *)
A closed list @ #x45fe489 with 1-element header and 2-element cycle
   0-&gt; ratio object = 1/2
   1-&gt; single-float = 0.5 [#x3f000000]
   2-&gt; double-float = 0.5d0 [#x3fe00000 00000000]
   3 == 1
[1i] cl-user(13): :i tail
Object has no selectable component named tail
[1i] cl-user(14): :i q
#(car x 12 #\a #*100 (1/2 0.5 0.5d0 0.5 0.5d0 0.5 0.5d0 0.5 0.5d0 0.5 ...))
cl-user(15): 

;; Inspection of hashtables starting in release 5.0.1.
;; Inspection of hash tables now shows a nice listing of key/value
;; pairs. In the initial implementation, you could't inspect individual 
;; keys or values without using raw mode but now you can.
;; Further, values (but not keys) can be set, as we show.

cl-user(15): (setq x (make-hash-table :size 5))
#&lt;eql hash-table with 0 entries @ #x4572aca&gt;
cl-user(16): (setf (gethash 'a x) 'a1 
                   (gethash 'b x) 'b1 (gethash 'c x) 'c1)
c1
cl-user(17): (inspect x)
#&lt;eql hash-table with 3 entries @ #x4572aca&gt;
   0 key ----------&gt; The symbol a
   1 value --------&gt; The symbol a1
   2 key ----------&gt; The symbol b
   3 value --------&gt; The symbol b1
   4 key ----------&gt; The symbol c
   5 value --------&gt; The symbol c1
[1i] user(18): :i set 3 'b1new
#&lt;eql hash-table with 3 entries @ #x54c6ba2&gt;
   0 key ----------&gt; The symbol a
   1 value --------&gt; The symbol a1
   2 key ----------&gt; The symbol b
   3 value --------&gt; The symbol b1new
   4 key ----------&gt; The symbol c
   5 value --------&gt; The symbol c1
[1i] user(19): :i 3
The symbol b1new @ #x580c457
  which is an internal symbol in the common-lisp-user package
   0 type ---------&gt; Bit field: #x01
   1 flags --------&gt; Bit field: #x00
   2 hash ---------&gt; Bit field: #x41d4
   3 value --------&gt; ..unbound..
   4 package ------&gt; The common-lisp-user package
   5 function -----&gt; #&lt;Function (unnamed) @ #x4001872&gt;
   6 name ---------&gt; A simple-string (5) &quot;b1new&quot;
   7 plist --------&gt; The symbol nil
[1i] user(20): :i q
#&lt;eql hash-table with 3 entries @ #x4572aca&gt;
cl-user(21): 

;;  Here are some examples using multiple options in the
;;  same command, showing also the use of pprint to display
;;  intermediate information:
cl-user(1): :i 'car
The symbol car @ #x7100c337
  which is an external symbol in the common-lisp package
   0 type ---------&gt; Bit field: #x07
   1 flags --------&gt; Bit field: #x24
   2 hash ---------&gt; Bit field: #x61d8
   3 value --------&gt; ..unbound..
   4 package ------&gt; The common-lisp package
   5 function -----&gt; #&lt;Function car&gt;
   6 name ---------&gt; A simple-string (3) &quot;car&quot;
   7 plist --------&gt; &lt;...&gt;, a proper list with 8 elements
cl-user(2): :i 7 pprint &lt;

(compiler::.side-effect-free-fcn. t compiler::.comp-args. (1 . 1)
 compiler::.qc-call-handler.
 #&lt;Closure (:internal
            (flet (:top-level-form &quot;qbif.cl&quot; 8593)
              compiler::qc-car-cdr-closure)
            0) [car]
   @ #x71353c8a&gt;
 excl::setf-inverse excl::.inv-car)
A simple-string (3) &quot;car&quot; @ #x7101a1ca
   0-&gt; The character #\c [#x63]
   1-&gt; The character #\a [#x61]
   2-&gt; The character #\r [#x72]
cl-user(3): 


;;  Here several objects can be printed at once:

cl-user(10): (inspect *print-pprint-dispatch*)
pprint-dispatch struct @ #x7126301a = #S(pprint-dispatch ...)
   0 Class --------&gt; #&lt;structure-class pprint-dispatch&gt;
   1 conses-with-cars -&gt; #&lt;eq hash-table with 70 entries @ #x71278eca&gt;
   2 structures ---&gt; #&lt;equal hash-table with 0 entries @ #x71278eea&gt;
   3 others -------&gt; (#S(excl::entry ...) ...), a proper list with 3 elements
[1i] cl-user(11): :i 3
A proper list @ #x71954281 with 3 elements
   0-&gt; excl::entry struct = #S(excl::entry ...)
   1-&gt; excl::entry struct = #S(excl::entry ...)
   2-&gt; excl::entry struct = #S(excl::entry ...)
[1i] cl-user(12): :i 0 pprint &gt; pprint &gt; pprint -

#S(excl::entry :test #&lt;Function function-call-p&gt;
               :fn #&lt;Function alternative-fn-call&gt;
               :full-spec ((-5) (satisfies excl::function-call-p)))

#S(excl::entry :test #&lt;Function consp&gt;
               :fn #&lt;Function pprint-fill-no-annotation&gt;
               :full-spec ((-10) cons))

#S(excl::entry :test #&lt;Function always-true&gt;
               :fn #&lt;Function default-use-print-object&gt;
               :full-spec ((-10) t))
A proper list @ #x71954281 with 3 elements
   0-&gt; excl::entry struct = #S(excl::entry ...)
   1-&gt; excl::entry struct = #S(excl::entry ...)
   2-&gt; excl::entry struct = #S(excl::entry ...)
[1i] cl-user(13): 

</pre>

</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/inspector.htm">10.0 version</a></td></tr></table></html>