<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>reap-os-subprocess</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: system</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s"> Minimal update since the initial 10.1 release.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/system/reap-os-subprocess.htm">10.0 version</a></td></tr></table><h2 id="2">reap-os-subprocess</h2>

<p id="3"><b>Arguments: </b><i></i>&amp;key  (<i>pid</i> -1) (<i>wait</i> t)</p>

<p id="4">
This function replaces <a href="os-wait.htm"><b>os-wait</b></a>, which has the same
functionality. This function has a better interface (using keyword
rather than optional arguments).
</p>

<p id="5">
If a process is started by the <a href="../excl/run-shell-command.htm"><b>run-shell-command</b></a> with the
<i>wait</i> keyword argument to that function <code>nil</code>, then the process will remain in the system after
it completes until either Lisp exits or Lisp executes <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> to inquire
about the exit status. To prevent the system becoming clogged with
processes, a program that spawns a number of processes with
<code>:wait nil</code> must be sure to call <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> after each process
finishes.
</p>

<p id="6">
The arguments, as described below, specify what <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> does and what processes
it looks for but the function always returns three values:
</p>
<ol>
<li id="7">
<b>The exit status of the reaped process or nil, if no process was
reaped</b>. The cases when no process is reaped are described below
(basically, there are not suitable processes to be reaped). 
</li>
<li id="8">
<b>The pid of the reaped process, or, when no process was reaped, the
argument pid in some cases and nil in other cases</b>. When a process
is reaped, this second returned value is its process id. When there
are suitable processes running but none to reap, and the
<i>wait</i> keyword argument
is <code>nil</code>, the pid argument is returned as the
second value. When there are no suitable processes running or suitable
to reap, the second returned value
is <code>nil</code>. (The first returned value tells you
whether or not a process was reaped. If the first returned value
is <code>nil</code>, no process was reaped regardless of
the second returned value.)
</li>
<li id="9">
<b>On UNIX, the number of the signal that caused the reaped process to
exit, and <code>nil</code> if no process was reaped, and
always <code>nil</code> on Windows</b>. This third
returned value was added in release 7.0. On UNIX/Linux platforms, it
allows you to ensure the process exited normally. A status of 0 alone
does not guarantee that: you must also examine the signal number. On
Windows, that information is not available and <code>nil</code> is always returned as the third value.
</li>
</ol>


<p id="10">
Exactly what <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> does depends on the
status of spawned processes and the keyword arguments. The
<i>pid</i> argument controls what processes might be
considered by <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a>.  If
<i>pid</i> is -1 (the default), all processes are
considered. If <i>pid</i> is 0, only processes in the
same process group as the executing Lisp image are considered. If
<i>pid</i> is a positive integer, only the process with
that process id is considered. In the rest of this description,
<em>processes</em> means `processes considered by <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a>'.  See the Unix system
documentation of the <strong>waitpid()</strong> system call (you can
usually see this by typing "man waitpid" at a Unix prompt).
</p>

<p id="11">
If there are any processes started by <a href="../excl/run-shell-command.htm"><b>run-shell-command</b></a> with the argument
<code>:wait nil</code> which have exited but for which <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> has not been
run, one of them is selected by the operating system and is reaped,
with <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a>
returning three values: (1)
the exit status of the reaped process; (2) process id of the reaped
process, and (3) the number of the signal that caused the reaped
process to exit on UNIX/Linux platforms, and <code>nil</code> on Windows.
</p>

<p id="12">
If there are no such processes which have exited but there are
processes which are still running, then the behavior of <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> depends on the
<i>wait</i> keyword argument.  If it is <code>t</code> (the default), <a href="reap-os-subprocess.htm"><b>sys:reap-os-subprocess</b></a> will wait (disabling
multiprocessing, if necessary) until one of the running processes
exits. Then <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> returns that process's
status; id; and the relevant signal number on UNIX/Linux and <code>nil</code> on Windows.
</p>
<p id="13">
If <i>wait</i> is <code>nil</code> (the
default is <code>t</code>), <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> will immediately return
three
values: <code>nil</code>, <code>nil</code>,
and <code>nil</code> if there are no processes to clean
up; a status, pid, and signal number or <code>nil</code>
if the process with number pid is cleaned up;
<code>nil</code>, the <i>pid</i> argument to
<a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a>, and
<code>nil</code> if processes are still running and none
has yet exited.
</p>

<p id="14">
If there are no running processes, <a href="reap-os-subprocess.htm"><b>reap-os-subprocess</b></a> returns immediately with
the three values <code>nil</code>, <code>nil</code>, <code>nil</code>.
</p>

<p id="15">
This function simply calls the Unix system function
<strong>waitpid</strong> with the <i>pid</i> and
<i>nohang</i> flags. Its behavior is determined by the
behavior of that function.
</p>

<p id="16">
Here are some examples of return values:
</p>
<ol>
<li id="17">
<code>nil</code> <code>nil</code> <code>nil</code>:
there are no processes, running or not, suitable to reap (based on the
value of the <i>pid</i>
argument). The <i>wait</i> keyword argument can be true
or <code>nil</code>.
</li>
<li id="18">
<code>nil</code> -1 <code>nil</code>: there
are processes that are suitable to reap but they are all still
running, so none reaped; <i>pid</i> was -1 (the default,
so unspecified or specified -1) and it is returned as the second
value, as specified when there are suitable processes but none ready
to reap. <i>wait</i> must
be <code>nil</code>.
</li>
<li id="19">
<code>nil</code> 0 <code>nil</code>: same as 2
(processes suitable to reap but all still
running). <i>pid</i> was specified as 0 (meaning only
look for processes in the same group as the Lisp process), so 0 is the
second returned value. <i>wait</i> must
be <code>nil</code>.
</li>
<li id="20">
<code>nil</code> 12345 <code>nil</code>: as in 2
and 3, there is a processes suitable to reap (the process with pid 12345) but
it is still running. <i>pid</i> was specified as 12345 
(meaning consider the process with that pid, if it exists), so 12345 is the
second returned value. <i>wait</i> must
be <code>nil</code>.
</li>
<li id="21">
0 12345 <code>nil</code>: process with pid 12345 reaped,
it exited with status 0, no signal caused it to exit (or Lisp is on Windows).
The <i>wait</i> keyword argument can be true
or <code>nil</code>.
</li>
<li id="22">
0 12345 9: process with pid 12345 reaped, it exited with status 0,
signal 9 caused it to exit (and Lisp is not on Windows).
The <i>wait</i> keyword argument can be true
or <code>nil</code>.
</li>
</ol>


<h3 id="23">
A note on the order of execution when reading from a program to be
reaped in a non-multiprocessing environment
</h3>

<p id="24">
Code written similar to the following skeleton of code may hang:
</p>
<pre id="25">
(multiple-value-bind (shell-stream error-stream process)
    (excl:run-shell-command cmd
       :input :stream :output :stream :error :stream)

  (when process
    (loop (when (sys:reap-os-subprocesses :pid process :wait nil)
	     (return))))

  ;; now read from shell-stream and then close the streams

  )
</pre>
<p id="26">
In the code sample, the process is reaped prior to reading the process
output. While this often works, because many programs don't bother to
wait for all of their writes to complete before exiting, it may cause
hanging if the pipe to which the data is sent fills up and thus not
all data can be written until some reading is done, or the child
program waits until each input has been read before writing more data.
Some operating systems will cause select() to not
return ready status on the output descriptor if any data at all is
in that pipe, regardless of whether a call to write() would have
succeeded.
</p>
<p id="27">
The correct outline for the code is:
</p>
<pre id="28">
(multiple-value-bind (shell-stream error-stream process)
    (excl:run-shell-command cmd
       :input :stream :output :stream :error :stream)

  ;; do all the reading from shell-stream

  (when process
    (loop (when (sys:reap-os-subprocesses :pid process :wait nil)
	     (return))))

  ;;  close the streams  
)
</pre>
<p id="29">
When you are using multiprocessing, you can use multiprocessing tools
such as <a href="../mp/process-wait.htm"><b>process-wait</b></a> to ensure that no
hanging occurs.
</p>

<p id="30">See <a href="../../os-interface.htm">os-interface.htm</a> for
information on running shell programs.</p>


<hr><p id="31"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s"> Minimal update since the initial 10.1 release.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/system/reap-os-subprocess.htm">10.0 version</a></td></tr></table></body></html>